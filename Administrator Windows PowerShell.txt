>>         const lines = [];
>>         const modifiedSelectionColor = getSelectionColor(theme);
>>         const backgroundColorSelection =
>>             modifiedSelectionColor.backgroundColorSelection;
>>         const foregroundColorSelection =
>>             modifiedSelectionColor.foregroundColorSelection;
>>         ["::selection", "::-moz-selection"].forEach((selection) => {
>>             lines.push(`${selection} {`);
>>             lines.push(
>>                 `    background-color: ${backgroundColorSelection} !important;`
>>             );
>>             lines.push(`    color: ${foregroundColorSelection} !important;`);
>>             lines.push("}");
>>         });
>>         return lines.join("\n");
>>     }
>>     function getModifiedScrollbarStyle(theme) {
>>         const lines = [];
>>         let colorTrack;
>>         let colorIcons;
>>         let colorThumb;
>>         let colorThumbHover;
>>         let colorThumbActive;
>>         let colorCorner;
>>         if (theme.scrollbarColor === "auto") {
>>             colorTrack = modifyBackgroundColor({r: 241, g: 241, b: 241}, theme);
>>             colorIcons = modifyForegroundColor({r: 96, g: 96, b: 96}, theme);
>>             colorThumb = modifyBackgroundColor({r: 176, g: 176, b: 176}, theme);
>>             colorThumbHover = modifyBackgroundColor(
>>                 {r: 144, g: 144, b: 144},
>>                 theme
>>             );
>>             colorThumbActive = modifyBackgroundColor(
>>                 {r: 96, g: 96, b: 96},
>>                 theme
>>             );
>>             colorCorner = modifyBackgroundColor(
>>                 {r: 255, g: 255, b: 255},
>>                 theme
>>             );
>>         } else {
>>             const rgb = parseColorWithCache(theme.scrollbarColor);
>>             const hsl = rgbToHSL(rgb);
>>             const isLight = hsl.l > 0.5;
>>             const lighten = (lighter) => ({
>>                 ...hsl,
>>                 l: clamp(hsl.l + lighter, 0, 1)
>>             });
>>             const darken = (darker) => ({
>>                 ...hsl,
>>                 l: clamp(hsl.l - darker, 0, 1)
>>             });
>>             colorTrack = hslToString(darken(0.4));
>>             colorIcons = hslToString(isLight ? darken(0.4) : lighten(0.4));
>>             colorThumb = hslToString(hsl);
>>             colorThumbHover = hslToString(lighten(0.1));
>>             colorThumbActive = hslToString(lighten(0.2));
>>             colorCorner = hslToString(darken(0.5));
>>         }
>>         lines.push("::-webkit-scrollbar {");
>>         lines.push(`    background-color: ${colorTrack};`);
>>         lines.push(`    color: ${colorIcons};`);
>>         lines.push("}");
>>         lines.push("::-webkit-scrollbar-thumb {");
>>         lines.push(`    background-color: ${colorThumb};`);
>>         lines.push("}");
>>         lines.push("::-webkit-scrollbar-thumb:hover {");
>>         lines.push(`    background-color: ${colorThumbHover};`);
>>         lines.push("}");
>>         lines.push("::-webkit-scrollbar-thumb:active {");
>>         lines.push(`    background-color: ${colorThumbActive};`);
>>         lines.push("}");
>>         lines.push("::-webkit-scrollbar-corner {");
>>         lines.push(`    background-color: ${colorCorner};`);
>>         lines.push("}");
>>         return lines.join("\n");
>>     }
>>     function getModifiedFallbackStyle(filter, {strict}) {
>>         const factory = defaultFallbackFactory;
>>         return factory(filter, {strict});
>>     }
>>     function defaultFallbackFactory(filter, {strict}) {
>>         const lines = [];
>>         const isMicrosoft = ["microsoft.com", "docs.microsoft.com"].includes(
>>             location.hostname
>>         );
>>         lines.push(
>>             `html, body, ${
>>                 strict
>>                     ? `body :not(iframe)${
>>                           isMicrosoft
>>                               ? ':not(div[style^="position:absolute;top:0;left:-"]'
>>                               : ""
>>                       }`
>>                     : "body > :not(iframe)"
>>             } {`
>>         );
>>         lines.push(
>>             `    background-color: ${modifyBackgroundColor(
>>                 {r: 255, g: 255, b: 255},
>>                 filter
>>             )} !important;`
>>         );
>>         lines.push(
>>             `    border-color: ${modifyBorderColor(
>>                 {r: 64, g: 64, b: 64},
>>                 filter
>>             )} !important;`
>>         );
>>         lines.push(
>>             `    color: ${modifyForegroundColor(
>>                 {r: 0, g: 0, b: 0},
>>                 filter
>>             )} !important;`
>>         );
>>         lines.push("}");
>>         return lines.join("\n");
>>     }
>>     const unparsableColors = new Set([
>>         "inherit",
>>         "transparent",
>>         "initial",
>>         "currentcolor",
>>         "none",
>>         "unset"
>>     ]);
>>     function getColorModifier(prop, value, rule) {
>>         if (unparsableColors.has(value.toLowerCase())) {
>>             return value;
>>         }
>>         const rgb = parseColorWithCache(value);
>>         if (!rgb) {
>>             return null;
>>         }
>>         if (prop.includes("background")) {
>>             if (
>>                 (rule.style.webkitMaskImage &&
>>                     rule.style.webkitMaskImage !== "none") ||
>>                 (rule.style.webkitMask &&
>>                     !rule.style.webkitMask.startsWith("none")) ||
>>                 (rule.style.mask && rule.style.mask !== "none") ||
>>                 (rule.style.getPropertyValue("mask-image") &&
>>                     rule.style.getPropertyValue("mask-image") !== "none")
>>             ) {
>>                 return (filter) => modifyForegroundColor(rgb, filter);
>>             }
>>             return (filter) => modifyBackgroundColor(rgb, filter);
>>         }
>>         if (prop.includes("border") || prop.includes("outline")) {
>>             return (filter) => modifyBorderColor(rgb, filter);
>>         }
>>         return (filter) => modifyForegroundColor(rgb, filter);
>>     }
>>     const imageDetailsCache = new Map();
>>     const awaitingForImageLoading = new Map();
>>     function shouldIgnoreImage(selectorText, selectors) {
>>         if (!selectorText || selectors.length === 0) {
>>             return false;
>>         }
>>         if (selectors.some((s) => s === "*")) {
>>             return true;
>>         }
>>         const ruleSelectors = selectorText.split(/,\s*/g);
>>         for (let i = 0; i < selectors.length; i++) {
>>             const ignoredSelector = selectors[i];
>>             if (ruleSelectors.some((s) => s === ignoredSelector)) {
>>                 return true;
>>             }
>>         }
>>         return false;
>>     }
>>     function getBgImageModifier(
>>         value,
>>         rule,
>>         ignoreImageSelectors,
>>         isCancelled
>>     ) {
>>         try {
>>             const gradients = parseGradient(value);
>>             const urls = getMatches(cssURLRegex, value);
>>             if (urls.length === 0 && gradients.length === 0) {
>>                 return value;
>>             }
>>             const getIndices = (matches) => {
>>                 let index = 0;
>>                 return matches.map((match) => {
>>                     const valueIndex = value.indexOf(match, index);
>>                     index = valueIndex + match.length;
>>                     return {match, index: valueIndex};
>>                 });
>>             };
>>             const matches = gradients
>>                 .map((i) => ({type: "gradient", ...i}))
>>                 .concat(
>>                     getIndices(urls).map((i) => ({
>>                         type: "url",
>>                         offset: 0,
>>                         ...i
>>                     }))
>>                 )
>>                 .sort((a, b) => (a.index > b.index ? 1 : -1));
>>             const getGradientModifier = (gradient) => {
>>                 const {typeGradient, match, hasComma} = gradient;
>>                 const partsRegex =
>>                     /([^\(\),]+(\([^\(\)]*(\([^\(\)]*\)*[^\(\)]*)?\))?([^\(\), ]|( (?!calc)))*),?/g;
>>                 const colorStopRegex =
>>                     /^(from|color-stop|to)\(([^\(\)]*?,\s*)?(.*?)\)$/;
>>                 const parts = getMatches(partsRegex, match, 1).map((part) => {
>>                     part = part.trim();
>>                     let rgb = parseColorWithCache(part);
>>                     if (rgb) {
>>                         return (filter) => modifyGradientColor(rgb, filter);
>>                     }
>>                     const space = part.lastIndexOf(" ");
>>                     rgb = parseColorWithCache(part.substring(0, space));
>>                     if (rgb) {
>>                         return (filter) =>
>>                             `${modifyGradientColor(
>>                                 rgb,
>>                                 filter
>>                             )} ${part.substring(space + 1)}`;
>>                     }
>>                     const colorStopMatch = part.match(colorStopRegex);
>>                     if (colorStopMatch) {
>>                         rgb = parseColorWithCache(colorStopMatch[3]);
>>                         if (rgb) {
>>                             return (filter) =>
>>                                 `${colorStopMatch[1]}(${
>>                                     colorStopMatch[2]
>>                                         ? `${colorStopMatch[2]}, `
>>                                         : ""
>>                                 }${modifyGradientColor(rgb, filter)})`;
>>                         }
>>                     }
>>                     return () => part;
>>                 });
>>                 return (filter) => {
>>                     return `${typeGradient}(${parts
>>                         .map((modify) => modify(filter))
>>                         .join(", ")})${hasComma ? ", " : ""}`;
>>                 };
>>             };
>>             const getURLModifier = (urlValue) => {
>>                 var _a;
>>                 if (
>>                     shouldIgnoreImage(rule.selectorText, ignoreImageSelectors)
>>                 ) {
>>                     return null;
>>                 }
>>                 let url = getCSSURLValue(urlValue);
>>                 const isURLEmpty = url.length === 0;
>>                 const {parentStyleSheet} = rule;
>>                 const baseURL =
>>                     parentStyleSheet && parentStyleSheet.href
>>                         ? getCSSBaseBath(parentStyleSheet.href)
>>                         : ((_a = parentStyleSheet.ownerNode) === null ||
>>                           _a === void 0
>>                               ? void 0
>>                               : _a.baseURI) || location.origin;
>>                 url = getAbsoluteURL(baseURL, url);
>>                 return async (filter) => {
>>                     if (isURLEmpty) {
>>                         return "url('')";
>>                     }
>>                     let imageDetails = null;
>>                     if (imageDetailsCache.has(url)) {
>>                         imageDetails = imageDetailsCache.get(url);
>>                     } else {
>>                         try {
>>                             if (!isBlobURLCheckResultReady()) {
>>                                 await requestBlobURLCheck();
>>                             }
>>                             if (awaitingForImageLoading.has(url)) {
>>                                 const awaiters =
>>                                     awaitingForImageLoading.get(url);
>>                                 imageDetails = await new Promise((resolve) =>
>>                                     awaiters.push(resolve)
>>                                 );
>>                                 if (!imageDetails) {
>>                                     return null;
>>                                 }
>>                             } else {
>>                                 awaitingForImageLoading.set(url, []);
>>                                 imageDetails = await getImageDetails(url);
>>                                 imageDetailsCache.set(url, imageDetails);
>>                                 awaitingForImageLoading
>>                                     .get(url)
>>                                     .forEach((resolve) =>
>>                                         resolve(imageDetails)
>>                                     );
>>                                 awaitingForImageLoading.delete(url);
>>                             }
>>                             if (isCancelled()) {
>>                                 return null;
>>                             }
>>                         } catch (err) {
>>                             logWarn(err);
>>                             if (awaitingForImageLoading.has(url)) {
>>                                 awaitingForImageLoading
>>                                     .get(url)
>>                                     .forEach((resolve) => resolve(null));
>>                                 awaitingForImageLoading.delete(url);
>>                             }
>>                         }
>>                     }
>>                     if (imageDetails) {
>>                         const bgImageValue = getBgImageValue(
>>                             imageDetails,
>>                             filter
>>                         );
>>                         if (bgImageValue) {
>>                             return bgImageValue;
>>                         }
>>                     }
>>                     if (url.startsWith("data:")) {
>>                         const blobURL = await tryConvertDataURLToBlobURL(url);
>>                         if (blobURL) {
>>                             return `url("${blobURL}")`;
>>                         }
>>                     }
>>                     return `url("${url}")`;
>>                 };
>>             };
>>             const getBgImageValue = (imageDetails, filter) => {
>>                 const {isDark, isLight, isTransparent, isLarge, width}=
>>                     imageDetails;
>>                 let result;
>>                 const logSrc = imageDetails.src.startsWith("data:")
>>                     ? "data:"
>>                     : imageDetails.src;
>>                 if (isLarge) {
>>                     logInfo(`Not modifying too large image ${logSrc}`);
>>                     result = null;
>>                 } else if (
>>                     isDark &&
>>                     isTransparent &&
>>                     filter.mode === 1 &&
>>                     width > 2
>>                 ) {
>>                     logInfo(`Inverting dark image ${logSrc}`);
>>                     const inverted = getFilteredImageURL(imageDetails,{
>>                         ...filter,
>>                         sepia: clamp(filter.sepia + 10, 0, 100)
>>                     });
>>                     result = `url("${inverted}")`;
>>                 } else if (isLight && !isTransparent && filter.mode === 1) {
>>                     logInfo(`Dimming light image ${logSrc}`);
>>                     const dimmed = getFilteredImageURL(imageDetails, filter);
>>                     result = `url("${dimmed}")`;
>>                 } else if (filter.mode === 0 && isLight) {
>>                     logInfo(`Applying filter to image ${logSrc}`);
>>                     const filtered = getFilteredImageURL(imageDetails,{
>>                         ...filter,
>>                         brightness: clamp(filter.brightness - 10, 5, 200),
>>                         sepia: clamp(filter.sepia + 10, 0, 100)
>>                     });
>>                     result = `url("${filtered}")`;
>>                 } else {
>>                     logInfo(`Not modifying the image ${logSrc}`);
>>                     result = null;
>>                 }
>>                 return result;
>>             };
>>             const modifiers = [];
>>             let matchIndex = 0;
>>             let prevHasComma = false;
>>             matches.forEach(
>>                 ({type, match, index, typeGradient, hasComma, offset},i) => {
>>                     const matchStart = index;
>>                     const prefixStart = matchIndex;
>>                     const matchEnd = matchStart + match.length + offset;
>>                     matchIndex = matchEnd;
>>                     if (prefixStart !== matchStart) {
>>                         if (prevHasComma) {
>>                             modifiers.push(() => {
>>                                 let betweenValue = value.substring(
>>                                     prefixStart,
>>                                     matchStart
>>                                 );
>>                                 if (betweenValue[0] === ",") {
>>                                     betweenValue = betweenValue.substring(1);
>>                                 }
>>                                 return betweenValue;
>>                             });
>>                         } else {
>>                             modifiers.push(() =>
>>                                 value.substring(prefixStart, matchStart)
>>                             );
>>                         }
>>                     }
>>                     prevHasComma = hasComma || false;
>>                     if (type === "url") {
>>                         modifiers.push(getURLModifier(match));
>>                     } else if (type === "gradient") {
>>                         modifiers.push(
>>                             getGradientModifier({
>>                                 match,
>>                                 index,
>>                                 typeGradient: typeGradient,
>>                                 hasComma: hasComma || false,
>>                                 offset
>>                             })
>>                         );
>>                     }
>>                     if (i === matches.length - 1) {
>>                         modifiers.push(() => value.substring(matchEnd));
>>                     }
>>                 }
>>             );
>>             return (filter) => {
>>                 const results = modifiers
>>                     .filter(Boolean)
>>                     .map((modify) => modify(filter));
>>                 if (results.some((r) => r instanceof Promise)) {
>>                     return Promise.all(results).then((asyncResults) =>{
>>                         return asyncResults.filter(Boolean).join("");
>>                     });
>>                 }
>>                 const combinedResult = results.join("");
>>                 if (combinedResult.endsWith(", initial")) {
>>                     return combinedResult.slice(0, -9);
>>                 }
>>                 return combinedResult;
>>             };
>>         } catch (err) {
>>             return null;
>>         }
>>     }
>>     function getShadowModifierWithInfo(value) {
>>         try {
>>             let index = 0;
>>             const colorMatches = getMatches(
>>                 /(^|\s)(?!calc)([a-z]+\(.+?\)|#[0-9a-f]+|[a-z]+)(.*?(inset|outset)?($|,))/gi,
>>                 value,
>>                 2
>>             );
>>             let notParsed = 0;
>>             const modifiers = colorMatches.map((match, i) => {
>>                 const prefixIndex = index;
>>                 const matchIndex = value.indexOf(match, index);
>>                 const matchEnd = matchIndex + match.length;
>>                 index = matchEnd;
>>                 const rgb = parseColorWithCache(match);
>>                 if (!rgb) {
>>                     notParsed++;
>>                     return () => value.substring(prefixIndex, matchEnd);
>>                 }
>>                 return (filter) =>
>>                     `${value.substring(
>>                         prefixIndex,
>>                         matchIndex
>>                     )}${modifyShadowColor(rgb, filter)}${
>>                         i === colorMatches.length - 1
>>                             ? value.substring(matchEnd)
>>                             : ""
>>                     }`;
>>             });
>>             return (filter) => {
>>                 const modified = modifiers
>>                     .map((modify) => modify(filter))
>>                     .join("");
>>                 return {
>>                     matchesLength: colorMatches.length,
>>                     unparseableMatchesLength: notParsed,
>>                     result: modified
>>                 };
>>             };
>>         } catch (err) {
>>             return null;
>>         }
>>     }
>>     function getShadowModifier(value) {
>>         const shadowModifier = getShadowModifierWithInfo(value);
>>         if (!shadowModifier) {
>>             return null;
>>         }
>>         return (theme) => shadowModifier(theme).result;
>>     }
>>     function getVariableModifier(
>>         variablesStore,
>>         prop,
>>         value,
>>         rule,
>>         ignoredImgSelectors,
>>         isCancelled
>>     ) {
>>         return variablesStore.getModifierForVariable({
>>             varName: prop,
>>             sourceValue: value,
>>             rule,
>>             ignoredImgSelectors,
>>             isCancelled
>>         });
>>     }
>>     function getVariableDependantModifier(variablesStore, prop, value){
>>         return variablesStore.getModifierForVarDependant(prop, value);
>>     }
>>     function cleanModificationCache() {
>>         clearColorModificationCache();
>>         imageDetailsCache.clear();
>>         cleanImageProcessingCache();
>>         awaitingForImageLoading.clear();
>>     }
>>
>>     const VAR_TYPE_BGCOLOR = 1 << 0;
>>     const VAR_TYPE_TEXTCOLOR = 1 << 1;
>>     const VAR_TYPE_BORDERCOLOR = 1 << 2;
>>     const VAR_TYPE_BGIMG = 1 << 3;
>>     class VariablesStore {
>>         constructor() {
>>             this.varTypes = new Map();
>>             this.rulesQueue = [];
>>             this.inlineStyleQueue = [];
>>             this.definedVars = new Set();
>>             this.varRefs = new Map();
>>             this.unknownColorVars = new Set();
>>             this.unknownBgVars = new Set();
>>             this.undefinedVars = new Set();
>>             this.initialVarTypes = new Map();
>>             this.changedTypeVars = new Set();
>>             this.typeChangeSubscriptions = new Map();
>>             this.unstableVarValues = new Map();
>>         }
>>         clear() {
>>             this.varTypes.clear();
>>             this.rulesQueue.splice(0);
>>             this.inlineStyleQueue.splice(0);
>>             this.definedVars.clear();
>>             this.varRefs.clear();
>>             this.unknownColorVars.clear();
>>             this.unknownBgVars.clear();
>>             this.undefinedVars.clear();
>>             this.initialVarTypes.clear();
>>             this.changedTypeVars.clear();
>>             this.typeChangeSubscriptions.clear();
>>             this.unstableVarValues.clear();
>>         }
>>         isVarType(varName, typeNum) {
>>             return (
>>                 this.varTypes.has(varName) &&
>>                 (this.varTypes.get(varName) & typeNum) > 0
>>             );
>>         }
>>         addRulesForMatching(rules) {
>>             this.rulesQueue.push(rules);
>>         }
>>         addInlineStyleForMatching(style) {
>>             this.inlineStyleQueue.push(style);
>>         }
>>         matchVariablesAndDependents() {
>>             if (
>>                 this.rulesQueue.length === 0 &&
>>                 this.inlineStyleQueue.length === 0
>>             ) {
>>                 return;
>>             }
>>             this.changedTypeVars.clear();
>>             this.initialVarTypes = new Map(this.varTypes);
>>             this.collectRootVariables();
>>             this.collectVariablesAndVarDep();
>>             this.collectRootVarDependents();
>>             this.varRefs.forEach((refs, v) => {
>>                 refs.forEach((r) => {
>>                     if (this.varTypes.has(v)) {
>>                         this.resolveVariableType(r, this.varTypes.get(v));
>>                     }
>>                 });
>>             });
>>             this.unknownColorVars.forEach((v) => {
>>                 if (this.unknownBgVars.has(v)) {
>>                     this.unknownColorVars.delete(v);
>>                     this.unknownBgVars.delete(v);
>>                     this.resolveVariableType(v, VAR_TYPE_BGCOLOR);
>>                 } else if (
>>                     this.isVarType(
>>                         v,
>>                         VAR_TYPE_BGCOLOR |
>>                             VAR_TYPE_TEXTCOLOR |
>>                             VAR_TYPE_BORDERCOLOR
>>                     )
>>                 ) {
>>                     this.unknownColorVars.delete(v);
>>                 } else {
>>                     this.undefinedVars.add(v);
>>                 }
>>             });
>>             this.unknownBgVars.forEach((v) => {
>>                 const hasColor =
>>                     this.findVarRef(v, (ref) => {
>>                         return (
>>                             this.unknownColorVars.has(ref) ||
>>                             this.isVarType(
>>                                 ref,
>>                                 VAR_TYPE_TEXTCOLOR | VAR_TYPE_BORDERCOLOR
>>                             )
>>                         );
>>                     }) != null;
>>                 if (hasColor) {
>>                     this.iterateVarRefs(v, (ref) => {
>>                         this.resolveVariableType(ref, VAR_TYPE_BGCOLOR);
>>                     });
>>                 } else if (
>>                     this.isVarType(v, VAR_TYPE_BGCOLOR | VAR_TYPE_BGIMG)
>>                 ) {
>>                     this.unknownBgVars.delete(v);
>>                 } else {
>>                     this.undefinedVars.add(v);
>>                 }
>>             });
>>             this.changedTypeVars.forEach((varName) => {
>>                 if (this.typeChangeSubscriptions.has(varName)) {
>>                     this.typeChangeSubscriptions
>>                         .get(varName)
>>                         .forEach((callback) => {
>>                             callback();
>>                         });
>>                 }
>>             });
>>             this.changedTypeVars.clear();
>>         }
>>         getModifierForVariable(options) {
>>             return (theme) => {
>>                 const {
>>                     varName,
>>                     sourceValue,
>>                     rule,
>>                     ignoredImgSelectors,
>>                     isCancelled
>>                 } = options;
>>                 const getDeclarations = () => {
>>                     const declarations = [];
>>                     const addModifiedValue = (
>>                         typeNum,
>>                         varNameWrapper,
>>                         colorModifier
>>                     ) => {
>>                         if (!this.isVarType(varName, typeNum)) {
>>                             return;
>>                         }
>>                         const property = varNameWrapper(varName);
>>                         let modifiedValue;
>>                         if (isVarDependant(sourceValue)) {
>>                             if (isConstructedColorVar(sourceValue)) {
>>                                 let value = insertVarValues(
>>                                     sourceValue,
>>                                     this.unstableVarValues
>>                                 );
>>                                 if (!value) {
>>                                     value =
>>                                         typeNum === VAR_TYPE_BGCOLOR
>>                                             ? "#ffffff"
>>                                             : "#000000";
>>                                 }
>>                                 modifiedValue = colorModifier(value, theme);
>>                             } else {
>>                                 modifiedValue = replaceCSSVariablesNames(
>>                                     sourceValue,
>>                                     (v) => varNameWrapper(v),
>>                                     (fallback) => colorModifier(fallback, theme)
>>                                 );
>>                             }
>>                         } else {
>>                             modifiedValue = colorModifier(sourceValue,theme);
>>                         }
>>                         declarations.push({
>>                             property,
>>                             value: modifiedValue
>>                         });
>>                     };
>>                     addModifiedValue(
>>                         VAR_TYPE_BGCOLOR,
>>                         wrapBgColorVariableName,
>>                         tryModifyBgColor
>>                     );
>>                     addModifiedValue(
>>                         VAR_TYPE_TEXTCOLOR,
>>                         wrapTextColorVariableName,
>>                         tryModifyTextColor
>>                     );
>>                     addModifiedValue(
>>                         VAR_TYPE_BORDERCOLOR,
>>                         wrapBorderColorVariableName,
>>                         tryModifyBorderColor
>>                     );
>>                     if (this.isVarType(varName, VAR_TYPE_BGIMG)) {
>>                         const property = wrapBgImgVariableName(varName);
>>                         let modifiedValue = sourceValue;
>>                         if (isVarDependant(sourceValue)) {
>>                             modifiedValue = replaceCSSVariablesNames(
>>                                 sourceValue,
>>                                 (v) => wrapBgColorVariableName(v),
>>                                 (fallback) => tryModifyBgColor(fallback, theme)
>>                             );
>>                         }
>>                         const bgModifier = getBgImageModifier(
>>                             modifiedValue,
>>                             rule,
>>                             ignoredImgSelectors,
>>                             isCancelled
>>                         );
>>                         modifiedValue =
>>                             typeof bgModifier === "function"
>>                                 ? bgModifier(theme)
>>                                 : bgModifier;
>>                         declarations.push({
>>                             property,
>>                             value: modifiedValue
>>                         });
>>                     }
>>                     return declarations;
>>                 };
>>                 const callbacks = new Set();
>>                 const addListener = (onTypeChange) => {
>>                     const callback = () => {
>>                         const decs = getDeclarations();
>>                         onTypeChange(decs);
>>                     };
>>                     callbacks.add(callback);
>>                     this.subscribeForVarTypeChange(varName, callback);
>>                 };
>>                 const removeListeners = () => {
>>                     callbacks.forEach((callback) => {
>>                         this.unsubscribeFromVariableTypeChanges(
>>                             varName,
>>                             callback
>>                         );
>>                     });
>>                 };
>>                 return {
>>                     declarations: getDeclarations(),
>>                     onTypeChange: {addListener, removeListeners}
>>                 };
>>             };
>>         }
>>         getModifierForVarDependant(property, sourceValue) {
>>             if (sourceValue.match(/^\s*(rgb|hsl)a?\(/)) {
>>                 const isBg = property.startsWith("background");
>>                 const isText = isTextColorProperty(property);
>>                 return (theme) => {
>>                     let value = insertVarValues(
>>                         sourceValue,
>>                         this.unstableVarValues
>>                     );
>>                     if (!value) {
>>                         value = isBg ? "#ffffff" : "#000000";
>>                     }
>>                     const modifier = isBg
>>                         ? tryModifyBgColor
>>                         : isText
>>                           ? tryModifyTextColor
>>                           : tryModifyBorderColor;
>>                     return modifier(value, theme);
>>                 };
>>             }
>>             if (property === "background-color") {
>>                 return (theme) => {
>>                     return replaceCSSVariablesNames(
>>                         sourceValue,
>>                         (v) => wrapBgColorVariableName(v),
>>                         (fallback) => tryModifyBgColor(fallback, theme)
>>                     );
>>                 };
>>             }
>>             if (isTextColorProperty(property)) {
>>                 return (theme) => {
>>                     return replaceCSSVariablesNames(
>>                         sourceValue,
>>                         (v) => wrapTextColorVariableName(v),
>>                         (fallback) => tryModifyTextColor(fallback, theme)
>>                     );
>>                 };
>>             }
>>             if (
>>                 property === "background" ||
>>                 property === "background-image" ||
>>                 property === "box-shadow"
>>             ) {
>>                 return (theme) => {
>>                     const unknownVars = new Set();
>>                     const modify = () => {
>>                         const variableReplaced = replaceCSSVariablesNames(
>>                             sourceValue,
>>                             (v) => {
>>                                 if (this.isVarType(v, VAR_TYPE_BGCOLOR)) {
>>                                     return wrapBgColorVariableName(v);
>>                                 }
>>                                 if (this.isVarType(v, VAR_TYPE_BGIMG)){
>>                                     return wrapBgImgVariableName(v);
>>                                 }
>>                                 unknownVars.add(v);
>>                                 return v;
>>                             },
>>                             (fallback) => tryModifyBgColor(fallback, theme)
>>                         );
>>                         if (property === "box-shadow") {
>>                             const shadowModifier =
>>                                 getShadowModifierWithInfo(variableReplaced);
>>                             const modifiedShadow = shadowModifier(theme);
>>                             if (
>>                                 modifiedShadow.unparseableMatchesLength !==
>>                                 modifiedShadow.matchesLength
>>                             ) {
>>                                 return modifiedShadow.result;
>>                             }
>>                         }
>>                         return variableReplaced;
>>                     };
>>                     const modified = modify();
>>                     if (unknownVars.size > 0) {
>>                         const isFallbackResolved = modified.match(
>>                             /^var\(.*?, var\(--darkreader-bg--.*\)\)$/
>>                         );
>>                         if (isFallbackResolved) {
>>                             return modified;
>>                         }
>>                         return new Promise((resolve) => {
>>                             const firstUnknownVar = unknownVars
>>                                 .values()
>>                                 .next().value;
>>                             const callback = () => {
>>                                 this.unsubscribeFromVariableTypeChanges(
>>                                     firstUnknownVar,
>>                                     callback
>>                                 );
>>                                 const newValue = modify();
>>                                 resolve(newValue);
>>                             };
>>                             this.subscribeForVarTypeChange(
>>                                 firstUnknownVar,
>>                                 callback
>>                             );
>>                         });
>>                     }
>>                     return modified;
>>                 };
>>             }
>>             if (
>>                 property.startsWith("border") ||
>>                 property.startsWith("outline")
>>             ) {
>>                 return (theme) => {
>>                     return replaceCSSVariablesNames(
>>                         sourceValue,
>>                         (v) => wrapBorderColorVariableName(v),
>>                         (fallback) => tryModifyBorderColor(fallback, theme)
>>                     );
>>                 };
>>             }
>>             return null;
>>         }
>>         subscribeForVarTypeChange(varName, callback) {
>>             if (!this.typeChangeSubscriptions.has(varName)) {
>>                 this.typeChangeSubscriptions.set(varName, new Set());
>>             }
>>             const rootStore = this.typeChangeSubscriptions.get(varName);
>>             if (!rootStore.has(callback)) {
>>                 rootStore.add(callback);
>>             }
>>         }
>>         unsubscribeFromVariableTypeChanges(varName, callback) {
>>             if (this.typeChangeSubscriptions.has(varName)) {
>>                 this.typeChangeSubscriptions.get(varName).delete(callback);
>>             }
>>         }
>>         collectVariablesAndVarDep() {
>>             this.rulesQueue.forEach((rules) => {
>>                 iterateCSSRules(rules, (rule) => {
>>                     if (rule.style) {
>>                         this.collectVarsFromCSSDeclarations(rule.style);
>>                     }
>>                 });
>>             });
>>             this.inlineStyleQueue.forEach((style) => {
>>                 this.collectVarsFromCSSDeclarations(style);
>>             });
>>             this.rulesQueue.splice(0);
>>             this.inlineStyleQueue.splice(0);
>>         }
>>         collectVarsFromCSSDeclarations(style) {
>>             iterateCSSDeclarations(style, (property, value) => {
>>                 if (isVariable(property)) {
>>                     this.inspectVariable(property, value);
>>                 }
>>                 if (isVarDependant(value)) {
>>                     this.inspectVarDependant(property, value);
>>                 }
>>             });
>>         }
>>         shouldProcessRootVariables() {
>>             var _a;
>>             return (
>>                 this.rulesQueue.length > 0 &&
>>                 ((_a = document.documentElement.getAttribute("style"))===
>>                     null || _a === void 0
>>                     ? void 0
>>                     : _a.includes("--"))
>>             );
>>         }
>>         collectRootVariables() {
>>             if (!this.shouldProcessRootVariables()) {
>>                 return;
>>             }
>>             iterateCSSDeclarations(
>>                 document.documentElement.style,
>>                 (property, value) => {
>>                     if (isVariable(property)) {
>>                         this.inspectVariable(property, value);
>>                     }
>>                 }
>>             );
>>         }
>>         inspectVariable(varName, value) {
>>             this.unstableVarValues.set(varName, value);
>>             if (isVarDependant(value) && isConstructedColorVar(value)){
>>                 this.unknownColorVars.add(varName);
>>                 this.definedVars.add(varName);
>>             }
>>             if (this.definedVars.has(varName)) {
>>                 return;
>>             }
>>             this.definedVars.add(varName);
>>             const isColor =
>>                 rawValueRegex.test(value) || parseColorWithCache(value);
>>             if (isColor) {
>>                 this.unknownColorVars.add(varName);
>>             } else if (
>>                 value.includes("url(") ||
>>                 value.includes("linear-gradient(") ||
>>                 value.includes("radial-gradient(")
>>             ) {
>>                 this.resolveVariableType(varName, VAR_TYPE_BGIMG);
>>             }
>>         }
>>         resolveVariableType(varName, typeNum) {
>>             const initialType = this.initialVarTypes.get(varName) || 0;
>>             const currentType = this.varTypes.get(varName) || 0;
>>             const newType = currentType | typeNum;
>>             this.varTypes.set(varName, newType);
>>             if (newType !== initialType || this.undefinedVars.has(varName)) {
>>                 this.changedTypeVars.add(varName);
>>                 this.undefinedVars.delete(varName);
>>             }
>>             this.unknownColorVars.delete(varName);
>>             this.unknownBgVars.delete(varName);
>>         }
>>         collectRootVarDependents() {
>>             if (!this.shouldProcessRootVariables()) {
>>                 return;
>>             }
>>             iterateCSSDeclarations(
>>                 document.documentElement.style,
>>                 (property, value) => {
>>                     if (isVarDependant(value)) {
>>                         this.inspectVarDependant(property, value);
>>                     }
>>                 }
>>             );
>>         }
>>         inspectVarDependant(property, value) {
>>             if (isVariable(property)) {
>>                 this.iterateVarDeps(value, (ref) => {
>>                     if (!this.varRefs.has(property)) {
>>                         this.varRefs.set(property, new Set());
>>                     }
>>                     this.varRefs.get(property).add(ref);
>>                 });
>>             } else if (
>>                 property === "background-color" ||
>>                 property === "box-shadow"
>>             ) {
>>                 this.iterateVarDeps(value, (v) =>
>>                     this.resolveVariableType(v, VAR_TYPE_BGCOLOR)
>>                 );
>>             } else if (isTextColorProperty(property)) {
>>                 this.iterateVarDeps(value, (v) =>
>>                     this.resolveVariableType(v, VAR_TYPE_TEXTCOLOR)
>>                 );
>>             } else if (
>>                 property.startsWith("border") ||
>>                 property.startsWith("outline")
>>             ) {
>>                 this.iterateVarDeps(value, (v) =>
>>                     this.resolveVariableType(v, VAR_TYPE_BORDERCOLOR)
>>                 );
>>             } else if (
>>                 property === "background" ||
>>                 property === "background-image"
>>             ) {
>>                 this.iterateVarDeps(value, (v) => {
>>                     if (this.isVarType(v, VAR_TYPE_BGCOLOR | VAR_TYPE_BGIMG)) {
>>                         return;
>>                     }
>>                     const isBgColor =
>>                         this.findVarRef(v, (ref) => {
>>                             return (
>>                                 this.unknownColorVars.has(ref) ||
>>                                 this.isVarType(
>>                                     ref,
>>                                     VAR_TYPE_TEXTCOLOR | VAR_TYPE_BORDERCOLOR
>>                                 )
>>                             );
>>                         }) != null;
>>                     this.iterateVarRefs(v, (ref) => {
>>                         if (isBgColor) {
>>                             this.resolveVariableType(ref, VAR_TYPE_BGCOLOR);
>>                         } else {
>>                             this.unknownBgVars.add(ref);
>>                         }
>>                     });
>>                 });
>>             }
>>         }
>>         iterateVarDeps(value, iterator) {
>>             const varDeps = new Set();
>>             iterateVarDependencies(value, (v) => varDeps.add(v));
>>             varDeps.forEach((v) => iterator(v));
>>         }
>>         findVarRef(varName, iterator, stack = new Set()) {
>>             if (stack.has(varName)) {
>>                 return null;
>>             }
>>             stack.add(varName);
>>             const result = iterator(varName);
>>             if (result) {
>>                 return varName;
>>             }
>>             const refs = this.varRefs.get(varName);
>>             if (!refs || refs.size === 0) {
>>                 return null;
>>             }
>>             for (const ref of refs) {
>>                 const found = this.findVarRef(ref, iterator, stack);
>>                 if (found) {
>>                     return found;
>>                 }
>>             }
>>             return null;
>>         }
>>         iterateVarRefs(varName, iterator) {
>>             this.findVarRef(varName, (ref) => {
>>                 iterator(ref);
>>                 return false;
>>             });
>>         }
>>         setOnRootVariableChange(callback) {
>>             this.onRootVariableDefined = callback;
>>         }
>>         putRootVars(styleElement, theme) {
>>             const sheet = styleElement.sheet;
>>             if (sheet.cssRules.length > 0) {
>>                 sheet.deleteRule(0);
>>             }
>>             const declarations = new Map();
>>             iterateCSSDeclarations(
>>                 document.documentElement.style,
>>                 (property, value) => {
>>                     if (isVariable(property)) {
>>                         if (this.isVarType(property, VAR_TYPE_BGCOLOR)) {
>>                             declarations.set(
>>                                 wrapBgColorVariableName(property),
>>                                 tryModifyBgColor(value, theme)
>>                             );
>>                         }
>>                         if (this.isVarType(property, VAR_TYPE_TEXTCOLOR)) {
>>                             declarations.set(
>>                                 wrapTextColorVariableName(property),
>>                                 tryModifyTextColor(value, theme)
>>                             );
>>                         }
>>                         if (this.isVarType(property, VAR_TYPE_BORDERCOLOR)) {
>>                             declarations.set(
>>                                 wrapBorderColorVariableName(property),
>>                                 tryModifyBorderColor(value, theme)
>>                             );
>>                         }
>>                         this.subscribeForVarTypeChange(
>>                             property,
>>                             this.onRootVariableDefined
>>                         );
>>                     }
>>                 }
>>             );
>>             const cssLines = [];
>>             cssLines.push(":root {");
>>             for (const [property, value] of declarations) {
>>                 cssLines.push(`    ${property}: ${value};`);
>>             }
>>             cssLines.push("}");
>>             const cssText = cssLines.join("\n");
>>             sheet.insertRule(cssText);
>>         }
>>     }
>>     const variablesStore = new VariablesStore();
>>     function getVariableRange(input, searchStart = 0) {
>>         const start = input.indexOf("var(", searchStart);
>>         if (start >= 0) {
>>             const range = getParenthesesRange(input, start + 3);
>>             if (range) {
>>                 return {start, end: range.end};
>>             }
>>         }
>>         return null;
>>     }
>>     function getVariablesMatches(input) {
>>         const ranges = [];
>>         let i = 0;
>>         let range;
>>         while ((range = getVariableRange(input, i))) {
>>             const {start, end} = range;
>>             ranges.push({start, end, value: input.substring(start, end)});
>>             i = range.end + 1;
>>         }
>>         return ranges;
>>     }
>>     function replaceVariablesMatches(input, replacer) {
>>         const matches = getVariablesMatches(input);
>>         const matchesCount = matches.length;
>>         if (matchesCount === 0) {
>>             return input;
>>         }
>>         const inputLength = input.length;
>>         const replacements = matches.map((m) => replacer(m.value));
>>         const parts = [];
>>         parts.push(input.substring(0, matches[0].start));
>>         for (let i = 0; i < matchesCount; i++) {
>>             parts.push(replacements[i]);
>>             const start = matches[i].end;
>>             const end =
>>                 i < matchesCount - 1 ? matches[i + 1].start : inputLength;
>>             parts.push(input.substring(start, end));
>>         }
>>         return parts.join("");
>>     }
>>     function getVariableNameAndFallback(match) {
>>         const commaIndex = match.indexOf(",");
>>         let name;
>>         let fallback;
>>         if (commaIndex >= 0) {
>>             name = match.substring(4, commaIndex).trim();
>>             fallback = match.substring(commaIndex + 1, match.length - 1).trim();
>>         } else {
>>             name = match.substring(4, match.length - 1).trim();
>>             fallback = "";
>>         }
>>         return {name, fallback};
>>     }
>>     function replaceCSSVariablesNames(value, nameReplacer, fallbackReplacer) {
>>         const matchReplacer = (match) => {
>>             const {name, fallback} = getVariableNameAndFallback(match);
>>             const newName = nameReplacer(name);
>>             if (!fallback) {
>>                 return `var(${newName})`;
>>             }
>>             let newFallback;
>>             if (isVarDependant(fallback)) {
>>                 newFallback = replaceCSSVariablesNames(
>>                     fallback,
>>                     nameReplacer,
>>                     fallbackReplacer
>>                 );
>>             } else if (fallbackReplacer) {
>>                 newFallback = fallbackReplacer(fallback);
>>             } else {
>>                 newFallback = fallback;
>>             }
>>             return `var(${newName}, ${newFallback})`;
>>         };
>>         return replaceVariablesMatches(value, matchReplacer);
>>     }
>>     function iterateVarDependencies(value, iterator) {
>>         replaceCSSVariablesNames(value, (varName) => {
>>             iterator(varName);
>>             return varName;
>>         });
>>     }
>>     function wrapBgColorVariableName(name) {
>>         return `--darkreader-bg${name}`;
>>     }
>>     function wrapTextColorVariableName(name) {
>>         return `--darkreader-text${name}`;
>>     }
>>     function wrapBorderColorVariableName(name) {
>>         return `--darkreader-border${name}`;
>>     }
>>     function wrapBgImgVariableName(name) {
>>         return `--darkreader-bgimg${name}`;
>>     }
>>     function isVariable(property) {
>>         return property.startsWith("--");
>>     }
>>     function isVarDependant(value) {
>>         return value.includes("var(");
>>     }
>>     function isConstructedColorVar(value) {
>>         return value.match(/^\s*(rgb|hsl)a?\(/);
>>     }
>>     function isTextColorProperty(property) {
>>         return (
>>             property === "color" ||
>>             property === "caret-color" ||
>>             property === "-webkit-text-fill-color"
>>         );
>>     }
>>     const rawValueRegex = /^\d{1,3}, ?\d{1,3}, ?\d{1,3}$/;
>>     function parseRawValue(color) {
>>         if (rawValueRegex.test(color)) {
>>             const splitted = color.split(",");
>>             let resultInRGB = "rgb(";
>>             splitted.forEach((number) => {
>>                 resultInRGB += `${number.trim()}, `;
>>             });
>>             resultInRGB = resultInRGB.substring(0, resultInRGB.length - 2);
>>             resultInRGB += ")";
>>             return {isRaw: true, color: resultInRGB};
>>         }
>>         return {isRaw: false, color: color};
>>     }
>>     function handleRawValue(color, theme, modifyFunction) {
>>         const {isRaw, color: newColor} = parseRawValue(color);
>>         const rgb = parseColorWithCache(newColor);
>>         if (rgb) {
>>             const outputColor = modifyFunction(rgb, theme);
>>             if (isRaw) {
>>                 const outputInRGB = parseColorWithCache(outputColor);
>>                 return outputInRGB
>>                     ? `${outputInRGB.r}, ${outputInRGB.g}, ${outputInRGB.b}`
>>                     : outputColor;
>>             }
>>             return outputColor;
>>         }
>>         return newColor;
>>     }
>>     function tryModifyBgColor(color, theme) {
>>         return handleRawValue(color, theme, modifyBackgroundColor);
>>     }
>>     function tryModifyTextColor(color, theme) {
>>         return handleRawValue(color, theme, modifyForegroundColor);
>>     }
>>     function tryModifyBorderColor(color, theme) {
>>         return handleRawValue(color, theme, modifyBorderColor);
>>     }
>>     function insertVarValues(source, varValues, stack = new Set()) {
>>         let containsUnresolvedVar = false;
>>         const matchReplacer = (match) => {
>>             const {name, fallback} = getVariableNameAndFallback(match);
>>             if (stack.has(name)) {
>>                 containsUnresolvedVar = true;
>>                 return null;
>>             }
>>             stack.add(name);
>>             const varValue = varValues.get(name) || fallback;
>>             let inserted = null;
>>             if (varValue) {
>>                 if (isVarDependant(varValue)) {
>>                     inserted = insertVarValues(varValue, varValues, stack);
>>                 } else {
>>                     inserted = varValue;
>>                 }
>>             }
>>             if (!inserted) {
>>                 containsUnresolvedVar = true;
>>                 return null;
>>             }
>>             return inserted;
>>         };
>>         const replaced = replaceVariablesMatches(source, matchReplacer);
>>         if (containsUnresolvedVar) {
>>             return null;
>>         }
>>         return replaced;
>>     }
>>
>>     const overrides$1 = {
>>         "background-color": {
>>             customProp: "--darkreader-inline-bgcolor",
>>             cssProp: "background-color",
>>             dataAttr: "data-darkreader-inline-bgcolor"
>>         },
>>         "background-image": {
>>             customProp: "--darkreader-inline-bgimage",
>>             cssProp: "background-image",
>>             dataAttr: "data-darkreader-inline-bgimage"
>>         },
>>         "border-color": {
>>             customProp: "--darkreader-inline-border",
>>             cssProp: "border-color",
>>             dataAttr: "data-darkreader-inline-border"
>>         },
>>         "border-bottom-color": {
>>             customProp: "--darkreader-inline-border-bottom",
>>             cssProp: "border-bottom-color",
>>             dataAttr: "data-darkreader-inline-border-bottom"
>>         },
>>         "border-left-color": {
>>             customProp: "--darkreader-inline-border-left",
>>             cssProp: "border-left-color",
>>             dataAttr: "data-darkreader-inline-border-left"
>>         },
>>         "border-right-color": {
>>             customProp: "--darkreader-inline-border-right",
>>             cssProp: "border-right-color",
>>             dataAttr: "data-darkreader-inline-border-right"
>>         },
>>         "border-top-color": {
>>             customProp: "--darkreader-inline-border-top",
>>             cssProp: "border-top-color",
>>             dataAttr: "data-darkreader-inline-border-top"
>>         },
>>         "box-shadow": {
>>             customProp: "--darkreader-inline-boxshadow",
>>             cssProp: "box-shadow",
>>             dataAttr: "data-darkreader-inline-boxshadow"
>>         },
>>         "color": {
>>             customProp: "--darkreader-inline-color",
>>             cssProp: "color",
>>             dataAttr: "data-darkreader-inline-color"
>>         },
>>         "fill": {
>>             customProp: "--darkreader-inline-fill",
>>             cssProp: "fill",
>>             dataAttr: "data-darkreader-inline-fill"
>>         },
>>         "stroke": {
>>             customProp: "--darkreader-inline-stroke",
>>             cssProp: "stroke",
>>             dataAttr: "data-darkreader-inline-stroke"
>>         },
>>         "outline-color": {
>>             customProp: "--darkreader-inline-outline",
>>             cssProp: "outline-color",
>>             dataAttr: "data-darkreader-inline-outline"
>>         },
>>         "stop-color": {
>>             customProp: "--darkreader-inline-stopcolor",
>>             cssProp: "stop-color",
>>             dataAttr: "data-darkreader-inline-stopcolor"
>>         }
>>     };
>>     const shorthandOverrides = {
>>         background: {
>>             customProp: "--darkreader-inline-bg",
>>             cssProp: "background",
>>             dataAttr: "data-darkreader-inline-bg"
>>         }
>>     };
>>     const overridesList = Object.values(overrides$1);
>>     const normalizedPropList = {};
>>     overridesList.forEach(
>>         ({cssProp, customProp}) => (normalizedPropList[customProp] = cssProp)
>>     );
>>     const INLINE_STYLE_ATTRS = [
>>         "style",
>>         "fill",
>>         "stop-color",
>>         "stroke",
>>         "bgcolor",
>>         "color"
>>     ];
>>     const INLINE_STYLE_SELECTOR = INLINE_STYLE_ATTRS.map(
>>         (attr) => `[${attr}]`
>>     ).join(", ");
>>     function getInlineOverrideStyle() {
>>         const allOverrides = overridesList.concat(
>>             Object.values(shorthandOverrides)
>>         );
>>         return allOverrides
>>             .map(({dataAttr, customProp, cssProp}) => {
>>                 return [
>>                     `[${dataAttr}] {`,
>>                     `  ${cssProp}: var(${customProp}) !important;`,
>>                     "}"
>>                 ].join("\n");
>>             })
>>             .join("\n");
>>     }
>>     function getInlineStyleElements(root) {
>>         const results = [];
>>         if (root instanceof Element && root.matches(INLINE_STYLE_SELECTOR)) {
>>             results.push(root);
>>         }
>>         if (
>>             root instanceof Element ||
>>             (isShadowDomSupported && root instanceof ShadowRoot) ||
>>             root instanceof Document
>>         ) {
>>             push(results, root.querySelectorAll(INLINE_STYLE_SELECTOR));
>>         }
>>         return results;
>>     }
>>     const treeObservers = new Map();
>>     const attrObservers = new Map();
>>     function watchForInlineStyles(elementStyleDidChange, shadowRootDiscovered) {
>>         deepWatchForInlineStyles(
>>             document,
>>             elementStyleDidChange,
>>             shadowRootDiscovered
>>         );
>>         iterateShadowHosts(document.documentElement, (host) => {
>>             deepWatchForInlineStyles(
>>                 host.shadowRoot,
>>                 elementStyleDidChange,
>>                 shadowRootDiscovered
>>             );
>>         });
>>     }
>>     function deepWatchForInlineStyles(
>>         root,
>>         elementStyleDidChange,
>>         shadowRootDiscovered
>>     ) {
>>         if (treeObservers.has(root)) {
>>             treeObservers.get(root).disconnect();
>>             attrObservers.get(root).disconnect();
>>         }
>>         const discoveredNodes = new WeakSet();
>>         function discoverNodes(node) {
>>             getInlineStyleElements(node).forEach((el) => {
>>                 if (discoveredNodes.has(el)) {
>>                     return;
>>                 }
>>                 discoveredNodes.add(el);
>>                 elementStyleDidChange(el);
>>             });
>>             iterateShadowHosts(node, (n) => {
>>                 if (discoveredNodes.has(node)) {
>>                     return;
>>                 }
>>                 discoveredNodes.add(node);
>>                 shadowRootDiscovered(n.shadowRoot);
>>                 deepWatchForInlineStyles(
>>                     n.shadowRoot,
>>                     elementStyleDidChange,
>>                     shadowRootDiscovered
>>                 );
>>             });
>>             variablesStore.matchVariablesAndDependents();
>>         }
>>         const treeObserver = createOptimizedTreeObserver(root, {
>>             onMinorMutations: ({additions}) => {
>>                 additions.forEach((added) => discoverNodes(added));
>>             },
>>             onHugeMutations: () => {
>>                 discoverNodes(root);
>>             }
>>         });
>>         treeObservers.set(root, treeObserver);
>>         let attemptCount = 0;
>>         let start = null;
>>         const ATTEMPTS_INTERVAL = getDuration({seconds: 10});
>>         const RETRY_TIMEOUT = getDuration({seconds: 2});
>>         const MAX_ATTEMPTS_COUNT = 50;
>>         let cache = [];
>>         let timeoutId = null;
>>         const handleAttributeMutations = throttle((mutations) => {
>>             const handledTargets = new Set();
>>             mutations.forEach((m) => {
>>                 const target = m.target;
>>                 if (handledTargets.has(target)) {
>>                     return;
>>                 }
>>                 if (INLINE_STYLE_ATTRS.includes(m.attributeName)) {
>>                     handledTargets.add(target);
>>                     elementStyleDidChange(target);
>>                 }
>>             });
>>             variablesStore.matchVariablesAndDependents();
>>         });
>>         const attrObserver = new MutationObserver((mutations) => {
>>             if (timeoutId) {
>>                 cache.push(...mutations);
>>                 return;
>>             }
>>             attemptCount++;
>>             const now = Date.now();
>>             if (start == null) {
>>                 start = now;
>>             } else if (attemptCount >= MAX_ATTEMPTS_COUNT) {
>>                 if (now - start < ATTEMPTS_INTERVAL) {
>>                     timeoutId = setTimeout(() => {
>>                         start = null;
>>                         attemptCount = 0;
>>                         timeoutId = null;
>>                         const attributeCache = cache;
>>                         cache = [];
>>                         handleAttributeMutations(attributeCache);
>>                     }, RETRY_TIMEOUT);
>>                     cache.push(...mutations);
>>                     return;
>>                 }
>>                 start = now;
>>                 attemptCount = 1;
>>             }
>>             handleAttributeMutations(mutations);
>>         });
>>         attrObserver.observe(root, {
>>             attributes: true,
>>             attributeFilter: INLINE_STYLE_ATTRS.concat(
>>                 overridesList.map(({dataAttr}) => dataAttr)
>>             ),
>>             subtree: true
>>         });
>>         attrObservers.set(root, attrObserver);
>>     }
>>     function stopWatchingForInlineStyles() {
>>         treeObservers.forEach((o) => o.disconnect());
>>         attrObservers.forEach((o) => o.disconnect());
>>         treeObservers.clear();
>>         attrObservers.clear();
>>     }
>>     const inlineStyleCache = new WeakMap();
>>     const filterProps = [
>>         "brightness",
>>         "contrast",
>>         "grayscale",
>>         "sepia",
>>         "mode"
>>     ];
>>     function getInlineStyleCacheKey(el, theme) {
>>         return INLINE_STYLE_ATTRS.map(
>>             (attr) => `${attr}="${el.getAttribute(attr)}"`
>>         )
>>             .concat(filterProps.map((prop) => `${prop}="${theme[prop]}"`))
>>             .join(" ");
>>     }
>>     function shouldIgnoreInlineStyle(element, selectors) {
>>         for (let i = 0, len = selectors.length; i < len; i++) {
>>             const ingnoredSelector = selectors[i];
>>             if (element.matches(ingnoredSelector)) {
>>                 return true;
>>             }
>>         }
>>         return false;
>>     }
>>     function overrideInlineStyle(
>>         element,
>>         theme,
>>         ignoreInlineSelectors,
>>         ignoreImageSelectors
>>     ) {
>>         var _a;
>>         const cacheKey = getInlineStyleCacheKey(element, theme);
>>         if (cacheKey === inlineStyleCache.get(element)) {
>>             return;
>>         }
>>         const unsetProps = new Set(Object.keys(overrides$1));
>>         function setCustomProp(targetCSSProp, modifierCSSProp, cssVal){
>>             const mod = getModifiableCSSDeclaration(
>>                 modifierCSSProp,
>>                 cssVal,
>>                 {style: element.style},
>>                 variablesStore,
>>                 ignoreImageSelectors,
>>                 null
>>             );
>>             if (!mod) {
>>                 return;
>>             }
>>             function setStaticValue(value) {
>>                 var _a;
>>                 const {customProp, dataAttr} =
>>                     (_a = overrides$1[targetCSSProp]) !== null && _a !== void 0
>>                         ? _a
>>                         : shorthandOverrides[targetCSSProp];
>>                 element.style.setProperty(customProp, value);
>>                 if (!element.hasAttribute(dataAttr)) {
>>                     element.setAttribute(dataAttr, "");
>>                 }
>>                 unsetProps.delete(targetCSSProp);
>>             }
>>             function setVarDeclaration(mod) {
>>                 let prevDeclarations = [];
>>                 function setProps(declarations) {
>>                     prevDeclarations.forEach(({property}) => {
>>                         element.style.removeProperty(property);
>>                     });
>>                     declarations.forEach(({property, value}) => {
>>                         if (!(value instanceof Promise)) {
>>                             element.style.setProperty(property, value);
>>                         }
>>                     });
>>                     prevDeclarations = declarations;
>>                 }
>>                 setProps(mod.declarations);
>>                 mod.onTypeChange.addListener(setProps);
>>             }
>>             function setAsyncValue(promise) {
>>                 promise.then((value) => {
>>                     if (
>>                         value &&
>>                         targetCSSProp === "background" &&
>>                         value.startsWith("var(--darkreader-bg--")
>>                     ) {
>>                         setStaticValue(value);
>>                     }
>>                 });
>>             }
>>             const value =
>>                 typeof mod.value === "function" ? mod.value(theme) : mod.value;
>>             if (typeof value === "string") {
>>                 setStaticValue(value);
>>             } else if (value instanceof Promise) {
>>                 setAsyncValue(value);
>>             } else if (typeof value === "object") {
>>                 setVarDeclaration(value);
>>             }
>>         }
>>         if (ignoreInlineSelectors.length > 0) {
>>             if (shouldIgnoreInlineStyle(element, ignoreInlineSelectors)) {
>>                 unsetProps.forEach((cssProp) => {
>>                     element.removeAttribute(overrides$1[cssProp].dataAttr);
>>                 });
>>                 return;
>>             }
>>         }
>>         if (element.hasAttribute("bgcolor")) {
>>             let value = element.getAttribute("bgcolor");
>>             if (
>>                 value.match(/^[0-9a-f]{3}$/i) ||
>>                 value.match(/^[0-9a-f]{6}$/i)
>>             ) {
>>                 value = `#${value}`;
>>             }
>>             setCustomProp("background-color", "background-color", value);
>>         }
>>         if (element.hasAttribute("color") && element.rel !== "mask-icon") {
>>             let value = element.getAttribute("color");
>>             if (
>>                 value.match(/^[0-9a-f]{3}$/i) ||
>>                 value.match(/^[0-9a-f]{6}$/i)
>>             ) {
>>                 value = `#${value}`;
>>             }
>>             setCustomProp("color", "color", value);
>>         }
>>         if (element instanceof SVGElement) {
>>             if (element.hasAttribute("fill")) {
>>                 const SMALL_SVG_LIMIT = 32;
>>                 const value = element.getAttribute("fill");
>>                 if (value !== "none") {
>>                     if (!(element instanceof SVGTextElement)) {
>>                         const handleSVGElement = () => {
>>                             const {width, height} =
>>                                 element.getBoundingClientRect();
>>                             const isBg =
>>                                 width > SMALL_SVG_LIMIT ||
>>                                 height > SMALL_SVG_LIMIT;
>>                             setCustomProp(
>>                                 "fill",
>>                                 isBg ? "background-color" : "color",
>>                                 value
>>                             );
>>                         };
>>                         if (isReadyStateComplete()) {
>>                             handleSVGElement();
>>                         } else {
>>                             addReadyStateCompleteListener(handleSVGElement);
>>                         }
>>                     } else {
>>                         setCustomProp("fill", "color", value);
>>                     }
>>                 }
>>             }
>>             if (element.hasAttribute("stop-color")) {
>>                 setCustomProp(
>>                     "stop-color",
>>                     "background-color",
>>                     element.getAttribute("stop-color")
>>                 );
>>             }
>>         }
>>         if (element.hasAttribute("stroke")) {
>>             const value = element.getAttribute("stroke");
>>             setCustomProp(
>>                 "stroke",
>>                 element instanceof SVGLineElement ||
>>                     element instanceof SVGTextElement
>>                     ? "border-color"
>>                     : "color",
>>                 value
>>             );
>>         }
>>         element.style &&
>>             iterateCSSDeclarations(element.style, (property, value) =>{
>>                 if (property === "background-image" && value.includes("url")) {
>>                     return;
>>                 }
>>                 if (
>>                     overrides$1.hasOwnProperty(property) ||
>>                     (property.startsWith("--") && !normalizedPropList[property])
>>                 ) {
>>                     setCustomProp(property, property, value);
>>                 } else if (
>>                     property === "background" &&
>>                     value.includes("var(")
>>                 ) {
>>                     setCustomProp("background", "background", value);
>>                 } else {
>>                     const overriddenProp = normalizedPropList[property];
>>                     if (
>>                         overriddenProp &&
>>                         !element.style.getPropertyValue(overriddenProp) &&
>>                         !element.hasAttribute(overriddenProp)
>>                     ) {
>>                         if (
>>                             overriddenProp === "background-color" &&
>>                             element.hasAttribute("bgcolor")
>>                         ) {
>>                             return;
>>                         }
>>                         element.style.setProperty(property, "");
>>                     }
>>                 }
>>             });
>>         if (
>>             element.style &&
>>             element instanceof SVGTextElement &&
>>             element.style.fill
>>         ) {
>>             setCustomProp(
>>                 "fill",
>>                 "color",
>>                 element.style.getPropertyValue("fill")
>>             );
>>         }
>>         if (
>>             (_a = element.getAttribute("style")) === null || _a === void 0
>>                 ? void 0
>>                 : _a.includes("--")
>>         ) {
>>             variablesStore.addInlineStyleForMatching(element.style);
>>         }
>>         forEach(unsetProps, (cssProp) => {
>>             element.removeAttribute(overrides$1[cssProp].dataAttr);
>>         });
>>         inlineStyleCache.set(element, getInlineStyleCacheKey(element, theme));
>>     }
>>
>>     const metaThemeColorName = "theme-color";
>>     const metaThemeColorSelector = `meta[name="${metaThemeColorName}"]`;
>>     let srcMetaThemeColor = null;
>>     let observer = null;
>>     function changeMetaThemeColor(meta, theme) {
>>         srcMetaThemeColor = srcMetaThemeColor || meta.content;
>>         const color = parseColorWithCache(srcMetaThemeColor);
>>         if (!color) {
>>             return;
>>         }
>>         meta.content = modifyBackgroundColor(color, theme);
>>     }
>>     function changeMetaThemeColorWhenAvailable(theme) {
>>         const meta = document.querySelector(metaThemeColorSelector);
>>         if (meta) {
>>             changeMetaThemeColor(meta, theme);
>>         } else {
>>             if (observer) {
>>                 observer.disconnect();
>>             }
>>             observer = new MutationObserver((mutations) => {
>>                 loop: for (let i = 0; i < mutations.length; i++) {
>>                     const {addedNodes} = mutations[i];
>>                     for (let j = 0; j < addedNodes.length; j++) {
>>                         const node = addedNodes[j];
>>                         if (
>>                             node instanceof HTMLMetaElement &&
>>                             node.name === metaThemeColorName
>>                         ) {
>>                             observer.disconnect();
>>                             observer = null;
>>                             changeMetaThemeColor(node, theme);
>>                             break loop;
>>                         }
>>                     }
>>                 }
>>             });
>>             observer.observe(document.head, {childList: true});
>>         }
>>     }
>>     function restoreMetaThemeColor() {
>>         if (observer) {
>>             observer.disconnect();
>>             observer = null;
>>         }
>>         const meta = document.querySelector(metaThemeColorSelector);
>>         if (meta && srcMetaThemeColor) {
>>             meta.content = srcMetaThemeColor;
>>         }
>>     }
>>
>>     const themeCacheKeys = [
>>         "mode",
>>         "brightness",
>>         "contrast",
>>         "grayscale",
>>         "sepia",
>>         "darkSchemeBackgroundColor",
>>         "darkSchemeTextColor",
>>         "lightSchemeBackgroundColor",
>>         "lightSchemeTextColor"
>>     ];
>>     function getThemeKey(theme) {
>>         let resultKey = "";
>>         themeCacheKeys.forEach((key) => {
>>             resultKey += `${key}:${theme[key]};`;
>>         });
>>         return resultKey;
>>     }
>>     const asyncQueue = createAsyncTasksQueue();
>>     function createStyleSheetModifier() {
>>         let renderId = 0;
>>         const rulesTextCache = new Set();
>>         const rulesModCache = new Map();
>>         const varTypeChangeCleaners = new Set();
>>         let prevFilterKey = null;
>>         let hasNonLoadedLink = false;
>>         let wasRebuilt = false;
>>         function shouldRebuildStyle() {
>>             return hasNonLoadedLink && !wasRebuilt;
>>         }
>>         function modifySheet(options) {
>>             const rules = options.sourceCSSRules;
>>             const {
>>                 theme,
>>                 ignoreImageAnalysis,
>>                 force,
>>                 prepareSheet,
>>                 isAsyncCancelled
>>             } = options;
>>             let rulesChanged = rulesModCache.size === 0;
>>             const notFoundCacheKeys = new Set(rulesModCache.keys());
>>             const themeKey = getThemeKey(theme);
>>             const themeChanged = themeKey !== prevFilterKey;
>>             if (hasNonLoadedLink) {
>>                 wasRebuilt = true;
>>             }
>>             const modRules = [];
>>             iterateCSSRules(
>>                 rules,
>>                 (rule) => {
>>                     let cssText = rule.cssText;
>>                     let textDiffersFromPrev = false;
>>                     notFoundCacheKeys.delete(cssText);
>>                     if (rule.parentRule instanceof CSSMediaRule) {
>>                         cssText += `;${rule.parentRule.media.mediaText}`;
>>                     }
>>                     if (!rulesTextCache.has(cssText)) {
>>                         rulesTextCache.add(cssText);
>>                         textDiffersFromPrev = true;
>>                     }
>>                     if (textDiffersFromPrev) {
>>                         rulesChanged = true;
>>                     } else {
>>                         modRules.push(rulesModCache.get(cssText));
>>                         return;
>>                     }
>>                     if (rule.style.all === "revert") {
>>                         return;
>>                     }
>>                     const modDecs = [];
>>                     rule.style &&
>>                         iterateCSSDeclarations(
>>                             rule.style,
>>                             (property, value) => {
>>                                 const mod = getModifiableCSSDeclaration(
>>                                     property,
>>                                     value,
>>                                     rule,
>>                                     variablesStore,
>>                                     ignoreImageAnalysis,
>>                                     isAsyncCancelled
>>                                 );
>>                                 if (mod) {
>>                                     modDecs.push(mod);
>>                                 }
>>                             }
>>                         );
>>                     let modRule = null;
>>                     if (modDecs.length > 0) {
>>                         const parentRule = rule.parentRule;
>>                         modRule = {
>>                             selector: rule.selectorText,
>>                             declarations: modDecs,
>>                             parentRule
>>                         };
>>                         modRules.push(modRule);
>>                     }
>>                     rulesModCache.set(cssText, modRule);
>>                 },
>>                 () => {
>>                     hasNonLoadedLink = true;
>>                 }
>>             );
>>             notFoundCacheKeys.forEach((key) => {
>>                 rulesTextCache.delete(key);
>>                 rulesModCache.delete(key);
>>             });
>>             prevFilterKey = themeKey;
>>             if (!force && !rulesChanged && !themeChanged) {
>>                 return;
>>             }
>>             renderId++;
>>             function setRule(target, index, rule) {
>>                 const {selector, declarations} = rule;
>>                 let selectorText = selector;
>>                 if (
>>                     selector.startsWith(":is(") &&
>>                     (selector.includes(":is()") ||
>>                         selector.includes(":where()") ||
>>                         (selector.includes(":where(") &&
>>                             selector.includes(":-moz")))
>>                 ) {
>>                     selectorText = ".darkreader-unsupported-selector";
>>                 }
>>                 let ruleText = `${selectorText} {`;
>>                 for (const dec of declarations) {
>>                     const {property, value, important} = dec;
>>                     if (value) {
>>                         ruleText += ` ${property}: ${value}${
>>                             important ? " !important" : ""
>>                         };`;
>>                     }
>>                 }
>>                 ruleText += " }";
>>                 target.insertRule(ruleText, index);
>>             }
>>             const asyncDeclarations = new Map();
>>             const varDeclarations = new Map();
>>             let asyncDeclarationCounter = 0;
>>             let varDeclarationCounter = 0;
>>             const rootReadyGroup = {rule: null, rules: [], isGroup: true};
>>             const groupRefs = new WeakMap();
>>             function getGroup(rule) {
>>                 if (rule == null) {
>>                     return rootReadyGroup;
>>                 }
>>                 if (groupRefs.has(rule)) {
>>                     return groupRefs.get(rule);
>>                 }
>>                 const group = {rule, rules: [], isGroup: true};
>>                 groupRefs.set(rule, group);
>>                 const parentGroup = getGroup(rule.parentRule);
>>                 parentGroup.rules.push(group);
>>                 return group;
>>             }
>>             varTypeChangeCleaners.forEach((clear) => clear());
>>             varTypeChangeCleaners.clear();
>>             modRules
>>                 .filter((r) => r)
>>                 .forEach(({selector, declarations, parentRule}) => {
>>                     const group = getGroup(parentRule);
>>                     const readyStyleRule = {
>>                         selector,
>>                         declarations: [],
>>                         isGroup: false
>>                     };
>>                     const readyDeclarations = readyStyleRule.declarations;
>>                     group.rules.push(readyStyleRule);
>>                     function handleAsyncDeclaration(
>>                         property,
>>                         modified,
>>                         important,
>>                         sourceValue
>>                     ) {
>>                         const asyncKey = ++asyncDeclarationCounter;
>>                         const asyncDeclaration = {
>>                             property,
>>                             value: null,
>>                             important,
>>                             asyncKey,
>>                             sourceValue
>>                         };
>>                         readyDeclarations.push(asyncDeclaration);
>>                         const currentRenderId = renderId;
>>                         modified.then((asyncValue) => {
>>                             if (
>>                                 !asyncValue ||
>>                                 isAsyncCancelled() ||
>>                                 currentRenderId !== renderId
>>                             ) {
>>                                 return;
>>                             }
>>                             asyncDeclaration.value = asyncValue;
>>                             asyncQueue.add(() => {
>>                                 if (
>>                                     isAsyncCancelled() ||
>>                                     currentRenderId !== renderId
>>                                 ) {
>>                                     return;
>>                                 }
>>                                 rebuildAsyncRule(asyncKey);
>>                             });
>>                         });
>>                     }
>>                     function handleVarDeclarations(
>>                         property,
>>                         modified,
>>                         important,
>>                         sourceValue
>>                     ) {
>>                         const {declarations: varDecs, onTypeChange} = modified;
>>                         const varKey = ++varDeclarationCounter;
>>                         const currentRenderId = renderId;
>>                         const initialIndex = readyDeclarations.length;
>>                         let oldDecs = [];
>>                         if (varDecs.length === 0) {
>>                             const tempDec = {
>>                                 property,
>>                                 value: sourceValue,
>>                                 important,
>>                                 sourceValue,
>>                                 varKey
>>                             };
>>                             readyDeclarations.push(tempDec);
>>                             oldDecs = [tempDec];
>>                         }
>>                         varDecs.forEach((mod) => {
>>                             if (mod.value instanceof Promise) {
>>                                 handleAsyncDeclaration(
>>                                     mod.property,
>>                                     mod.value,
>>                                     important,
>>                                     sourceValue
>>                                 );
>>                             } else {
>>                                 const readyDec = {
>>                                     property: mod.property,
>>                                     value: mod.value,
>>                                     important,
>>                                     sourceValue,
>>                                     varKey
>>                                 };
>>                                 readyDeclarations.push(readyDec);
>>                                 oldDecs.push(readyDec);
>>                             }
>>                         });
>>                         onTypeChange.addListener((newDecs) => {
>>                             if (
>>                                 isAsyncCancelled() ||
>>                                 currentRenderId !== renderId
>>                             ) {
>>                                 return;
>>                             }
>>                             const readyVarDecs = newDecs.map((mod) => {
>>                                 return {
>>                                     property: mod.property,
>>                                     value: mod.value,
>>                                     important,
>>                                     sourceValue,
>>                                     varKey
>>                                 };
>>                             });
>>                             const index = readyDeclarations.indexOf(
>>                                 oldDecs[0],
>>                                 initialIndex
>>                             );
>>                             readyDeclarations.splice(
>>                                 index,
>>                                 oldDecs.length,
>>                                 ...readyVarDecs
>>                             );
>>                             oldDecs = readyVarDecs;
>>                             rebuildVarRule(varKey);
>>                         });
>>                         varTypeChangeCleaners.add(() =>
>>                             onTypeChange.removeListeners()
>>                         );
>>                     }
>>                     declarations.forEach(
>>                         ({property, value, important, sourceValue}) =>{
>>                             if (typeof value === "function") {
>>                                 const modified = value(theme);
>>                                 if (modified instanceof Promise) {
>>                                     handleAsyncDeclaration(
>>                                         property,
>>                                         modified,
>>                                         important,
>>                                         sourceValue
>>                                     );
>>                                 } else if (property.startsWith("--")) {
>>                                     handleVarDeclarations(
>>                                         property,
>>                                         modified,
>>                                         important,
>>                                         sourceValue
>>                                     );
>>                                 } else {
>>                                     readyDeclarations.push({
>>                                         property,
>>                                         value: modified,
>>                                         important,
>>                                         sourceValue
>>                                     });
>>                                 }
>>                             } else {
>>                                 readyDeclarations.push({
>>                                     property,
>>                                     value,
>>                                     important,
>>                                     sourceValue
>>                                 });
>>                             }
>>                         }
>>                     );
>>                 });
>>             const sheet = prepareSheet();
>>             function buildStyleSheet() {
>>                 function createTarget(group, parent) {
>>                     const {rule} = group;
>>                     if (rule instanceof CSSMediaRule) {
>>                         const {media} = rule;
>>                         const index = parent.cssRules.length;
>>                         parent.insertRule(
>>                             `@media ${media.mediaText} {}`,
>>                             index
>>                         );
>>                         return parent.cssRules[index];
>>                     }
>>                     return parent;
>>                 }
>>                 function iterateReadyRules(group, target, styleIterator) {
>>                     group.rules.forEach((r) => {
>>                         if (r.isGroup) {
>>                             const t = createTarget(r, target);
>>                             iterateReadyRules(r, t, styleIterator);
>>                         } else {
>>                             styleIterator(r, target);
>>                         }
>>                     });
>>                 }
>>                 iterateReadyRules(rootReadyGroup, sheet, (rule, target) => {
>>                     const index = target.cssRules.length;
>>                     rule.declarations.forEach(({asyncKey, varKey}) => {
>>                         if (asyncKey != null) {
>>                             asyncDeclarations.set(asyncKey, {
>>                                 rule,
>>                                 target,
>>                                 index
>>                             });
>>                         }
>>                         if (varKey != null) {
>>                             varDeclarations.set(varKey, {rule, target,index});
>>                         }
>>                     });
>>                     setRule(target, index, rule);
>>                 });
>>             }
>>             function rebuildAsyncRule(key) {
>>                 const {rule, target, index} = asyncDeclarations.get(key);
>>                 target.deleteRule(index);
>>                 setRule(target, index, rule);
>>                 asyncDeclarations.delete(key);
>>             }
>>             function rebuildVarRule(key) {
>>                 const {rule, target, index} = varDeclarations.get(key);
>>                 target.deleteRule(index);
>>                 setRule(target, index, rule);
>>             }
>>             buildStyleSheet();
>>         }
>>         return {modifySheet, shouldRebuildStyle};
>>     }
>>
>>     const STYLE_SELECTOR = 'style, link[rel*="stylesheet" i]:not([disabled])';
>>     function isFontsGoogleApiStyle(element) {
>>         if (!element.href) {
>>             return false;
>>         }
>>         try {
>>             const elementURL = new URL(element.href);
>>             return elementURL.hostname === "fonts.googleapis.com";
>>         } catch (err) {
>>             logInfo(`Couldn't construct ${element.href} as URL`);
>>             return false;
>>         }
At line:1 char:24
+     function escapeXML(str) {
+                        ~
Missing ')' in function parameter list.
At line:1 char:27
+     function escapeXML(str) {
+                           ~
Unexpected token ')' in expression or statement.
At line:2 char:32
+         return str.replace(/[<>&'"]/g, (c) => {
+                                ~
The ampersand (&) character is not allowed. The & operator is reserved
for future use; wrap an ampersand in double quotation marks ("&") to
pass it as part of a string.
At line:2495 char:34
+     const STYLE_SELECTOR = 'style, link[rel*="stylesheet" i]:not([dis
...
+                                  ~
Missing argument in parameter list.
At line:2504 char:65
+             logInfo(`Couldn't construct ${element.href} as URL`);
+                                                                 ~
Missing closing ')' in expression.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>     }
At line:1 char:5
+     }
+     ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>     const hostsBreakingOnSVGStyleOverride = ["www.onet.pl"];
const : The term 'const' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:5
+     const hostsBreakingOnSVGStyleOverride = ["www.onet.pl"];
+     ~~~~~
    + CategoryInfo          : ObjectNotFound: (const:String) [], Command
   NotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>     function shouldManageStyle(element){
>>         return (
>>             (element instanceof HTMLStyleElement ||
>>                 (element instanceof SVGStyleElement &&
>>                     !hostsBreakingOnSVGStyleOverride.includes(
>>                         location.hostname
>>                     )) ||
>>                 (element instanceof HTMLLinkElement &&
>>                     Boolean(element.rel) &&
>>                     element.rel.toLowerCase().includes("stylesheet") &&
>>                     Boolean(element.href) &&
>>                     !element.disabled &&
>>                     true &&
>>                     !isFontsGoogleApiStyle(element))) &&
>>             !element.classList.contains("darkreader") &&
>>             element.media.toLowerCase() !== "print" &&
>>             !element.classList.contains("stylus")
>>         );
At line:1 char:32
+     function shouldManageStyle(element) {
+                                ~
Missing ')' in function parameter list.
At line:1 char:39
+     function shouldManageStyle(element) {
+                                       ~
Unexpected token ')' in expression or statement.
At line:3 char:50
+             (element instanceof HTMLStyleElement ||
+                                                  ~~
The token '||' is not a valid statement separator in this version.
At line:4 char:53
+                 (element instanceof SVGStyleElement &&
+                                                     ~~
The token '&&' is not a valid statement separator in this version.
At line:8 char:53
+                 (element instanceof HTMLLinkElement &&
+                                                     ~~
The token '&&' is not a valid statement separator in this version.
At line:9 char:42
+                     Boolean(element.rel) &&
+                                          ~~
The token '&&' is not a valid statement separator in this version.
At line:10 char:45
+                     element.rel.toLowerCase().includes("stylesheet")
...
+                                             ~
An expression was expected after '('.
At line:10 char:70
+ ...                   element.rel.toLowerCase().includes("stylesheet")
&&
+
~~
The token '&&' is not a valid statement separator in this version.
At line:11 char:43
+                     Boolean(element.href) &&
+                                           ~~
The token '&&' is not a valid statement separator in this version.
At line:12 char:39
+                     !element.disabled &&
+                                       ~~
The token '&&' is not a valid statement separator in this version.
Not all parse errors were reported.  Correct the reported errors and try
again.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>     }
At line:1 char:5
+     }
+     ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>     function getManageableStyles(node, results = [], deep = true) {
>>         if (shouldManageStyle(node)) {
>>             results.push(node);
>>         } else if (
>>             node instanceof Element ||
>>             (isShadowDomSupported && node instanceof ShadowRoot) ||
>>             node === document
>>         ) {
>>             forEach(node.querySelectorAll(STYLE_SELECTOR), (style) =>
>>                 getManageableStyles(style, results, false)
>>             );
At line:1 char:34
+     function getManageableStyles(node, results = [], deep = true) {
+                                  ~
Missing ')' in function parameter list.
At line:1 char:38
+     function getManageableStyles(node, results = [], deep = true) {
+                                      ~
Missing argument in parameter list.
At line:1 char:65
+     function getManageableStyles(node, results = [], deep = true) {
+                                                                 ~
Unexpected token ')' in expression or statement.
At line:4 char:15
+         } else if (
+               ~
Missing statement block after 'else' keyword.
At line:5 char:37
+             node instanceof Element ||
+                                     ~~
The token '||' is not a valid statement separator in this version.
At line:6 char:35
+             (isShadowDomSupported && node instanceof ShadowRoot) ||
+                                   ~~
The token '&&' is not a valid statement separator in this version.
At line:6 char:68
+             (isShadowDomSupported && node instanceof ShadowRoot) ||
+                                                                    ~
You must provide a value expression following the '||' operator.
At line:6 char:13
+             (isShadowDomSupported && node instanceof ShadowRoot) ||
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Expressions are only allowed as the first element of a pipeline.
At line:7 char:13
+             node === document
+             ~~~~
Unexpected token 'node' in expression or statement.
At line:7 char:13
+             node === document
+             ~~~~
Missing closing ')' after expression in 'if' statement.
Not all parse errors were reported.  Correct the reported errors and try
again.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>             if (deep) {
>>                 iterateShadowHosts(node, (host) =>
>>                     getManageableStyles(host.shadowRoot, results, false)
>>                 );
At line:2 char:40
+                 iterateShadowHosts(node, (host) =>
+                                        ~
Missing argument in parameter list.
At line:2 char:51
+                 iterateShadowHosts(node, (host) =>
+                                                   ~
Missing closing ')' in expression.
At line:3 char:56
+                     getManageableStyles(host.shadowRoot, results, fal
...
+                                                        ~
Missing argument in parameter list.
At line:1 char:23
+             if (deep) {
+                       ~
Missing closing '}' in statement block or type definition.
At line:4 char:17
+                 );
+                 ~
Unexpected token ')' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>             }
At line:1 char:13
+             }
+             ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         return results;
results : The term 'results' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:16
+         return results;
+                ~~~~~~~
    + CategoryInfo          : ObjectNotFound: (results:String) [], Comma
   ndNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>     }
At line:1 char:5
+     }
+     ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>     const syncStyleSet = new WeakSet();
At line:1 char:38
+     const syncStyleSet = new WeakSet();
+                                      ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>     const corsStyleSet = new WeakSet();
At line:1 char:38
+     const corsStyleSet = new WeakSet();
+                                      ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>     let canOptimizeUsingProxy$1 = false;

let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:5
+     let canOptimizeUsingProxy$1 = false;
+     ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>     document.addEventListener(
>>         "__darkreader__inlineScriptsAllowed",
>>         () => {
>>             canOptimizeUsingProxy$1 = true;
>>         },
>>         {once: true, passive: true}
>>     );
At line:3 char:10
+         () => {
+          ~
An expression was expected after '('.
At line:2 char:9
+         "__darkreader__inlineScriptsAllowed",
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
At line:3 char:10
+         () => {
+          ~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>     let loadingLinkCounter = 0;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:5
+     let loadingLinkCounter = 0;
+     ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>     const rejectorsForLoadingLinks = new
 Map();
At line:1 char:46
+     const rejectorsForLoadingLinks = new Map();
+                                              ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>     function cleanLoadingLinks() {
>>         rejectorsForLoadingLinks.clear();
>>     }
At line:2 char:40
+         rejectorsForLoadingLinks.clear();
+                                        ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>     function manageStyle(element, {update, loadingStart, loadingEnd}) {
>>         const prevStyles = [];
>>         let next = element;
>>         while (
>>             (next = next.nextElementSibling) &&
>>             next.matches(".darkreader")
>>         ) {
>>             prevStyles.push(next);
>>         }
At line:1 char:26
+     function manageStyle(element, {update, loadingStart, loadingEnd})
...
+                          ~
Missing ')' in function parameter list.
At line:1 char:33
+     function manageStyle(element, {update, loadingStart, loadingEnd})
...
+                                 ~
Missing argument in parameter list.
At line:1 char:42
+     function manageStyle(element, {update, loadingStart, loadingEnd})
...
+                                          ~
Missing argument in parameter list.
At line:1 char:69
+ ...   function manageStyle(element, {update, loadingStart,
loadingEnd}) {
+                                                                       ~
Unexpected token ')' in expression or statement.
At line:5 char:48
+             (next = next.nextElementSibling) &&
+                                                ~
You must provide a value expression following the '&&' operator.
At line:6 char:13
+             next.matches(".darkreader")
+             ~~~~~~~~~~~~
Unexpected token 'next.matches' in expression or statement.
At line:5 char:48
+             (next = next.nextElementSibling) &&
+                                                ~
Missing closing ')' after expression in 'while' statement.
At line:1 char:71
+ ...   function manageStyle(element, {update, loadingStart,
loadingEnd}) {
+
 ~
Missing closing '}' in statement block or type definition.
At line:7 char:9
+         ) {
+         ~
Unexpected token ')' in expression or statement.
At line:5 char:46
+             (next = next.nextElementSibling) &&
+                                              ~~
The token '&&' is not a valid statement separator in this version.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>         let corsCopy =
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let corsCopy =
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>             prevStyles.find(
>>                 (el) => el.matches(".darkreader--cors") && !corsStyleSet.has(el)
>>             ) || null;
At line:2 char:57
+                 (el) => el.matches(".darkreader--cors") && !corsStyle
...
+                                                         ~~
The token '&&' is not a valid statement separator in this version.
At line:3 char:15
+             ) || null;
+               ~~
The token '||' is not a valid statement separator in this version.
At line:2 char:18
+                 (el) => el.matches(".darkreader--cors") && !corsStyle
...
+                  ~~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : InvalidEndOfLine

PS C:\Users\JazmyneJosephine Mar>         let syncStyle =
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let syncStyle =
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>             prevStyles.find(
>>                 (el) => el.matches(".darkreader--sync") && !syncStyleSet.has(el)
>>             ) || null;
At line:2 char:57
+                 (el) => el.matches(".darkreader--sync") && !syncStyle
...
+                                                         ~~
The token '&&' is not a valid statement separator in this version.
At line:3 char:15
+             ) || null;
+               ~~
The token '||' is not a valid statement separator in this version.
At line:2 char:18
+                 (el) => el.matches(".darkreader--sync") && !syncStyle
...
+                  ~~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : InvalidEndOfLine

PS C:\Users\JazmyneJosephine Mar>         let corsCopyPositionWatcher = null;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let corsCopyPositionWatcher = null;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let syncStylePositionWatcher = null;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let syncStylePositionWatcher = null;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let cancelAsyncOperations = false;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let cancelAsyncOperations = false;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let isOverrideEmpty = true;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let isOverrideEmpty = true;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         const sheetModifier = createStyleSheetModifier();
At line:1 char:56
+         const sheetModifier = createStyleSheetModifier();
+                                                        ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         const observer = new MutationObserver(() => {
>>             update();
>>         });
At line:1 char:48
+         const observer = new MutationObserver(() => {
+                                                ~
An expression was expected after '('.
At line:2 char:20
+             update();
+                    ~
An expression was expected after '('.
At line:1 char:48
+         const observer = new MutationObserver(() => {
+                                                ~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         const observerOptions = {
>>             attributes: true,
>>             childList: true,
>>             subtree: true,
>>             characterData: true
>>         };
const : The term 'const' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         const observerOptions = {
+         ~~~~~
    + CategoryInfo          : ObjectNotFound: (const:String) [], Command
   NotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         function containsCSSImport() {
>>             var _a;
>>             if (!(element instanceof HTMLStyleElement)) {
>>                 return false;
>>             }
>>             const cssText = removeCSSComments(
>>                 (_a = element.textContent) !== null && _a !== void 0 ?_a : ""
>>             ).trim();
At line:2 char:13
+             var _a;
+             ~~~
The 'var' keyword is not supported in this version of the language.
At line:7 char:44
+                 (_a = element.textContent) !== null && _a !== void 0
...
+                                            ~~~
Unexpected token '!==' in expression or statement.
At line:7 char:43
+                 (_a = element.textContent) !== null && _a !== void 0
...
+                                           ~
Missing closing ')' in expression.
At line:7 char:53
+                 (_a = element.textContent) !== null && _a !== void 0
...
+                                                     ~~
The token '&&' is not a valid statement separator in this version.
At line:1 char:38
+         function containsCSSImport() {
+                                      ~
Missing closing '}' in statement block or type definition.
At line:8 char:13
+             ).trim();
+             ~
Unexpected token ')' in expression or statement.
At line:8 char:20
+             ).trim();
+                    ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ReservedKeywordNotAllowed

PS C:\Users\JazmyneJosephine Mar>             return cssText.match(cssImportRegex);
cssImportRegex : The term 'cssImportRegex' is not recognized as the name
of a cmdlet, function, script file, or operable program. Check the
spelling of the name, or if a path was included, verify that the path is
correct and try again.
At line:1 char:34
+             return cssText.match(cssImportRegex);
+                                  ~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cssImportRegex:String) []
   , CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function hasImports(cssRules, checkCrossOrigin) {
>>             let result = false;
>>             if (cssRules) {
>>                 let rule;
>>                 cssRulesLoop: for (
>>                     let i = 0, len = cssRules.length;
>>                     i < len;
>>                     i++
>>                 ) {
>>                     rule = cssRules[i];
>>                     if (rule.href) {
>>                         if (checkCrossOrigin) {
>>                             if (
>>                                 !rule.href.startsWith(
>>                                     "https://fonts.googleapis.com/"
>>                                 ) &&
>>                                 rule.href.startsWith("http") &&
>>                                 !rule.href.startsWith(location.origin)
>>                             ) {
>>                                 result = true;
>>                                 break cssRulesLoop;
>>                             }
>>                         } else {
>>                             result = true;
>>                             break cssRulesLoop;
>>                         }
>>                     }
>>                 }
At line:1 char:29
+         function hasImports(cssRules, checkCrossOrigin) {
+                             ~
Missing ')' in function parameter list.
At line:1 char:37
+         function hasImports(cssRules, checkCrossOrigin) {
+                                     ~
Missing argument in parameter list.
At line:1 char:55
+         function hasImports(cssRules, checkCrossOrigin) {
+                                                       ~
Unexpected token ')' in expression or statement.
At line:6 char:53
+                     let i = 0, len = cssRules.length;
+                                                     ~
Missing closing ')' in expression.
At line:7 char:23
+                     i < len;
+                       ~
The '<' operator is reserved for future use.
At line:3 char:27
+             if (cssRules) {
+                           ~
Missing closing '}' in statement block or type definition.
At line:1 char:57
+         function hasImports(cssRules, checkCrossOrigin) {
+                                                         ~
Missing closing '}' in statement block or type definition.
At line:9 char:17
+                 ) {
+                 ~
Unexpected token ')' in expression or statement.
At line:16 char:35
+                                 ) &&
+                                   ~~
The token '&&' is not a valid statement separator in this version.
At line:17 char:62
+                                 rule.href.startsWith("http") &&
+                                                              ~~
The token '&&' is not a valid statement separator in this version.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>             }
At line:1 char:13
+             }
+             ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>             return result;
result : The term 'result' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:20
+             return result;
+                    ~~~~~~
    + CategoryInfo          : ObjectNotFound: (result:String) [], Comman
   dNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function getRulesSync() {
>>             if (corsCopy) {
>>                 return corsCopy.sheet.cssRules;
>>             }
>>             if (containsCSSImport()) {
>>                 return null;
>>             }
>>             const cssRules = safeGetSheetRules();
>>             if (
>>                 element instanceof HTMLLinkElement &&
>>                 !isRelativeHrefOnAbsolutePath(element.href) &&
>>                 hasImports(cssRules, false)
>>             ) {
>>                 return null;
>>             }
>>             if (hasImports(cssRules, true)) {
>>                 return null;
>>             }
>>             return cssRules;
>>         }
At line:5 char:35
+             if (containsCSSImport()) {
+                                   ~
An expression was expected after '('.
At line:8 char:48
+             const cssRules = safeGetSheetRules();
+                                                ~
An expression was expected after '('.
At line:10 char:52
+                 element instanceof HTMLLinkElement &&
+                                                    ~~
The token '&&' is not a valid statement separator in this version.
At line:11 char:61
+                 !isRelativeHrefOnAbsolutePath(element.href) &&
+                                                             ~~
The token '&&' is not a valid statement separator in this version.
At line:12 char:36
+                 hasImports(cssRules, false)
+                                    ~
Missing argument in parameter list.
At line:16 char:36
+             if (hasImports(cssRules, true)) {
+                                    ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function insertStyle() {
>>             if (corsCopy) {
>>                 if (element.nextSibling !== corsCopy) {
>>                     element.parentNode.insertBefore(
>>                         corsCopy,
>>                         element.nextSibling
>>                     );
>>                 }
>>                 if (corsCopy.nextSibling !== syncStyle) {
>>                     element.parentNode.insertBefore(
>>                         syncStyle,
>>                         corsCopy.nextSibling
>>                     );
>>                 }
>>             } else if (element.nextSibling !== syncStyle) {
>>                 element.parentNode.insertBefore(syncStyle, element.nextSibling);
>>             }
>>         }
At line:5 char:33
+                         corsCopy,
+                                 ~
Missing argument in parameter list.
At line:11 char:34
+                         syncStyle,
+                                  ~
Missing argument in parameter list.
At line:15 char:19
+             } else if (element.nextSibling !== syncStyle) {
+                   ~
Missing statement block after 'else' keyword.
At line:16 char:58
+                 element.parentNode.insertBefore(syncStyle, element.ne
...
+                                                          ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>         function createSyncStyle() {
>>             syncStyle =
>>                 element instanceof SVGStyleElement
>>                     ? document.createElementNS(
>>                           "http://www.w3.org/2000/svg",
>>                           "style"
>>                       )
>>                     : document.createElement("style");
>>             syncStyle.classList.add("darkreader");
>>             syncStyle.classList.add("darkreader--sync");
>>             syncStyle.media = "screen";
>>             if (element.title) {
>>                 syncStyle.title = element.title;
>>             }
>>             syncStyleSet.add(syncStyle);
>>         }
PS C:\Users\JazmyneJosephine Mar>         let isLoadingRules = false;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let isLoadingRules = false;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let wasLoadingError = false;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let wasLoadingError = false;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         const loadingLinkId = ++loadingLinkCounter;
const : The term 'const' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         const loadingLinkId = ++loadingLinkCounter;
+         ~~~~~
    + CategoryInfo          : ObjectNotFound: (const:String) [], Command
   NotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         async function getRulesAsync() {
>>             let cssText;
>>             let cssBasePath;
>>             if (element instanceof HTMLLinkElement) {
>>                 let [cssRules, accessError] = getRulesOrError();
>>                 if (
>>                     (!cssRules && !accessError) ||
>>                     isStillLoadingError(accessError)
>>                 ) {
>>                     try {
>>                         logInfo(
>>                             `Linkelement ${loadingLinkId} is not loaded
 yet and thus will be await for`,
>>                             element
>>                         );
At line:1 char:38
+         async function getRulesAsync() {
+                                      ~
An expression was expected after '('.
At line:5 char:63
+                 let [cssRules, accessError] = getRulesOrError();
+                                                               ~
An expression was expected after '('.
At line:7 char:32
+                     (!cssRules && !accessError) ||
+                                ~~
The token '&&' is not a valid statement separator in this version.
At line:7 char:51
+                     (!cssRules && !accessError) ||
+                                                   ~
You must provide a value expression following the '||' operator.
At line:8 char:21
+                     isStillLoadingError(accessError)
+                     ~~~~~~~~~~~~~~~~~~~
Unexpected token 'isStillLoadingError' in expression or statement.
At line:8 char:21
+                     isStillLoadingError(accessError)
+                     ~~~~~~~~~~~~~~~~~~~
Missing closing ')' after expression in 'if' statement.
At line:4 char:53
+             if (element instanceof HTMLLinkElement) {
+                                                     ~
Missing closing '}' in statement block or type definition.
At line:1 char:40
+         async function getRulesAsync() {
+                                        ~
Missing closing '}' in statement block or type definition.
At line:9 char:17
+                 ) {
+                 ~
Unexpected token ')' in expression or statement.
At line:12 char:105
+ ... ement ${loadingLinkId} is not loaded yet and thus will be await
for`,
+
  ~
Missing closing ')' in expression.
Not all parse errors were reported.  Correct the reported errors and try
again.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>                         await linkLoading(element, loadingLinkId);
At line:1 char:50
+                         await linkLoading(element, loadingLinkId);
+                                                  ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>                     } catch (err) {
>>                         wasLoadingError = true;
>>                     }
At line:1 char:21
+                     } catch (err) {
+                     ~
Unexpected token '}' in expression or statement.
At line:1 char:35
+                     } catch (err) {
+                                   ~
Unexpected token '{' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>                     if (cancelAsyncOperations) {
>>                         return null;
>>                     }
cancelAsyncOperations : The term 'cancelAsyncOperations' is not
recognized as the name of a cmdlet, function, script file, or operable
program. Check the spelling of the name, or if a path was included,
verify that the path is correct and try again.
At line:1 char:25
+                     if (cancelAsyncOperations) {
+                         ~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cancelAsyncOperations:Str
   ing) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>                     [cssRules, accessError] = getRulesOrError();
At line:1 char:63
+                     [cssRules, accessError] = getRulesOrError();
+                                                               ~
An expression was expected after '('.
At line:1 char:21
+                     [cssRules, accessError] = getRulesOrError();
+                     ~~~~~~~~~~~~~~~~~~~~~~~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>                 }
At line:1 char:17
+                 }
+                 ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>                 if (cssRules) {
>>                     if (!hasImports(cssRules, false)) {
>>                         return cssRules;
>>                     }
>>                 }
At line:2 char:45
+                     if (!hasImports(cssRules, false)) {
+                                             ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>                 cssText = await loadText(element.href);
element.href : The term 'element.href' is not recognized as the name of
a cmdlet, function, script file, or operable program. Check the spelling
of the name, or if a path was included, verify that the path is correct
and try again.
At line:1 char:42
+                 cssText = await loadText(element.href);
+                                          ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (element.href:String) [],
   CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>                 cssBasePath = getCSSBaseBath(element.href);
element.href : The term 'element.href' is not recognized as the name of
a cmdlet, function, script file, or operable program. Check the spelling
of the name, or if a path was included, verify that the path is correct
and try again.
At line:1 char:46
+                 cssBasePath = getCSSBaseBath(element.href);
+                                              ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (element.href:String) [],
   CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>                 if (cancelAsyncOperations) {
>>                     return null;
>>                 }
cancelAsyncOperations : The term 'cancelAsyncOperations' is not
recognized as the name of a cmdlet, function, script file, or operable
program. Check the spelling of the name, or if a path was included,
verify that the path is correct and try again.
At line:1 char:21
+                 if (cancelAsyncOperations) {
+                     ~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cancelAsyncOperations:Str
   ing) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>             } else if (containsCSSImport()) {
>>                 cssText = element.textContent.trim();
>>                 cssBasePath = getCSSBaseBath(location.href);
>>             } else {
>>                 return null;
>>             }
At line:1 char:13
+             } else if (containsCSSImport()) {
+             ~
Unexpected token '}' in expression or statement.
At line:1 char:42
+             } else if (containsCSSImport()) {
+                                          ~
An expression was expected after '('.
At line:2 char:52
+                 cssText = element.textContent.trim();
+                                                    ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>             if (cssText) {
>>                 try {
>>                     const fullCSSText = await replaceCSSImports(
>>                         cssText,
>>                         cssBasePath
>>                     );
>>                     corsCopy = createCORSCopy(element, fullCSSText);
>>                 } catch (err) {}
>>                 if (corsCopy) {
>>                     corsCopyPositionWatcher = watchForNodePosition(
>>                         corsCopy,
>>                         "prev-sibling"
>>                     );
>>                     return corsCopy.sheet.cssRules;
>>                 }
>>             }
At line:4 char:32
+                         cssText,
+                                ~
Missing argument in parameter list.
At line:7 char:54
+                     corsCopy = createCORSCopy(element, fullCSSText);
+                                                      ~
Missing argument in parameter list.
At line:8 char:24
+                 } catch (err) {}
+                        ~
The Catch block is missing its statement block.
At line:8 char:31
+                 } catch (err) {}
+                               ~
Unexpected token '{' in expression or statement.
At line:11 char:33
+                         corsCopy,
+                                 ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>             return null;
null : The term 'null' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:20
+             return null;
+                    ~~~~
    + CategoryInfo          : ObjectNotFound: (null:String) [], CommandN
   otFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function details(options) {
>>             const rules = getRulesSync();
>>             if (!rules) {
>>                 if (options.secondRound) {
>>                     return null;
>>                 }
>>                 if (isLoadingRules || wasLoadingError) {
>>                     return null;
>>                 }
>>                 isLoadingRules = true;
>>                 loadingStart();
>>                 getRulesAsync()
>>                     .then((results) => {
>>                         isLoadingRules = false;
>>                         loadingEnd();
>>                         if (results) {
>>                             update();
>>                         }
>>                     })
>>                     .catch((err) => {
>>                         isLoadingRules = false;
>>                         loadingEnd();
>>                     });
>>                 return null;
>>             }
>>             return {rules};
>>         }
At line:1 char:26
+         function details(options) {
+                          ~
Missing ')' in function parameter list.
At line:1 char:33
+         function details(options) {
+                                 ~
Unexpected token ')' in expression or statement.
At line:2 char:40
+             const rules = getRulesSync();
+                                        ~
An expression was expected after '('.
At line:7 char:36
+                 if (isLoadingRules || wasLoadingError) {
+                                    ~~
The token '||' is not a valid statement separator in this version.
At line:11 char:30
+                 loadingStart();
+                              ~
An expression was expected after '('.
At line:12 char:31
+                 getRulesAsync()
+                               ~
An expression was expected after '('.
At line:15 char:36
+                         loadingEnd();
+                                    ~
An expression was expected after '('.
At line:17 char:36
+                             update();
+                                    ~
An expression was expected after '('.
At line:22 char:36
+                         loadingEnd();
+                                    ~
An expression was expected after '('.
At line:13 char:28
+                     .then((results) => {
+                            ~~~~~~~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
Not all parse errors were reported.  Correct the reported errors and try
again.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>         let forceRenderStyle = false;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let forceRenderStyle = false;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         function render(theme, ignoreImageAnalysis) {
>>             const rules = getRulesSync();
>>             if (!rules) {
>>                 return;
>>             }
>>             cancelAsyncOperations = false;
>>             function removeCSSRulesFromSheet(sheet) {
>>                 if (!sheet) {
>>                     return;
>>                 }
>>                 for (let i = sheet.cssRules.length - 1; i >= 0; i--) {
>>                     sheet.deleteRule(i);
>>                 }
>>             }
At line:1 char:25
+         function render(theme, ignoreImageAnalysis) {
+                         ~
Missing ')' in function parameter list.
At line:1 char:30
+         function render(theme, ignoreImageAnalysis) {
+                              ~
Missing argument in parameter list.
At line:1 char:51
+         function render(theme, ignoreImageAnalysis) {
+                                                   ~
Unexpected token ')' in expression or statement.
At line:2 char:40
+             const rules = getRulesSync();
+                                        ~
An expression was expected after '('.
At line:7 char:46
+             function removeCSSRulesFromSheet(sheet) {
+                                              ~
Missing ')' in function parameter list.
At line:1 char:53
+         function render(theme, ignoreImageAnalysis) {
+                                                     ~
Missing closing '}' in statement block or type definition.
At line:7 char:51
+             function removeCSSRulesFromSheet(sheet) {
+                                                   ~
Unexpected token ')' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>             function prepareOverridesSheet() {
>>                 if (!syncStyle) {
>>                     createSyncStyle();
>>                 }
>>                 syncStylePositionWatcher && syncStylePositionWatcher.stop();
>>                 insertStyle();
>>                 if (syncStyle.sheet == null) {
>>                     syncStyle.textContent = "";
>>                 }
>>                 const sheet = syncStyle.sheet;
>>                 removeCSSRulesFromSheet(sheet);
>>                 if (syncStylePositionWatcher) {
>>                     syncStylePositionWatcher.run();
>>                 } else {
>>                     syncStylePositionWatcher = watchForNodePosition(
>>                         syncStyle,
>>                         "prev-sibling",
>>                         () => {
>>                             forceRenderStyle = true;
>>                             buildOverrides();
>>                         }
>>                     );
>>                 }
>>                 return syncStyle.sheet;
>>             }
At line:3 char:37
+                     createSyncStyle();
+                                     ~
An expression was expected after '('.
At line:5 char:42
+                 syncStylePositionWatcher && syncStylePositionWatcher.
...
+                                          ~~
The token '&&' is not a valid statement separator in this version.
At line:5 char:75
+ ...          syncStylePositionWatcher &&
syncStylePositionWatcher.stop();
+
~
An expression was expected after '('.
At line:6 char:29
+                 insertStyle();
+                             ~
An expression was expected after '('.
At line:13 char:50
+                     syncStylePositionWatcher.run();
+                                                  ~
An expression was expected after '('.
At line:16 char:34
+                         syncStyle,
+                                  ~
Missing argument in parameter list.
At line:18 char:26
+                         () => {
+                          ~
An expression was expected after '('.
At line:20 char:44
+                             buildOverrides();
+                                            ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>             function buildOverrides() {
>>                 const force = forceRenderStyle;
>>                 forceRenderStyle = false;
>>                 sheetModifier.modifySheet({
>>                     prepareSheet: prepareOverridesSheet,
>>                     sourceCSSRules: rules,
>>                     theme,
>>                     ignoreImageAnalysis,
>>                     force,
>>                     isAsyncCancelled: () => cancelAsyncOperations
>>                 });
>>                 isOverrideEmpty = syncStyle.sheet.cssRules.length === 0;
>>                 if (sheetModifier.shouldRebuildStyle()) {
>>                     addReadyStateCompleteListener(() => update());
>>                 }
>>             }
At line:10 char:40
+                     isAsyncCancelled: () => cancelAsyncOperations
+                                        ~
An expression was expected after '('.
At line:13 char:54
+                 if (sheetModifier.shouldRebuildStyle()) {
+                                                      ~
An expression was expected after '('.
At line:14 char:52
+                     addReadyStateCompleteListener(() => update());
+                                                    ~
An expression was expected after '('.
At line:14 char:64
+                     addReadyStateCompleteListener(() => update());
+                                                                ~
An expression was expected after '('.
At line:14 char:52
+                     addReadyStateCompleteListener(() => update());
+                                                    ~
The assignment expression is not valid. The input to an assignment
operator must be an object that is able to accept assignments, such as a
variable or a property.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>             buildOverrides();
At line:1 char:28
+             buildOverrides();
+                            ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function getRulesOrError() {
>>             try {
>>                 if (element.sheet == null) {
>>                     return [null, null];
>>                 }
>>                 return [element.sheet.cssRules, null];
>>             } catch (err) {
>>                 return [null, err];
>>             }
>>         }
At line:7 char:20
+             } catch (err) {
+                    ~
The Catch block is missing its statement block.
At line:7 char:27
+             } catch (err) {
+                           ~
Unexpected token '{' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingCatchHandlerBlock

PS C:\Users\JazmyneJosephine Mar>         function isStillLoadingError(error) {
>>             return error && error.message && error.message.includes("loading");
>>         }
At line:1 char:38
+         function isStillLoadingError(error) {
+                                      ~
Missing ')' in function parameter list.
At line:1 char:43
+         function isStillLoadingError(error) {
+                                           ~
Unexpected token ')' in expression or statement.
At line:2 char:26
+             return error && error.message && error.message.includes("
...
+                          ~~
The token '&&' is not a valid statement separator in this version.
At line:2 char:43
+             return error && error.message && error.message.includes("
...
+                                           ~~
The token '&&' is not a valid statement separator in this version.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterLi
   st

PS C:\Users\JazmyneJosephine Mar>         function safeGetSheetRules() {
>>             const [cssRules, err] = getRulesOrError();
>>             if (err) {
>>                 return null;
>>             }
>>             return cssRules;
>>         }
At line:2 char:53
+             const [cssRules, err] = getRulesOrError();
+                                                     ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function watchForSheetChanges(){
>>             watchForSheetChangesUsingProxy();
>>             if (!(canOptimizeUsingProxy$1 && element.sheet)) {
>>                 watchForSheetChangesUsingRAF();
>>             }
>>         }
At line:2 char:44
+             watchForSheetChangesUsingProxy();
+                                            ~
An expression was expected after '('.
At line:3 char:43
+             if (!(canOptimizeUsingProxy$1 && element.sheet)) {
+                                           ~~
The token '&&' is not a valid statement separator in this version.
At line:4 char:46
+                 watchForSheetChangesUsingRAF();
+                                              ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         let rulesChangeKey = null;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let rulesChangeKey = null;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let rulesCheckFrameId = null;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let rulesCheckFrameId = null;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         function getRulesChangeKey() {
>>             const rules = safeGetSheetRules();
>>             return rules ? rules.length : null;
>>         }
At line:2 char:45
+             const rules = safeGetSheetRules();
+                                             ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function didRulesKeyChange() {
>>             return getRulesChangeKey() !== rulesChangeKey;
>>         }
At line:2 char:38
+             return getRulesChangeKey() !== rulesChangeKey;
+                                      ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function watchForSheetChangesUsingRAF() {
>>             rulesChangeKey = getRulesChangeKey();
>>             stopWatchingForSheetChangesUsingRAF();
>>             const checkForUpdate = () => {
>>                 if (didRulesKeyChange()) {
>>                     rulesChangeKey = getRulesChangeKey();
>>                     update();
>>                 }
>>                 if (canOptimizeUsingProxy$1 && element.sheet) {
>>                     stopWatchingForSheetChangesUsingRAF();
>>                     return;
>>                 }
>>                 rulesCheckFrameId = requestAnimationFrame(checkForUpdate);
>>             };
>>             checkForUpdate();
>>         }
At line:2 char:48
+             rulesChangeKey = getRulesChangeKey();
+                                                ~
An expression was expected after '('.
At line:3 char:49
+             stopWatchingForSheetChangesUsingRAF();
+                                                 ~
An expression was expected after '('.
At line:4 char:37
+             const checkForUpdate = () => {
+                                     ~
An expression was expected after '('.
At line:5 char:39
+                 if (didRulesKeyChange()) {
+                                       ~
An expression was expected after '('.
At line:6 char:56
+                     rulesChangeKey = getRulesChangeKey();
+                                                        ~
An expression was expected after '('.
At line:7 char:28
+                     update();
+                            ~
An expression was expected after '('.
At line:9 char:45
+                 if (canOptimizeUsingProxy$1 && element.sheet) {
+                                             ~~
The token '&&' is not a valid statement separator in this version.
At line:10 char:57
+                     stopWatchingForSheetChangesUsingRAF();
+                                                         ~
An expression was expected after '('.
At line:15 char:28
+             checkForUpdate();
+                            ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function stopWatchingForSheetChangesUsingRAF() {
>>             cancelAnimationFrame(rulesCheckFrameId);
>>         }
PS C:\Users\JazmyneJosephine Mar>         let areSheetChangesPending = false;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let areSheetChangesPending = false;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         function onSheetChange() {
>>             canOptimizeUsingProxy$1 = true;
>>             stopWatchingForSheetChangesUsingRAF();
>>             if (areSheetChangesPending) {
>>                 return;
>>             }
>>             function handleSheetChanges() {
>>                 areSheetChangesPending = false;
>>                 if (cancelAsyncOperations) {
>>                     return;
>>                 }
>>                 update();
>>             }
>>             areSheetChangesPending = true;
>>             if (typeof queueMicrotask === "function") {
>>                 queueMicrotask(handleSheetChanges);
>>             } else {
>>                 requestAnimationFrame(handleSheetChanges);
>>             }
>>         }
At line:3 char:49
+             stopWatchingForSheetChangesUsingRAF();
+                                                 ~
An expression was expected after '('.
At line:12 char:24
+                 update();
+                        ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function watchForSheetChangesUsingProxy() {
>>             element.addEventListener(
>>                 "__darkreader__updateSheet",
>>                 onSheetChange,
>>                 {passive: true}
>>             );
At line:3 char:45
+                 "__darkreader__updateSheet",
+                                             ~
Missing expression after ','.
At line:4 char:17
+                 onSheetChange,
+                 ~~~~~~~~~~~~~
Unexpected token 'onSheetChange' in expression or statement.
At line:3 char:45
+                 "__darkreader__updateSheet",
+                                             ~
Missing closing ')' in expression.
At line:1 char:51
+         function watchForSheetChangesUsingProxy() {
+                                                   ~
Missing closing '}' in statement block or type definition.
At line:6 char:13
+             );
+             ~
Unexpected token ')' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingExpressionAfterToken

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function stopWatchingForSheetChangesUsingProxy() {
>>             element.removeEventListener(
>>                 "__darkreader__updateSheet",
>>                 onSheetChange
>>             );
At line:3 char:45
+                 "__darkreader__updateSheet",
+                                             ~
Missing expression after ','.
At line:4 char:17
+                 onSheetChange
+                 ~~~~~~~~~~~~~
Unexpected token 'onSheetChange' in expression or statement.
At line:3 char:45
+                 "__darkreader__updateSheet",
+                                             ~
Missing closing ')' in expression.
At line:1 char:58
+         function stopWatchingForSheetChangesUsingProxy() {
+                                                          ~
Missing closing '}' in statement block or type definition.
At line:5 char:13
+             );
+             ~
Unexpected token ')' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingExpressionAfterToken

PS C:\Users\JazmyneJosephine Mar>         }
At line:1 char:9
+         }
+         ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>         function stopWatchingForSheetChanges() {
>>             stopWatchingForSheetChangesUsingProxy();
>>             stopWatchingForSheetChangesUsingRAF();
>>         }
At line:2 char:51
+             stopWatchingForSheetChangesUsingProxy();
+                                                   ~
An expression was expected after '('.
At line:3 char:49
+             stopWatchingForSheetChangesUsingRAF();
+                                                 ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function pause() {
>>             observer.disconnect();
>>             cancelAsyncOperations = true;
>>             corsCopyPositionWatcher && corsCopyPositionWatcher.stop();
>>             syncStylePositionWatcher && syncStylePositionWatcher.stop();
>>             stopWatchingForSheetChanges();
>>         }
At line:2 char:33
+             observer.disconnect();
+                                 ~
An expression was expected after '('.
At line:4 char:37
+             corsCopyPositionWatcher && corsCopyPositionWatcher.stop()
...
+                                     ~~
The token '&&' is not a valid statement separator in this version.
At line:4 char:69
+ ...            corsCopyPositionWatcher &&
corsCopyPositionWatcher.stop();
+
~
An expression was expected after '('.
At line:5 char:38
+             syncStylePositionWatcher && syncStylePositionWatcher.stop
...
+                                      ~~
The token '&&' is not a valid statement separator in this version.
At line:5 char:71
+ ...          syncStylePositionWatcher &&
syncStylePositionWatcher.stop();
+
~
An expression was expected after '('.
At line:6 char:41
+             stopWatchingForSheetChanges();
+                                         ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function destroy() {
>>             pause();
>>             removeNode(corsCopy);
>>             removeNode(syncStyle);
>>             loadingEnd();
>>             if (rejectorsForLoadingLinks.has(loadingLinkId)) {
>>                 const reject = rejectorsForLoadingLinks.get(loadingLinkId);
>>                 rejectorsForLoadingLinks.delete(loadingLinkId);
>>                 reject && reject();
>>             }
>>         }
At line:2 char:19
+             pause();
+                   ~
An expression was expected after '('.
At line:5 char:24
+             loadingEnd();
+                        ~
An expression was expected after '('.
At line:9 char:24
+                 reject && reject();
+                        ~~
The token '&&' is not a valid statement separator in this version.
At line:9 char:34
+                 reject && reject();
+                                  ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         function watch() {
>>             observer.observe(element, observerOptions);
>>             if (element instanceof HTMLStyleElement) {
>>                 watchForSheetChanges();
>>             }
>>         }
At line:2 char:37
+             observer.observe(element, observerOptions);
+                                     ~
Missing argument in parameter list.
At line:4 char:38
+                 watchForSheetChanges();
+                                      ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>         const maxMoveCount = 10;
const : The term 'const' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         const maxMoveCount = 10;
+         ~~~~~
    + CategoryInfo          : ObjectNotFound: (const:String) [], Command
   NotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         let moveCount = 0;
let : The term 'let' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the
name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:9
+         let moveCount = 0;
+         ~~~
    + CategoryInfo          : ObjectNotFound: (let:String) [], CommandNo
   tFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>         function restore() {
>>             if (!syncStyle) {
>>                 return;
>>             }
>>             moveCount++;
>>             if (moveCount > maxMoveCount) {
>>                 return;
>>             }
>>             insertStyle();
>>             corsCopyPositionWatcher && corsCopyPositionWatcher.skip();
>>             syncStylePositionWatcher && syncStylePositionWatcher.skip();
>>             if (!isOverrideEmpty) {
>>                 forceRenderStyle = true;
>>                 update();
>>             }
>>         }
At line:9 char:25
+             insertStyle();
+                         ~
An expression was expected after '('.
At line:10 char:37
+             corsCopyPositionWatcher && corsCopyPositionWatcher.skip()
...
+                                     ~~
The token '&&' is not a valid statement separator in this version.
At line:10 char:69
+ ...            corsCopyPositionWatcher &&
corsCopyPositionWatcher.skip();
+
~
An expression was expected after '('.
At line:11 char:38
+             syncStylePositionWatcher && syncStylePositionWatcher.skip
...
+                                      ~~
The token '&&' is not a valid statement separator in this version.
At line:11 char:71
+ ...          syncStylePositionWatcher &&
syncStylePositionWatcher.skip();
+
~
An expression was expected after '('.
At line:14 char:24
+                 update();
+                        ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>         return {
>>             details,
>>             render,
>>             pause,
>>             destroy,
>>             watch,
>>             restore
>>         };
At line:2 char:20
+             details,
+                    ~
Missing argument in parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>     }
At line:1 char:5
+     }
+     ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>     async function linkLoading(link, loadingId) {
>>         return new Promise((resolve, reject) => {
>>             const cleanUp = () => {
>>                 link.removeEventListener("load", onLoad);
>>                 link.removeEventListener("error", onError);
At line:1 char:36
+     async function linkLoading(link, loadingId) {
+                                    ~
Missing argument in parameter list.
At line:2 char:36
+         return new Promise((resolve, reject) => {
+                                    ~
Missing argument in parameter list.
At line:3 char:30
+             const cleanUp = () => {
+                              ~
An expression was expected after '('.
At line:4 char:49
+                 link.removeEventListener("load", onLoad);
+                                                 ~
Missing expression after ','.
At line:4 char:50
+                 link.removeEventListener("load", onLoad);
+                                                  ~~~~~~
Unexpected token 'onLoad' in expression or statement.
At line:4 char:49
+                 link.removeEventListener("load", onLoad);
+                                                 ~
Missing closing ')' in expression.
At line:3 char:35
+             const cleanUp = () => {
+                                   ~
Missing closing '}' in statement block or type definition.
At line:2 char:49
+         return new Promise((resolve, reject) => {
+                                                 ~
Missing closing '}' in statement block or type definition.
At line:5 char:50
+                 link.removeEventListener("error", onError);
+                                                  ~
Missing expression after ','.
At line:5 char:51
+                 link.removeEventListener("error", onError);
+                                                   ~~~~~~~
Unexpected token 'onError' in expression or statement.
Not all parse errors were reported.  Correct the reported errors and try
again.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : MissingArgument

PS C:\Users\JazmyneJosephine Mar>                 rejectorsForLoadingLinks.delete(loadingId);
loadingId : The term 'loadingId' is not recognized as the name of a
cmdlet, function, script file, or operable program. Check the spelling
of the name, or if a path was included, verify that the path is correct
and try again.
At line:1 char:49
+                 rejectorsForLoadingLinks.delete(loadingId);
+                                                 ~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (loadingId:String) [], Com
   mandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\JazmyneJosephine Mar>             };
At line:1 char:13
+             };
+             ~
Unexpected token '}' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Users\JazmyneJosephine Mar>             const onLoad = () => {
>>                 cleanUp();
>>                 resolve();
>>             };
At line:1 char:29
+             const onLoad = () => {
+                             ~
An expression was expected after '('.
At line:2 char:25
+                 cleanUp();
+                         ~
An expression was expected after '('.
At line:3 char:25
+                 resolve();
+                         ~
An expression was expected after '('.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRe
   cordException
    + FullyQualifiedErrorId : ExpectedExpression

PS C:\Users\JazmyneJosephine Mar>             const onError = () => {
>>                 cleanUp();
>>                 reject(
>>                     `Linkelement ${loadingId} couldn't be loaded. ${link.href}`
>>                 );
>>             };
>>             rejectorsForLoadingLinks.set(loadingId, () => {
>>                 cleanUp();
>>                 reject();
>>             });
>>             link.addEventListener("load", onLoad, {passive: true});
>>             link.addEventListener("error", onError, {passive: true});
>>             if (!link.href) {
>>                 onError();
>>             }
>>         });
>>     }
>>     function getCSSImportURL(importDeclaration) {
>>         return getCSSURLValue(
>>             importDeclaration
>>                 .substring(7)
>>                 .trim()
>>                 .replace(/;$/, "")
>>                 .replace(/screen$/, "")
>>         );
>>     }
>>     async function loadText(url) {
>>         if (url.startsWith("data:")) {
>>             return await (await fetch(url)).text();
>>         }
>>         return await bgFetch({
>>             url,
>>             responseType: "text",
>>             mimeType: "text/css",
>>             origin: window.location.origin
>>         });
>>     }
>>     async function replaceCSSImports(cssText, basePath, cache = new Map()) {
>>         cssText = removeCSSComments(cssText);
>>         cssText = replaceCSSFontFace(cssText);
>>         cssText = replaceCSSRelativeURLsWithAbsolute(cssText, basePath);
>>         const importMatches = getMatches(cssImportRegex, cssText);
>>         for (const match of importMatches) {
>>             const importURL = getCSSImportURL(match);
>>             const absoluteURL = getAbsoluteURL(basePath, importURL);
>>             let importedCSS;
>>             if (cache.has(absoluteURL)) {
>>                 importedCSS = cache.get(absoluteURL);
>>             } else {
>>                 try {
>>                     importedCSS = await loadText(absoluteURL);
>>                     cache.set(absoluteURL, importedCSS);
>>                     importedCSS = await replaceCSSImports(
>>                         importedCSS,
>>                         getCSSBaseBath(absoluteURL),
>>                         cache
>>                     );
>>                 } catch (err) {
>>                     importedCSS = "";
>>                 }
>>             }
>>             cssText = cssText.split(match).join(importedCSS);
>>         }
>>         cssText = cssText.trim();
>>         return cssText;
>>     }
>>     function createCORSCopy(srcElement, cssText) {
>>         if (!cssText) {
>>             return null;
>>         }
>>         const cors = document.createElement("style");
>>         cors.classList.add("darkreader");
>>         cors.classList.add("darkreader--cors");
>>         cors.media = "screen";
>>         cors.textContent = cssText;
>>         srcElement.parentNode.insertBefore(cors, srcElement.nextSibling);
>>         cors.sheet.disabled = true;
>>         corsStyleSet.add(cors);
>>         return cors;
>>     }
>>
>>     const observers = [];
>>     let observedRoots;
>>     const definedCustomElements = new Set();
>>     const undefinedGroups = new Map();
>>     let elementsDefinitionCallback;
>>     function isCustomElement(element) {
>>         if (element.tagName.includes("-") || element.getAttribute("is")) {
>>             return true;
>>         }
>>         return false;
>>     }
>>     function recordUndefinedElement(element) {
>>         let tag = element.tagName.toLowerCase();
>>         if (!tag.includes("-")) {
>>             const extendedTag = element.getAttribute("is");
>>             if (extendedTag) {
>>                 tag = extendedTag;
>>             } else {
>>                 return;
>>             }
>>         }
>>         if (!undefinedGroups.has(tag)) {
>>             undefinedGroups.set(tag, new Set());
>>             customElementsWhenDefined(tag).then(() => {
>>                 if (elementsDefinitionCallback) {
>>                     const elements = undefinedGroups.get(tag);
>>                     undefinedGroups.delete(tag);
>>                     elementsDefinitionCallback(Array.from(elements));
>>                 }
>>             });
>>         }
>>         undefinedGroups.get(tag).add(element);
>>     }
>>     function collectUndefinedElements(root) {
>>         if (!isDefinedSelectorSupported) {
>>             return;
>>         }
>>         forEach(
>>             root.querySelectorAll(":not(:defined)"),
>>             recordUndefinedElement
>>         );
>>     }
>>     let canOptimizeUsingProxy = false;
>>     document.addEventListener(
>>         "__darkreader__inlineScriptsAllowed",
>>         () => {
>>             canOptimizeUsingProxy = true;
>>         },
>>         {once: true, passive: true}
>>     );
>>     const resolvers = new Map();
>>     function handleIsDefined(e) {
>>         canOptimizeUsingProxy = true;
>>         const tag = e.detail.tag;
>>         definedCustomElements.add(tag);
>>         if (resolvers.has(tag)) {
>>             const r = resolvers.get(tag);
>>             resolvers.delete(tag);
>>             r.forEach((r) => r());
>>         }
>>     }
>>     async function customElementsWhenDefined(tag) {
>>         if (definedCustomElements.has(tag)) {
>>             return;
>>         }
>>         return new Promise((resolve) => {
>>             if (
>>                 window.customElements &&
>>                 typeof customElements.whenDefined === "function"
>>             ) {
>>                 customElements.whenDefined(tag).then(() => resolve());
>>             } else if (canOptimizeUsingProxy) {
>>                 if (resolvers.has(tag)) {
>>                     resolvers.get(tag).push(resolve);
>>                 } else {
>>                     resolvers.set(tag, [resolve]);
>>                 }
>>                 document.dispatchEvent(
>>                     new CustomEvent("__darkreader__addUndefinedResolver", {
>>                         detail: {tag}
>>                     })
>>                 );
>>             } else {
>>                 const checkIfDefined = () => {
>>                     const elements = undefinedGroups.get(tag);
>>                     if (elements && elements.size > 0) {
>>                         if (
>>                             elements.values().next().value.matches(":defined")
>>                         ) {
>>                             resolve();
>>                         } else {
>>                             requestAnimationFrame(checkIfDefined);
>>                         }
>>                     }
>>                 };
>>                 requestAnimationFrame(checkIfDefined);
>>             }
>>         });
>>     }
>>     function watchWhenCustomElementsDefined(callback) {
>>         elementsDefinitionCallback = callback;
>>     }
>>     function unsubscribeFromDefineCustomElements() {
>>         elementsDefinitionCallback = null;
>>         undefinedGroups.clear();
>>         document.removeEventListener(
>>             "__darkreader__isDefined",
>>             handleIsDefined
>>         );
>>     }
>>     function watchForStyleChanges(currentStyles, update, shadowRootDiscovered) {
>>         stopWatchingForStyleChanges();
>>         const prevStyles = new Set(currentStyles);
>>         const prevStyleSiblings = new WeakMap();
>>         const nextStyleSiblings = new WeakMap();
>>         function saveStylePosition(style) {
>>             prevStyleSiblings.set(style, style.previousElementSibling);
>>             nextStyleSiblings.set(style, style.nextElementSibling);
>>         }
>>         function forgetStylePosition(style) {
>>             prevStyleSiblings.delete(style);
>>             nextStyleSiblings.delete(style);
>>         }
>>         function didStylePositionChange(style) {
>>             return (
>>                 style.previousElementSibling !== prevStyleSiblings.get(style) ||
>>                 style.nextElementSibling !== nextStyleSiblings.get(style)
>>             );
>>         }
>>         currentStyles.forEach(saveStylePosition);
>>         function handleStyleOperations(operations) {
>>             const {createdStyles, removedStyles, movedStyles} = operations;
>>             createdStyles.forEach((s) => saveStylePosition(s));
>>             movedStyles.forEach((s) => saveStylePosition(s));
>>             removedStyles.forEach((s) => forgetStylePosition(s));
>>             createdStyles.forEach((s) => prevStyles.add(s));
>>             removedStyles.forEach((s) => prevStyles.delete(s));
>>             if (
>>                 createdStyles.size + removedStyles.size + movedStyles.size >
>>                 0
>>             ) {
>>                 update({
>>                     created: Array.from(createdStyles),
>>                     removed: Array.from(removedStyles),
>>                     moved: Array.from(movedStyles),
>>                     updated: []
>>                 });
>>             }
>>         }
>>         function handleMinorTreeMutations({additions, moves, deletions}) {
>>             const createdStyles = new Set();
>>             const removedStyles = new Set();
>>             const movedStyles = new Set();
>>             additions.forEach((node) =>
>>                 getManageableStyles(node).forEach((style) =>
>>                     createdStyles.add(style)
>>                 )
>>             );
>>             deletions.forEach((node) =>
>>                 getManageableStyles(node).forEach((style) =>
>>                     removedStyles.add(style)
>>                 )
>>             );
>>             moves.forEach((node) =>
>>                 getManageableStyles(node).forEach((style) =>
>>                     movedStyles.add(style)
>>                 )
>>             );
>>             handleStyleOperations({createdStyles, removedStyles, movedStyles});
>>             additions.forEach((n) => {
>>                 extendedIterateShadowHosts(n);
>>                 collectUndefinedElements(n);
>>             });
>>             additions.forEach(
>>                 (node) => isCustomElement(node) && recordUndefinedElement(node)
>>             );
>>         }
>>         function handleHugeTreeMutations(root) {
>>             const styles = new Set(getManageableStyles(root));
>>             const createdStyles = new Set();
>>             const removedStyles = new Set();
>>             const movedStyles = new Set();
>>             styles.forEach((s) => {
>>                 if (!prevStyles.has(s)) {
>>                     createdStyles.add(s);
>>                 }
>>             });
>>             prevStyles.forEach((s) => {
>>                 if (!styles.has(s)) {
>>                     removedStyles.add(s);
>>                 }
>>             });
>>             styles.forEach((s) => {
>>                 if (
>>                     !createdStyles.has(s) &&
>>                     !removedStyles.has(s) &&
>>                     didStylePositionChange(s)
>>                 ) {
>>                     movedStyles.add(s);
>>                 }
>>             });
>>             handleStyleOperations({createdStyles, removedStyles, movedStyles});
>>             extendedIterateShadowHosts(root);
>>             collectUndefinedElements(root);
>>         }
>>         function handleAttributeMutations(mutations) {
>>             const updatedStyles = new Set();
>>             const removedStyles = new Set();
>>             mutations.forEach((m) => {
>>                 const {target} = m;
>>                 if (target.isConnected) {
>>                     if (shouldManageStyle(target)) {
>>                         updatedStyles.add(target);
>>                     } else if (
>>                         target instanceof HTMLLinkElement &&
>>                         target.disabled
>>                     ) {
>>                         removedStyles.add(target);
>>                     }
>>                 }
>>             });
>>             if (updatedStyles.size + removedStyles.size > 0) {
>>                 update({
>>                     updated: Array.from(updatedStyles),
>>                     created: [],
>>                     removed: Array.from(removedStyles),
>>                     moved: []
>>                 });
>>             }
>>         }
>>         function observe(root) {
>>             if (observedRoots.has(root)) {
>>                 return;
>>             }
>>             const treeObserver = createOptimizedTreeObserver(root, {
>>                 onMinorMutations: handleMinorTreeMutations,
>>                 onHugeMutations: handleHugeTreeMutations
>>             });
>>             const attrObserver = new MutationObserver(handleAttributeMutations);
>>             attrObserver.observe(root, {
>>                 attributeFilter: ["rel", "disabled", "media", "href"],
>>                 subtree: true
>>             });
>>             observers.push(treeObserver, attrObserver);
>>             observedRoots.add(root);
>>         }
>>         function subscribeForShadowRootChanges(node) {
>>             const {shadowRoot} = node;
>>             if (shadowRoot == null || observedRoots.has(shadowRoot)) {
>>                 return;
>>             }
>>             observe(shadowRoot);
>>             shadowRootDiscovered(shadowRoot);
>>         }
>>         function extendedIterateShadowHosts(node) {
>>             iterateShadowHosts(node, subscribeForShadowRootChanges);
>>         }
>>         observe(document);
>>         extendedIterateShadowHosts(document.documentElement);
>>         watchWhenCustomElementsDefined((hosts) => {
>>             const newStyles = [];
>>             hosts.forEach((host) =>
>>                 push(newStyles, getManageableStyles(host.shadowRoot))
>>             );
>>             update({created: newStyles, updated: [], removed: [], moved: []});
>>             hosts.forEach((host) => {
>>                 const {shadowRoot} = host;
>>                 if (shadowRoot == null) {
>>                     return;
>>                 }
>>                 subscribeForShadowRootChanges(host);
>>                 extendedIterateShadowHosts(shadowRoot);
>>                 collectUndefinedElements(shadowRoot);
>>             });
>>         });
>>         document.addEventListener("__darkreader__isDefined", handleIsDefined, {
>>             passive: true
>>         });
>>         collectUndefinedElements(document);
>>     }
>>     function resetObservers() {
>>         observers.forEach((o) => o.disconnect());
>>         observers.splice(0, observers.length);
>>         observedRoots = new WeakSet();
>>     }
>>     function stopWatchingForStyleChanges() {
>>         resetObservers();
>>         unsubscribeFromDefineCustomElements();
>>     }
>>
>>     const overrides = new WeakSet();
>>     function hasAdoptedStyleSheets(node) {
>>         return (
>>             Array.isArray(node.adoptedStyleSheets) &&
>>             node.adoptedStyleSheets.length > 0
>>         );
>>     }
>>     function createAdoptedStyleSheetOverride(node) {
>>         let cancelAsyncOperations = false;
>>         function iterateSourceSheets(iterator) {
>>             node.adoptedStyleSheets.forEach((sheet) => {
>>                 if (!overrides.has(sheet)) {
>>                     iterator(sheet);
>>                 }
>>             });
>>         }
>>         function injectSheet(sheet, override) {
>>             const newSheets = [...node.adoptedStyleSheets];
>>             const sheetIndex = newSheets.indexOf(sheet);
>>             const overrideIndex = newSheets.indexOf(override);
>>             if (overrideIndex >= 0) {
>>                 newSheets.splice(overrideIndex, 1);
>>             }
>>             newSheets.splice(sheetIndex + 1, 0, override);
>>             node.adoptedStyleSheets = newSheets;
>>         }
>>         function clear() {
>>             const newSheets = [...node.adoptedStyleSheets];
>>             for (let i = newSheets.length - 1; i >= 0; i--) {
>>                 const sheet = newSheets[i];
>>                 if (overrides.has(sheet)) {
>>                     newSheets.splice(i, 1);
>>                     overrides.delete(sheet);
>>                 }
>>             }
>>             if (node.adoptedStyleSheets.length !== newSheets.length) {
>>                 node.adoptedStyleSheets = newSheets;
>>             }
>>         }
>>         function destroy() {
>>             cancelAsyncOperations = true;
>>             clear();
>>             if (frameId) {
>>                 cancelAnimationFrame(frameId);
>>                 frameId = null;
>>             }
>>         }
>>         let rulesChangeKey = 0;
>>         function getRulesChangeKey() {
>>             let count = 0;
>>             iterateSourceSheets((sheet) => {
>>                 count += sheet.cssRules.length;
>>             });
>>             if (count === 1) {
>>                 const rule = node.adoptedStyleSheets[0].cssRules[0];
>>                 return rule instanceof CSSStyleRule ? rule.style.length : count;
>>             }
>>             return count;
>>         }
>>         function render(theme, ignoreImageAnalysis) {
>>             clear();
>>             for (let i = node.adoptedStyleSheets.length - 1; i >= 0; i--) {
>>                 const sheet = node.adoptedStyleSheets[i];
>>                 if (overrides.has(sheet)) {
>>                     continue;
>>                 }
>>                 const rules = sheet.cssRules;
>>                 const override = new CSSStyleSheet();
>>                 const prepareSheet = () => {
>>                     for (let i = override.cssRules.length - 1; i >= 0;i--) {
>>                         override.deleteRule(i);
>>                     }
>>                     injectSheet(sheet, override);
>>                     overrides.add(override);
>>                     return override;
>>                 };
>>                 const sheetModifier = createStyleSheetModifier();
>>                 sheetModifier.modifySheet({
>>                     prepareSheet,
>>                     sourceCSSRules: rules,
>>                     theme,
>>                     ignoreImageAnalysis,
>>                     force: false,
>>                     isAsyncCancelled: () => cancelAsyncOperations
>>                 });
>>             }
>>             rulesChangeKey = getRulesChangeKey();
>>         }
>>         function checkForUpdates() {
>>             return getRulesChangeKey() !== rulesChangeKey;
>>         }
>>         let frameId = null;
>>         function watch(callback) {
>>             frameId = requestAnimationFrame(() => {
>>                 if (checkForUpdates()) {
>>                     const sheets = node.adoptedStyleSheets.filter(
>>                         (s) => !overrides.has(s)
>>                     );
>>                     callback(sheets);
>>                 }
>>                 watch(callback);
>>             });
>>         }
>>         return {
>>             render,
>>             destroy,
>>             watch
>>         };
>>     }
>>
>>     function injectProxy(
>>         enableStyleSheetsProxy,
>>         enableCustomElementRegistryProxy
>>     ) {
>>         document.dispatchEvent(
>>             new CustomEvent("__darkreader__inlineScriptsAllowed")
>>         );
>>         const addRuleDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "addRule"
>>         );
>>         const insertRuleDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "insertRule"
>>         );
>>         const deleteRuleDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "deleteRule"
>>         );
>>         const removeRuleDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "removeRule"
>>         );
>>         const replaceDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "replace"
>>         );
>>         const replaceSyncDescriptor = Object.getOwnPropertyDescriptor(
>>             CSSStyleSheet.prototype,
>>             "replaceSync"
>>         );
>>         const documentStyleSheetsDescriptor = enableStyleSheetsProxy
>>             ? Object.getOwnPropertyDescriptor(Document.prototype, "styleSheets")
>>             : null;
>>         const customElementRegistryDefineDescriptor =
>>             enableCustomElementRegistryProxy
>>                 ? Object.getOwnPropertyDescriptor(
>>                       CustomElementRegistry.prototype,
>>                       "define"
>>                   )
>>                 : null;
>>         const shouldWrapHTMLElement = [
>>             "baidu.com",
>>             "baike.baidu.com",
>>             "ditu.baidu.com",
>>             "map.baidu.com",
>>             "maps.baidu.com",
>>             "haokan.baidu.com",
>>             "pan.baidu.com",
>>             "passport.baidu.com",
>>             "tieba.baidu.com",
>>             "www.baidu.com"
>>         ].includes(location.hostname);
>>         const getElementsByTagNameDescriptor = shouldWrapHTMLElement
>>             ? Object.getOwnPropertyDescriptor(
>>                   Element.prototype,
>>                   "getElementsByTagName"
>>               )
>>             : null;
>>         const shouldProxyChildNodes = location.hostname === "www.vy.no";
>>         const childNodesDescriptor = shouldProxyChildNodes
>>             ? Object.getOwnPropertyDescriptor(Node.prototype, "childNodes")
>>             : null;
>>         const cleaners = [];
>>         const cleanUp = () => {
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "addRule",
>>                 addRuleDescriptor
>>             );
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "insertRule",
>>                 insertRuleDescriptor
>>             );
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "deleteRule",
>>                 deleteRuleDescriptor
>>             );
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "removeRule",
>>                 removeRuleDescriptor
>>             );
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "replace",
>>                 replaceDescriptor
>>             );
>>             Object.defineProperty(
>>                 CSSStyleSheet.prototype,
>>                 "replaceSync",
>>                 replaceSyncDescriptor
>>             );
>>             document.removeEventListener("__darkreader__cleanUp", cleanUp);
>>             document.removeEventListener(
>>                 "__darkreader__addUndefinedResolver",
>>                 addUndefinedResolver
>>             );
>>             document.removeEventListener(
>>                 "__darkreader__blobURLCheckRequest",
>>                 checkBlobURLSupport
>>             );
>>             if (enableStyleSheetsProxy) {
>>                 Object.defineProperty(
>>                     Document.prototype,
>>                     "styleSheets",
>>                     documentStyleSheetsDescriptor
>>                 );
>>             }
>>             if (enableCustomElementRegistryProxy) {
>>                 Object.defineProperty(
>>                     CustomElementRegistry.prototype,
>>                     "define",
>>                     customElementRegistryDefineDescriptor
>>                 );
>>             }
>>             if (shouldWrapHTMLElement) {
>>                 Object.defineProperty(
>>                     Element.prototype,
>>                     "getElementsByTagName",
>>                     getElementsByTagNameDescriptor
>>                 );
>>             }
>>             if (shouldProxyChildNodes) {
>>                 Object.defineProperty(
>>                     Node.prototype,
>>                     "childNodes",
>>                     childNodesDescriptor
>>                 );
>>             }
>>             cleaners.forEach((clean) => clean());
>>             cleaners.splice(0);
>>         };
>>         const addUndefinedResolverInner = (tag) => {
>>             customElements.whenDefined(tag).then(() => {
>>                 document.dispatchEvent(
>>                     new CustomEvent("__darkreader__isDefined", {detail: {tag}})
>>                 );
>>             });
>>         };
>>         const addUndefinedResolver = (e) =>
>>             addUndefinedResolverInner(e.detail.tag);
>>         document.addEventListener("__darkreader__cleanUp", cleanUp, {
>>             passive: true
>>         });
>>         document.addEventListener(
>>             "__darkreader__addUndefinedResolver",
>>             addUndefinedResolver,
>>             {passive: true}
>>         );
>>         document.addEventListener(
>>             "__darkreader__blobURLCheckRequest",
>>             checkBlobURLSupport,
>>             {once: true}
>>         );
>>         const updateSheetEvent = new Event("__darkreader__updateSheet");
>>         function proxyAddRule(selector, style, index) {
>>             addRuleDescriptor.value.call(this, selector, style, index);
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 )
>>             ) {
>>                 this.ownerNode.dispatchEvent(updateSheetEvent);
>>             }
>>             return -1;
>>         }
>>         function proxyInsertRule(rule, index) {
>>             const returnValue = insertRuleDescriptor.value.call(
>>                 this,
>>                 rule,
>>                 index
>>             );
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 )
>>             ) {
>>                 this.ownerNode.dispatchEvent(updateSheetEvent);
>>             }
>>             return returnValue;
>>         }
>>         function proxyDeleteRule(index) {
>>             deleteRuleDescriptor.value.call(this, index);
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 )
>>             ) {
>>                 this.ownerNode.dispatchEvent(updateSheetEvent);
>>             }
>>         }
>>         function proxyRemoveRule(index) {
>>             removeRuleDescriptor.value.call(this, index);
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 )
>>             ) {
>>                 this.ownerNode.dispatchEvent(updateSheetEvent);
>>             }
>>         }
>>         function proxyReplace(cssText) {
>>             const returnValue = replaceDescriptor.value.call(this, cssText);
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 ) &&
>>                 returnValue &&
>>                 returnValue instanceof Promise
>>             ) {
>>                 returnValue.then(() =>
>>                     this.ownerNode.dispatchEvent(updateSheetEvent)
>>                 );
>>             }
>>             return returnValue;
>>         }
>>         function proxyReplaceSync(cssText) {
>>             replaceSyncDescriptor.value.call(this, cssText);
>>             if (
>>                 this.ownerNode &&
>>                 !(
>>                     this.ownerNode.classList &&
>>                     this.ownerNode.classList.contains("darkreader")
>>                 )
>>             ) {
>>                 this.ownerNode.dispatchEvent(updateSheetEvent);
>>             }
>>         }
>>         function proxyDocumentStyleSheets() {
>>             const getCurrentValue = () => {
>>                 const docSheets = documentStyleSheetsDescriptor.get.call(this);
>>                 const filteredSheets = [...docSheets].filter(
>>                     (styleSheet) =>
>>                         styleSheet.ownerNode &&
>>                         !(
>>                             styleSheet.ownerNode.classList &&
>>                             styleSheet.ownerNode.classList.contains(
>>                                 "darkreader"
>>                             )
>>                         )
>>                 );
>>                 filteredSheets.item = (item) => filteredSheets[item];
>>                 return Object.setPrototypeOf(
>>                     filteredSheets,
>>                     StyleSheetList.prototype
>>                 );
>>             };
>>             let elements = getCurrentValue();
>>             const styleSheetListBehavior = {
>>                 get: function (_, property) {
>>                     return getCurrentValue()[property];
>>                 }
>>             };
>>             elements = new Proxy(elements, styleSheetListBehavior);
>>             return elements;
>>         }
>>         function proxyCustomElementRegistryDefine(name, constructor, options) {
>>             addUndefinedResolverInner(name);
>>             customElementRegistryDefineDescriptor.value.call(
>>                 this,
>>                 name,
>>                 constructor,
>>                 options
>>             );
>>         }
>>         function proxyGetElementsByTagName(tagName) {
>>             if (tagName !== "style") {
>>                 return getElementsByTagNameDescriptor.value.call(this,tagName);
>>             }
>>             const getCurrentElementValue = () => {
>>                 const elements = getElementsByTagNameDescriptor.value.call(
>>                     this,
>>                     tagName
>>                 );
>>                 return Object.setPrototypeOf(
>>                     [...elements].filter(
>>                         (element) =>
>>                             element &&
>>                             !(
>>                                 element.classList &&
>>                                 element.classList.contains("darkreader")
>>                             )
>>                     ),
>>                     NodeList.prototype
>>                 );
>>             };
>>             let elements = getCurrentElementValue();
>>             const nodeListBehavior = {
>>                 get: function (_, property) {
>>                     return getCurrentElementValue()[
>>                         Number(property) || property
>>                     ];
>>                 }
>>             };
>>             elements = new Proxy(elements, nodeListBehavior);
>>             return elements;
>>         }
>>         function proxyChildNodes() {
>>             const childNodes = childNodesDescriptor.get.call(this);
>>             return Object.setPrototypeOf(
>>                 [...childNodes].filter((element) => {
>>                     return (
>>                         !element.classList ||
>>                         !element.classList.contains("darkreader")
>>                     );
>>                 }),
>>                 NodeList.prototype
>>             );
>>         }
>>         async function checkBlobURLSupport() {
>>             const svg =
>>                 '<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="transparent"/></svg>';
>>             const bytes = new Uint8Array(svg.length);
>>             for (let i = 0; i < svg.length; i++) {
>>                 bytes[i] = svg.charCodeAt(i);
>>             }
>>             const blob = new Blob([bytes], {type: "image/svg+xml"});
>>             const objectURL = URL.createObjectURL(blob);
>>             let blobURLAllowed;
>>             try {
>>                 const image = new Image();
>>                 await new Promise((resolve, reject) => {
>>                     image.onload = () => resolve();
>>                     image.onerror = () => reject();
>>                     image.src = objectURL;
>>                 });
>>                 blobURLAllowed = true;
>>             } catch (err) {
>>                 blobURLAllowed = false;
>>             }
>>             document.dispatchEvent(
>>                 new CustomEvent("__darkreader__blobURLCheckResponse", {
>>                     detail: {blobURLAllowed}
>>                 })
>>             );
>>         }
>>         Object.defineProperty(CSSStyleSheet.prototype, "addRule", {
>>             ...addRuleDescriptor,
>>             value: proxyAddRule
>>         });
>>         Object.defineProperty(CSSStyleSheet.prototype, "insertRule", {
>>             ...insertRuleDescriptor,
>>             value: proxyInsertRule
>>         });
>>         Object.defineProperty(CSSStyleSheet.prototype, "deleteRule", {
>>             ...deleteRuleDescriptor,
>>             value: proxyDeleteRule
>>         });
>>         Object.defineProperty(CSSStyleSheet.prototype, "removeRule", {
>>             ...removeRuleDescriptor,
>>             value: proxyRemoveRule
>>         });
>>         Object.defineProperty(CSSStyleSheet.prototype, "replace", {
>>             ...replaceDescriptor,
>>             value: proxyReplace
>>         });
>>         Object.defineProperty(CSSStyleSheet.prototype, "replaceSync", {
>>             ...replaceSyncDescriptor,
>>             value: proxyReplaceSync
>>         });
>>         if (enableStyleSheetsProxy) {
>>             Object.defineProperty(Document.prototype, "styleSheets", {
>>                 ...documentStyleSheetsDescriptor,
>>                 get: proxyDocumentStyleSheets
>>             });
>>         }
>>         if (enableCustomElementRegistryProxy) {
>>             Object.defineProperty(CustomElementRegistry.prototype, "define", {
>>                 ...customElementRegistryDefineDescriptor,
>>                 value: proxyCustomElementRegistryDefine
>>             });
>>         }
>>         if (shouldWrapHTMLElement) {
>>             Object.defineProperty(Element.prototype, "getElementsByTagName", {
>>                 ...getElementsByTagNameDescriptor,
>>                 value: proxyGetElementsByTagName
>>             });
>>         }
>>         if (shouldProxyChildNodes) {
>>             Object.defineProperty(Node.prototype, "childNodes", {
>>                 ...childNodesDescriptor,
>>                 get: proxyChildNodes
>>             });
>>         }
>>     }
>>
>>     let documentVisibilityListener = null;
>>     let documentIsVisible_ = !document.hidden;
>>     const listenerOptions = {
>>         capture: true,
>>         passive: true
>>     };
>>     function watchForDocumentVisibility() {
>>         document.addEventListener(
>>             "visibilitychange",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>         window.addEventListener(
>>             "pageshow",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>         window.addEventListener(
>>             "focus",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>     }
>>     function stopWatchingForDocumentVisibility() {
>>         document.removeEventListener(
>>             "visibilitychange",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>         window.removeEventListener(
>>             "pageshow",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>         window.removeEventListener(
>>             "focus",
>>             documentVisibilityListener,
>>             listenerOptions
>>         );
>>     }
>>     function setDocumentVisibilityListener(callback) {
>>         const alreadyWatching = Boolean(documentVisibilityListener);
>>         documentVisibilityListener = () => {
>>             if (!document.hidden) {
>>                 removeDocumentVisibilityListener();
>>                 callback();
>>                 documentIsVisible_ = true;
>>             }
>>         };
>>         if (!alreadyWatching) {
>>             watchForDocumentVisibility();
>>         }
>>     }
>>     function removeDocumentVisibilityListener() {
>>         stopWatchingForDocumentVisibility();
>>         documentVisibilityListener = null;
>>     }
>>     function documentIsVisible() {
>>         return documentIsVisible_;
>>     }
>>
>>     function findRelevantFix(documentURL, fixes) {
>>         if (
>>             !Array.isArray(fixes) ||
>>             fixes.length === 0 ||
>>             fixes[0].url[0] !== "*"
>>         ) {
>>             return null;
>>         }
>>         let maxSpecificity = 0;
>>         let maxSpecificityIndex = null;
>>         for (let i = 1; i < fixes.length; i++) {
>>             if (isURLInList(documentURL, fixes[i].url)) {
>>                 const specificity = fixes[i].url[0].length;
>>                 if (
>>                     maxSpecificityIndex === null ||
>>                     maxSpecificity < specificity
>>                 ) {
>>                     maxSpecificity = specificity;
>>                     maxSpecificityIndex = i;
>>                 }
>>             }
>>         }
>>         return maxSpecificityIndex;
>>     }
>>     function combineFixes(fixes) {
>>         if (fixes.length === 0 || fixes[0].url[0] !== "*") {
>>             return null;
>>         }
>>         function combineArrays(arrays) {
>>             return arrays.filter(Boolean).flat();
>>         }
>>         return {
>>             url: [],
>>             invert: combineArrays(fixes.map((fix) => fix.invert)),
>>             css: fixes
>>                 .map((fix) => fix.css)
>>                 .filter(Boolean)
>>                 .join("\n"),
>>             ignoreInlineStyle: combineArrays(
>>                 fixes.map((fix) => fix.ignoreInlineStyle)
>>             ),
>>             ignoreImageAnalysis: combineArrays(
>>                 fixes.map((fix) => fix.ignoreImageAnalysis)
>>             ),
>>             disableStyleSheetsProxy: fixes.some(
>>                 (fix) => fix.disableStyleSheetsProxy
>>             ),
>>             disableCustomElementRegistryProxy: fixes.some(
>>                 (fix) => fix.disableCustomElementRegistryProxy
>>             )
>>         };
>>     }
>>
>>     const INSTANCE_ID = generateUID();
>>     const styleManagers = new Map();
>>     const adoptedStyleManagers = [];
>>     const adoptedStyleFallbacks = new Map();
>>     let filter = null;
>>     let fixes = null;
>>     let isIFrame = null;
>>     let ignoredImageAnalysisSelectors = [];
>>     let ignoredInlineSelectors = [];
>>     function createOrUpdateStyle(className, root = document.head || document) {
>>         let element = root.querySelector(`.${className}`);
>>         if (!element) {
>>             element = document.createElement("style");
>>             element.classList.add("darkreader");
>>             element.classList.add(className);
>>             element.media = "screen";
>>             element.textContent = "";
>>         }
>>         return element;
>>     }
>>     function createOrUpdateScript(className, root = document.head || document) {
>>         let element = root.querySelector(`.${className}`);
>>         if (!element) {
>>             element = document.createElement("script");
>>             element.classList.add("darkreader");
>>             element.classList.add(className);
>>         }
>>         return element;
>>     }
>>     const nodePositionWatchers = new Map();
>>     function setupNodePositionWatcher(node, alias) {
>>         nodePositionWatchers.has(alias) &&
>>             nodePositionWatchers.get(alias).stop();
>>         nodePositionWatchers.set(alias, watchForNodePosition(node, "head"));
>>     }
>>     function stopStylePositionWatchers() {
>>         forEach(nodePositionWatchers.values(), (watcher) => watcher.stop());
>>         nodePositionWatchers.clear();
>>     }
>>     function createStaticStyleOverrides() {
>>         const fallbackStyle = createOrUpdateStyle(
>>             "darkreader--fallback",
>>             document
>>         );
>>         fallbackStyle.textContent = getModifiedFallbackStyle(filter, {
>>             strict: true
>>         });
>>         document.head.insertBefore(fallbackStyle, document.head.firstChild);
>>         setupNodePositionWatcher(fallbackStyle, "fallback");
>>         const userAgentStyle = createOrUpdateStyle("darkreader--user-agent");
>>         userAgentStyle.textContent = getModifiedUserAgentStyle(
>>             filter,
>>             isIFrame,
>>             filter.styleSystemControls
>>         );
>>         document.head.insertBefore(userAgentStyle, fallbackStyle.nextSibling);
>>         setupNodePositionWatcher(userAgentStyle, "user-agent");
>>         const textStyle = createOrUpdateStyle("darkreader--text");
>>         if (filter.useFont || filter.textStroke > 0) {
>>             textStyle.textContent = createTextStyle(filter);
>>         } else {
>>             textStyle.textContent = "";
>>         }
>>         document.head.insertBefore(textStyle, fallbackStyle.nextSibling);
>>         setupNodePositionWatcher(textStyle, "text");
>>         const invertStyle = createOrUpdateStyle("darkreader--invert");
>>         if (fixes && Array.isArray(fixes.invert) && fixes.invert.length > 0) {
>>             invertStyle.textContent = [
>>                 `${fixes.invert.join(", ")} {`,
>>                 `    filter: ${getCSSFilterValue({
>>                     ...filter,
>>                     contrast:
>>                         filter.mode === 0
>>                             ? filter.contrast
>>                             : clamp(filter.contrast - 10, 0, 100)
>>                 })} !important;`,
>>                 "}"
>>             ].join("\n");
>>         } else {
>>             invertStyle.textContent = "";
>>         }
>>         document.head.insertBefore(invertStyle, textStyle.nextSibling);
>>         setupNodePositionWatcher(invertStyle, "invert");
>>         const inlineStyle = createOrUpdateStyle("darkreader--inline");
>>         inlineStyle.textContent = getInlineOverrideStyle();
>>         document.head.insertBefore(inlineStyle, invertStyle.nextSibling);
>>         setupNodePositionWatcher(inlineStyle, "inline");
>>         const overrideStyle = createOrUpdateStyle("darkreader--override");
>>         overrideStyle.textContent =
>>             fixes && fixes.css ? replaceCSSTemplates(fixes.css) : "";
>>         document.head.appendChild(overrideStyle);
>>         setupNodePositionWatcher(overrideStyle, "override");
>>         const variableStyle = createOrUpdateStyle("darkreader--variables");
>>         const selectionColors = getSelectionColor(filter);
>>         const {
>>             darkSchemeBackgroundColor,
>>             darkSchemeTextColor,
>>             lightSchemeBackgroundColor,
>>             lightSchemeTextColor,
>>             mode
>>         } = filter;
>>         let schemeBackgroundColor =
>>             mode === 0 ? lightSchemeBackgroundColor : darkSchemeBackgroundColor;
>>         let schemeTextColor =
>>             mode === 0 ? lightSchemeTextColor : darkSchemeTextColor;
>>         schemeBackgroundColor = modifyBackgroundColor(
>>             parseColorWithCache(schemeBackgroundColor),
>>             filter
>>         );
>>         schemeTextColor = modifyForegroundColor(
>>             parseColorWithCache(schemeTextColor),
>>             filter
>>         );
>>         variableStyle.textContent = [
>>             `:root {`,
>>             `   --darkreader-neutral-background: ${schemeBackgroundColor};`,
>>             `   --darkreader-neutral-text: ${schemeTextColor};`,
>>             `   --darkreader-selection-background: ${selectionColors.backgroundColorSelection};`,
>>             `   --darkreader-selection-text: ${selectionColors.foregroundColorSelection};`,
>>             `}`
>>         ].join("\n");
>>         document.head.insertBefore(variableStyle, inlineStyle.nextSibling);
>>         setupNodePositionWatcher(variableStyle, "variables");
>>         const rootVarsStyle = createOrUpdateStyle("darkreader--root-vars");
>>         document.head.insertBefore(rootVarsStyle, variableStyle.nextSibling);
>>         const enableStyleSheetsProxy = !(
>>             fixes && fixes.disableStyleSheetsProxy
>>         );
>>         const enableCustomElementRegistryProxy = !(
>>             fixes && fixes.disableCustomElementRegistryProxy
>>         );
>>         {
>>             const proxyScript = createOrUpdateScript("darkreader--proxy");
>>             proxyScript.append(
>>                 `(${injectProxy})(${enableStyleSheetsProxy}, ${enableCustomElementRegistryProxy})`
>>             );
>>             document.head.insertBefore(proxyScript, rootVarsStyle.nextSibling);
>>             proxyScript.remove();
>>         }
>>     }
>>     const shadowRootsWithOverrides = new Set();
>>     function createShadowStaticStyleOverridesInner(root) {
>>         const inlineStyle = createOrUpdateStyle("darkreader--inline", root);
>>         inlineStyle.textContent = getInlineOverrideStyle();
>>         root.insertBefore(inlineStyle, root.firstChild);
>>         const overrideStyle = createOrUpdateStyle("darkreader--override", root);
>>         overrideStyle.textContent =
>>             fixes && fixes.css ? replaceCSSTemplates(fixes.css) : "";
>>         root.insertBefore(overrideStyle, inlineStyle.nextSibling);
>>         const invertStyle = createOrUpdateStyle("darkreader--invert", root);
>>         if (fixes && Array.isArray(fixes.invert) && fixes.invert.length > 0) {
>>             invertStyle.textContent = [
>>                 `${fixes.invert.join(", ")} {`,
>>                 `    filter: ${getCSSFilterValue({
>>                     ...filter,
>>                     contrast:
>>                         filter.mode === 0
>>                             ? filter.contrast
>>                             : clamp(filter.contrast - 10, 0, 100)
>>                 })} !important;`,
>>                 "}"
>>             ].join("\n");
>>         } else {
>>             invertStyle.textContent = "";
>>         }
>>         root.insertBefore(invertStyle, overrideStyle.nextSibling);
>>         shadowRootsWithOverrides.add(root);
>>     }
>>     function delayedCreateShadowStaticStyleOverrides(root) {
>>         const observer = new MutationObserver((mutations, observer) =>{
>>             observer.disconnect();
>>             for (const {type, removedNodes} of mutations) {
>>                 if (type === "childList") {
>>                     for (const {nodeName, className} of removedNodes) {
>>                         if (
>>                             nodeName === "STYLE" &&
>>                             [
>>                                 "darkreader darkreader--inline",
>>                                 "darkreader darkreader--override",
>>                                 "darkreader darkreader--invert"
>>                             ].includes(className)
>>                         ) {
>>                             createShadowStaticStyleOverridesInner(root);
>>                             return;
>>                         }
>>                     }
>>                 }
>>             }
>>         });
>>         observer.observe(root, {childList: true});
>>     }
>>     function createShadowStaticStyleOverrides(root) {
>>         const uninit = root.firstChild === null;
>>         createShadowStaticStyleOverridesInner(root);
>>         if (uninit) {
>>             delayedCreateShadowStaticStyleOverrides(root);
>>         }
>>     }
>>     function replaceCSSTemplates($cssText) {
>>         return $cssText.replace(/\${(.+?)}/g, (_, $color) => {
>>             const color = parseColorWithCache($color);
>>             if (color) {
>>                 return modifyColor(color, filter);
>>             }
>>             return $color;
>>         });
>>     }
>>     function cleanFallbackStyle() {
>>         const fallback = document.querySelector(".darkreader--fallback");
>>         if (fallback) {
>>             fallback.textContent = "";
>>         }
>>     }
>>     function createDynamicStyleOverrides() {
>>         cancelRendering();
>>         const allStyles = getManageableStyles(document);
>>         const newManagers = allStyles
>>             .filter((style) => !styleManagers.has(style))
>>             .map((style) => createManager(style));
>>         newManagers
>>             .map((manager) => manager.details({secondRound: false}))
>>             .filter((detail) => detail && detail.rules.length > 0)
>>             .forEach((detail) => {
>>                 variablesStore.addRulesForMatching(detail.rules);
>>             });
>>         variablesStore.matchVariablesAndDependents();
>>         variablesStore.setOnRootVariableChange(() => {
>>             const rootVarsStyle = createOrUpdateStyle("darkreader--root-vars");
>>             variablesStore.putRootVars(rootVarsStyle, filter);
>>         });
>>         const rootVarsStyle = createOrUpdateStyle("darkreader--root-vars");
>>         variablesStore.putRootVars(rootVarsStyle, filter);
>>         styleManagers.forEach((manager) =>
>>             manager.render(filter, ignoredImageAnalysisSelectors)
>>         );
>>         if (loadingStyles.size === 0) {
>>             cleanFallbackStyle();
>>         }
>>         newManagers.forEach((manager) => manager.watch());
>>         const inlineStyleElements = toArray(
>>             document.querySelectorAll(INLINE_STYLE_SELECTOR)
>>         );
>>         iterateShadowHosts(document.documentElement, (host) => {
>>             createShadowStaticStyleOverrides(host.shadowRoot);
>>             const elements = host.shadowRoot.querySelectorAll(
>>                 INLINE_STYLE_SELECTOR
>>             );
>>             if (elements.length > 0) {
>>                 push(inlineStyleElements, elements);
>>             }
>>         });
>>         inlineStyleElements.forEach((el) =>
>>             overrideInlineStyle(
>>                 el,
>>                 filter,
>>                 ignoredInlineSelectors,
>>                 ignoredImageAnalysisSelectors
>>             )
>>         );
>>         handleAdoptedStyleSheets(document);
>>         variablesStore.matchVariablesAndDependents();
>>     }
>>     let loadingStylesCounter = 0;
>>     const loadingStyles = new Set();
>>     function createManager(element) {
>>         const loadingStyleId = ++loadingStylesCounter;
>>         function loadingStart() {
>>             if (!isDOMReady() || !documentIsVisible()) {
>>                 loadingStyles.add(loadingStyleId);
>>                 logInfo(
>>                     `Current amount of styles loading: ${loadingStyles.size}`
>>                 );
>>                 const fallbackStyle = document.querySelector(
>>                     ".darkreader--fallback"
>>                 );
>>                 if (!fallbackStyle.textContent) {
>>                     fallbackStyle.textContent = getModifiedFallbackStyle(
>>                         filter,
>>                         {strict: false}
>>                     );
>>                 }
>>             }
>>         }
>>         function loadingEnd() {
>>             loadingStyles.delete(loadingStyleId);
>>             logInfo(
>>                 `Removed loadingStyle ${loadingStyleId}, now awaiting:${loadingStyles.size}`
>>             );
>>             if (loadingStyles.size === 0 && isDOMReady()) {
>>                 cleanFallbackStyle();
>>             }
>>         }
>>         function update() {
>>             const details = manager.details({secondRound: true});
>>             if (!details) {
>>                 return;
>>             }
>>             variablesStore.addRulesForMatching(details.rules);
>>             variablesStore.matchVariablesAndDependents();
>>             manager.render(filter, ignoredImageAnalysisSelectors);
>>         }
>>         const manager = manageStyle(element, {
>>             update,
>>             loadingStart,
>>             loadingEnd
>>         });
>>         styleManagers.set(element, manager);
>>         return manager;
>>     }
>>     function removeManager(element) {
>>         const manager = styleManagers.get(element);
>>         if (manager) {
>>             manager.destroy();
>>             styleManagers.delete(element);
>>         }
>>     }
>>     const throttledRenderAllStyles = throttle((callback) => {
>>         styleManagers.forEach((manager) =>
>>             manager.render(filter, ignoredImageAnalysisSelectors)
>>         );
>>         adoptedStyleManagers.forEach((manager) =>
>>             manager.render(filter, ignoredImageAnalysisSelectors)
>>         );
>>         callback && callback();
>>     });
>>     const cancelRendering = function () {
>>         throttledRenderAllStyles.cancel();
>>     };
>>     function onDOMReady() {
>>         if (loadingStyles.size === 0) {
>>             cleanFallbackStyle();
>>             return;
>>         }
>>     }
>>     function runDynamicStyle() {
>>         createDynamicStyleOverrides();
>>         watchForUpdates();
>>     }
>>     function createThemeAndWatchForUpdates() {
>>         createStaticStyleOverrides();
>>         if (!documentIsVisible() && !filter.immediateModify) {
>>             setDocumentVisibilityListener(runDynamicStyle);
>>         } else {
>>             runDynamicStyle();
>>         }
>>         changeMetaThemeColorWhenAvailable(filter);
>>     }
>>     let pendingAdoptedVarMatch = false;
>>     function handleAdoptedStyleSheets(node) {
>>         const theme = filter;
>>         if (hasAdoptedStyleSheets(node)) {
>>             node.adoptedStyleSheets.forEach((s) => {
>>                 variablesStore.addRulesForMatching(s.cssRules);
>>             });
>>             const newManger = createAdoptedStyleSheetOverride(node);
>>             adoptedStyleManagers.push(newManger);
>>             newManger.render(theme, ignoredImageAnalysisSelectors);
>>             newManger.watch((sheets) => {
>>                 sheets.forEach((s) => {
>>                     variablesStore.addRulesForMatching(s.cssRules);
>>                 });
>>                 newManger.render(theme, ignoredImageAnalysisSelectors);
>>                 pendingAdoptedVarMatch = true;
>>             });
>>             potentialAdoptedStyleNodes.delete(node);
>>         } else if (!potentialAdoptedStyleNodes.has(node)) {
>>             potentialAdoptedStyleNodes.add(node);
>>         }
>>     }
>>     const potentialAdoptedStyleNodes = new Set();
>>     let potentialAdoptedStyleFrameId = null;
>>     function watchPotentialAdoptedStyleNodes() {
>>         potentialAdoptedStyleFrameId = requestAnimationFrame(() => {
>>             let changed = false;
>>             potentialAdoptedStyleNodes.forEach((node) => {
>>                 if (node.isConnected) {
>>                     handleAdoptedStyleSheets(node);
>>                     changed = true;
>>                 } else {
>>                     potentialAdoptedStyleNodes.delete(node);
>>                 }
>>             });
>>             if (changed || pendingAdoptedVarMatch) {
>>                 variablesStore.matchVariablesAndDependents();
>>                 pendingAdoptedVarMatch = false;
>>             }
>>             watchPotentialAdoptedStyleNodes();
>>         });
>>     }
>>     function stopWatchingPotentialAdoptedStyleNodes() {
>>         potentialAdoptedStyleFrameId &&
>>             cancelAnimationFrame(potentialAdoptedStyleFrameId);
>>         potentialAdoptedStyleNodes.clear();
>>     }
>>     function watchForUpdates() {
>>         const managedStyles = Array.from(styleManagers.keys());
>>         watchForStyleChanges(
>>             managedStyles,
>>             ({created, updated, removed, moved}) => {
>>                 const stylesToRemove = removed;
>>                 const stylesToManage = created
>>                     .concat(updated)
>>                     .concat(moved)
>>                     .filter((style) => !styleManagers.has(style));
>>                 const stylesToRestore = moved.filter((style) =>
>>                     styleManagers.has(style)
>>                 );
>>                 stylesToRemove.forEach((style) => removeManager(style));
>>                 const newManagers = stylesToManage.map((style) =>
>>                     createManager(style)
>>                 );
>>                 newManagers
>>                     .map((manager) => manager.details({secondRound: false}))
>>                     .filter((detail) => detail && detail.rules.length > 0)
>>                     .forEach((detail) => {
>>                         variablesStore.addRulesForMatching(detail.rules);
>>                     });
>>                 variablesStore.matchVariablesAndDependents();
>>                 newManagers.forEach((manager) =>
>>                     manager.render(filter, ignoredImageAnalysisSelectors)
>>                 );
>>                 newManagers.forEach((manager) => manager.watch());
>>                 stylesToRestore.forEach((style) =>
>>                     styleManagers.get(style).restore()
>>                 );
>>             },
>>             (shadowRoot) => {
>>                 createShadowStaticStyleOverrides(shadowRoot);
>>                 handleAdoptedStyleSheets(shadowRoot);
>>             }
>>         );
>>         watchPotentialAdoptedStyleNodes();
>>         watchForInlineStyles(
>>             (element) => {
>>                 overrideInlineStyle(
>>                     element,
>>                     filter,
>>                     ignoredInlineSelectors,
>>                     ignoredImageAnalysisSelectors
>>                 );
>>                 if (element === document.documentElement) {
>>                     const styleAttr = element.getAttribute("style") ||"";
>>                     if (styleAttr.includes("--")) {
>>                         variablesStore.matchVariablesAndDependents();
>>                         const rootVarsStyle = createOrUpdateStyle(
>>                             "darkreader--root-vars"
>>                         );
>>                         variablesStore.putRootVars(rootVarsStyle, filter);
>>                     }
>>                 }
>>             },
>>             (root) => {
>>                 createShadowStaticStyleOverrides(root);
>>                 const inlineStyleElements = root.querySelectorAll(
>>                     INLINE_STYLE_SELECTOR
>>                 );
>>                 if (inlineStyleElements.length > 0) {
>>                     forEach(inlineStyleElements, (el) =>
>>                         overrideInlineStyle(
>>                             el,
>>                             filter,
>>                             ignoredInlineSelectors,
>>                             ignoredImageAnalysisSelectors
>>                         )
>>                     );
>>                 }
>>             }
>>         );
>>         addDOMReadyListener(onDOMReady);
>>     }
>>     function stopWatchingForUpdates() {
>>         styleManagers.forEach((manager) => manager.pause());
>>         stopStylePositionWatchers();
>>         stopWatchingForStyleChanges();
>>         stopWatchingForInlineStyles();
>>         removeDOMReadyListener(onDOMReady);
>>         cleanReadyStateCompleteListeners();
>>     }
>>     let metaObserver;
>>     function addMetaListener() {
>>         metaObserver = new MutationObserver(() => {
>>             if (document.querySelector('meta[name="darkreader-lock"]')) {
>>                 metaObserver.disconnect();
>>                 removeDynamicTheme();
>>             }
>>         });
>>         metaObserver.observe(document.head, {childList: true, subtree:true});
>>     }
>>     function createDarkReaderInstanceMarker() {
>>         const metaElement = document.createElement("meta");
>>         metaElement.name = "darkreader";
>>         metaElement.content = INSTANCE_ID;
>>         document.head.appendChild(metaElement);
>>     }
>>     function isAnotherDarkReaderInstanceActive() {
>>         if (document.querySelector('meta[name="darkreader-lock"]')) {
>>             return true;
>>         }
>>         const meta = document.querySelector('meta[name="darkreader"]');
>>         if (meta) {
>>             if (meta.content !== INSTANCE_ID) {
>>                 return true;
>>             }
>>             return false;
>>         }
>>         createDarkReaderInstanceMarker();
>>         addMetaListener();
>>         return false;
>>     }
>>     function selectRelevantFix(documentURL, fixes) {
>>         if (!fixes) {
>>             return null;
>>         }
>>         if (fixes.length === 0 || fixes[0].url[0] !== "*") {
>>             return null;
>>         }
>>         const relevantFixIndex = findRelevantFix(documentURL, fixes);
>>         return relevantFixIndex
>>             ? combineFixes([fixes[0], fixes[relevantFixIndex]])
>>             : fixes[0];
>>     }
>>     function createOrUpdateDynamicTheme(
>>         filterConfig,
>>         dynamicThemeFixes,
>>         iframe
>>     ) {
>>         const dynamicThemeFix = selectRelevantFix(
>>             document.location.href,
>>             dynamicThemeFixes
>>         );
>>         createOrUpdateDynamicThemeInternal(
>>             filterConfig,
>>             dynamicThemeFix,
>>             iframe
>>         );
>>     }
>>     function createOrUpdateDynamicThemeInternal(
>>         filterConfig,
>>         dynamicThemeFixes,
>>         iframe
>>     ) {
>>         filter = filterConfig;
>>         fixes = dynamicThemeFixes;
>>         if (fixes) {
>>             ignoredImageAnalysisSelectors = Array.isArray(
>>                 fixes.ignoreImageAnalysis
>>             )
>>                 ? fixes.ignoreImageAnalysis
>>                 : [];
>>             ignoredInlineSelectors = Array.isArray(fixes.ignoreInlineStyle)
>>                 ? fixes.ignoreInlineStyle
>>                 : [];
>>         } else {
>>             ignoredImageAnalysisSelectors = [];
>>             ignoredInlineSelectors = [];
>>         }
>>         if (filter.immediateModify) {
>>             setIsDOMReady(() => {
>>                 return true;
>>             });
>>         }
>>         isIFrame = iframe;
>>         if (document.head) {
>>             if (isAnotherDarkReaderInstanceActive()) {
>>                 removeDynamicTheme();
>>                 return;
>>             }
>>             document.documentElement.setAttribute(
>>                 "data-darkreader-mode",
>>                 "dynamic"
>>             );
>>             document.documentElement.setAttribute(
>>                 "data-darkreader-scheme",
>>                 filter.mode ? "dark" : "dimmed"
>>             );
>>             createThemeAndWatchForUpdates();
>>         } else {
>>             {
>>                 const fallbackStyle = createOrUpdateStyle(
>>                     "darkreader--fallback"
>>                 );
>>                 document.documentElement.appendChild(fallbackStyle);
>>                 fallbackStyle.textContent = getModifiedFallbackStyle(filter, {
>>                     strict: true
>>                 });
>>             }
>>             const headObserver = new MutationObserver(() => {
>>                 if (document.head) {
>>                     headObserver.disconnect();
>>                     if (isAnotherDarkReaderInstanceActive()) {
>>                         removeDynamicTheme();
>>                         return;
>>                     }
>>                     createThemeAndWatchForUpdates();
>>                 }
>>             });
>>             headObserver.observe(document, {childList: true, subtree: true});
>>         }
>>     }
>>     function removeProxy() {
>>         document.dispatchEvent(new CustomEvent("__darkreader__cleanUp"));
>>         removeNode(document.head.querySelector(".darkreader--proxy"));
>>     }
>>     const cleaners = [];
>>     function removeDynamicTheme() {
>>         document.documentElement.removeAttribute(`data-darkreader-mode`);
>>         document.documentElement.removeAttribute(`data-darkreader-scheme`);
>>         cleanDynamicThemeCache();
>>         removeNode(document.querySelector(".darkreader--fallback"));
>>         if (document.head) {
>>             restoreMetaThemeColor();
>>             removeNode(document.head.querySelector(".darkreader--user-agent"));
>>             removeNode(document.head.querySelector(".darkreader--text"));
>>             removeNode(document.head.querySelector(".darkreader--invert"));
>>             removeNode(document.head.querySelector(".darkreader--inline"));
>>             removeNode(document.head.querySelector(".darkreader--override"));
>>             removeNode(document.head.querySelector(".darkreader--variables"));
>>             removeNode(document.head.querySelector(".darkreader--root-vars"));
>>             removeNode(document.head.querySelector('meta[name="darkreader"]'));
>>             removeProxy();
>>         }
>>         shadowRootsWithOverrides.forEach((root) => {
>>             removeNode(root.querySelector(".darkreader--inline"));
>>             removeNode(root.querySelector(".darkreader--override"));
>>         });
>>         shadowRootsWithOverrides.clear();
>>         forEach(styleManagers.keys(), (el) => removeManager(el));
>>         loadingStyles.clear();
>>         cleanLoadingLinks();
>>         forEach(document.querySelectorAll(".darkreader"), removeNode);
>>         adoptedStyleManagers.forEach((manager) => manager.destroy());
>>         adoptedStyleManagers.splice(0);
>>         adoptedStyleFallbacks.forEach((fallback) => fallback.destroy());
>>         adoptedStyleFallbacks.clear();
>>         stopWatchingPotentialAdoptedStyleNodes();
>>         metaObserver && metaObserver.disconnect();
>>         cleaners.forEach((clean) => clean());
>>         cleaners.splice(0);
>>     }
>>     function cleanDynamicThemeCache() {
>>         variablesStore.clear();
>>         parsedURLCache.clear();
>>         removeDocumentVisibilityListener();
>>         cancelRendering();
>>         stopWatchingForUpdates();
>>         cleanModificationCache();
>>         clearColorCache();
>>     }
>>
>>     const blobRegex = /url\(\"(blob\:.*?)\"\)/g;
>>     async function replaceBlobs(text) {
>>         const promises = [];
>>         getMatches(blobRegex, text, 1).forEach((url) => {
>>             const promise = loadAsDataURL(url);
>>             promises.push(promise);
>>         });
>>         const data = await Promise.all(promises);
>>         return text.replace(blobRegex, () => `url("${data.shift()}")`);
>>     }
>>     const banner = `/*
>>                         _______
>>                        /       \\
>>                       .==.    .==.
>>                      ((  ))==((  ))
>>                     / "=="    "=="\\
>>                    /____|| || ||___\\
>>        ________     ____    ________  ___    ___
>>        |  ___  \\   /    \\   |  ___  \\ |  |  /  /
>>        |  |  \\  \\ /  /\\  \\  |  |  \\  \\|  |_/  /
>>        |  |   )  /  /__\\  \\ |  |__/  /|  ___  \\
>>        |  |__/  /  ______  \\|  ____  \\|  |  \\  \\
>> _______|_______/__/ ____ \\__\\__|___\\__\\__|___\\__\\____
>> |  ___  \\ |  ____/ /    \\   |  ___  \\ |  ____|  ___  \\
>> |  |  \\  \\|  |___ /  /\\  \\  |  |  \\  \\|  |___|  |  \\  \\
>> |  |__/  /|  ____/  /__\\  \\ |  |   )  |  ____|  |__/  /
>> |  ____  \\|  |__/  ______  \\|  |__/  /|  |___|  ____  \\
>> |__|   \\__\\____/__/      \\__\\_______/ |______|__|   \\__\\
>>                 https://darkreader.org
>> */
>>
>> /*! Dark reader generated CSS | Licensed under MIT https://github.com/darkreader/darkreader/blob/main/LICENSE */
>> `;
>>     async function collectCSS() {
>>         const css = [banner];
>>         function addStaticCSS(selector, comment) {
>>             const staticStyle = document.querySelector(selector);
>>             if (staticStyle && staticStyle.textContent) {
>>                 css.push(`/* ${comment} */`);
>>                 css.push(staticStyle.textContent);
>>                 css.push("");
>>             }
>>         }
>>         addStaticCSS(".darkreader--fallback", "Fallback Style");
>>         addStaticCSS(".darkreader--user-agent", "User-Agent Style");
>>         addStaticCSS(".darkreader--text", "Text Style");
>>         addStaticCSS(".darkreader--invert", "Invert Style");
>>         addStaticCSS(".darkreader--variables", "Variables Style");
>>         const modifiedCSS = [];
>>         document.querySelectorAll(".darkreader--sync").forEach((element) => {
>>             forEach(element.sheet.cssRules, (rule) => {
>>                 rule && rule.cssText && modifiedCSS.push(rule.cssText);
>>             });
>>         });
>>         if (modifiedCSS.length) {
>>             const formattedCSS = formatCSS(modifiedCSS.join("\n"));
>>             css.push("/* Modified CSS */");
>>             css.push(await replaceBlobs(formattedCSS));
>>             css.push("");
>>         }
>>         addStaticCSS(".darkreader--override", "Override Style");
>>         return css.join("\n");
>>     }
>>
>>     let unloaded = false;
>>     const scriptId = generateUID();
>>     function cleanup() {
>>         unloaded = true;
>>         removeEventListener("pagehide", onPageHide);
>>         removeEventListener("freeze", onFreeze);
>>         removeEventListener("resume", onResume);
>>         cleanDynamicThemeCache();
>>         stopDarkThemeDetector();
>>         stopColorSchemeChangeDetector();
>>     }
>>     function sendMessage(message) {
>>         if (unloaded) {
>>             return;
>>         }
>>         const responseHandler = (response) => {
>>             if (response === "unsupportedSender") {
>>                 removeStyle();
>>                 removeSVGFilter();
>>                 removeDynamicTheme();
>>                 cleanup();
>>             }
>>         };
>>         try {
>>             if (false);
>>             else {
>>                 chrome.runtime.sendMessage(message, responseHandler);
>>             }
>>         } catch (error) {
>>             if (error.message === "Extension context invalidated.") {
>>                 console.log(
>>                     "Dark Reader: instance of old CS detected, cleningup."
>>                 );
>>                 cleanup();
>>             } else {
>>                 console.log(
>>                     "Dark Reader: unexpected error during message passing."
>>                 );
>>             }
>>         }
>>     }
>>     function onMessage(message) {
>>         if (
>>             message.scriptId !== scriptId &&
>>             message.type !== MessageTypeUItoCS.EXPORT_CSS
>>         ) {
>>             return;
>>         }
>>         logInfoCollapsed(`onMessage[${message.type}]`, message);
>>         switch (message.type) {
>>             case MessageTypeBGtoCS.ADD_CSS_FILTER:
>>             case MessageTypeBGtoCS.ADD_STATIC_THEME: {
>>                 const {css, detectDarkTheme, detectorHints} = message.data;
>>                 removeDynamicTheme();
>>                 createOrUpdateStyle$1(
>>                     css,
>>                     message.type === MessageTypeBGtoCS.ADD_STATIC_THEME
>>                         ? "static"
>>                         : "filter"
>>                 );
>>                 if (detectDarkTheme) {
>>                     runDarkThemeDetector((hasDarkTheme) => {
>>                         if (hasDarkTheme) {
>>                             removeStyle();
>>                             onDarkThemeDetected();
>>                         }
>>                     }, detectorHints);
>>                 }
>>                 break;
>>             }
>>             case MessageTypeBGtoCS.ADD_SVG_FILTER: {
>>                 const {
>>                     css,
>>                     svgMatrix,
>>                     svgReverseMatrix,
>>                     detectDarkTheme,
>>                     detectorHints
>>                 } = message.data;
>>                 removeDynamicTheme();
>>                 createOrUpdateSVGFilter(svgMatrix, svgReverseMatrix);
>>                 createOrUpdateStyle$1(css, "filter");
>>                 if (detectDarkTheme) {
>>                     runDarkThemeDetector((hasDarkTheme) => {
>>                         if (hasDarkTheme) {
>>                             removeStyle();
>>                             removeSVGFilter();
>>                             onDarkThemeDetected();
>>                         }
>>                     }, detectorHints);
>>                 }
>>                 break;
>>             }
>>             case MessageTypeBGtoCS.ADD_DYNAMIC_THEME: {
>>                 const {theme, fixes, isIFrame, detectDarkTheme, detectorHints} =
>>                     message.data;
>>                 removeStyle();
>>                 createOrUpdateDynamicTheme(theme, fixes, isIFrame);
>>                 if (detectDarkTheme) {
>>                     runDarkThemeDetector((hasDarkTheme) => {
>>                         if (hasDarkTheme) {
>>                             removeDynamicTheme();
>>                             onDarkThemeDetected();
>>                         }
>>                     }, detectorHints);
>>                 }
>>                 break;
>>             }
>>             case MessageTypeUItoCS.EXPORT_CSS:
>>                 collectCSS().then((collectedCSS) =>
>>                     sendMessage({
>>                         type: MessageTypeCStoUI.EXPORT_CSS_RESPONSE,
>>                         data: collectedCSS
>>                     })
>>                 );
>>                 break;
>>             case MessageTypeBGtoCS.UNSUPPORTED_SENDER:
>>             case MessageTypeBGtoCS.CLEAN_UP:
>>                 removeStyle();
>>                 removeSVGFilter();
>>                 removeDynamicTheme();
>>                 stopDarkThemeDetector();
>>                 break;
>>         }
>>     }
>>     function sendConnectionOrResumeMessage(type) {
>>         sendMessage({
>>             type,
>>             scriptId,
>>             data: {
>>                 isDark: isSystemDarkModeEnabled(),
>>                 isTopFrame: window === window.top
>>             }
>>         });
>>     }
>>     runColorSchemeChangeDetector((isDark) =>
>>         sendMessage({
>>             type: MessageTypeCStoBG.COLOR_SCHEME_CHANGE,
>>             data: {isDark}
>>         })
>>     );
>>     chrome.runtime.onMessage.addListener(onMessage);
>>     sendConnectionOrResumeMessage(MessageTypeCStoBG.DOCUMENT_CONNECT);
>>     function onPageHide(e) {
>>         if (e.persisted === false) {
>>             sendMessage({type: MessageTypeCStoBG.DOCUMENT_FORGET, scriptId});
>>         }
>>     }
>>     function onFreeze() {
>>         sendMessage({type: MessageTypeCStoBG.DOCUMENT_FREEZE});
>>     }
>>     function onResume() {
>>         sendConnectionOrResumeMessage(MessageTypeCStoBG.DOCUMENT_RESUME);
>>     }
>>     function onDarkThemeDetected() {
>>         sendMessage({type: MessageTypeCStoBG.DARK_THEME_DETECTED});
>>     }
>>     {
>>         addEventListener("pagehide", onPageHide, {passive: true});
>>         addEventListener("freeze", onFreeze, {passive: true});
>>         addEventListener("resume", onResume, {passive: true});
>>     }
>> })();
>> CLIENTAUTHNAME=863401060570765
>> SERVERID=DISH
>> CLIENTAUTHLEVEL=CLCRED
>>
>> SERVERID=WINGTECH
>>     padding-top: 0!important<!DOCTYPE html>
>> <html lang="en" itemscope="" itemType="http://schema.org/Organization"xmlns="http://www.w3.org/1999/xhtml">
>>     <head>
>>         <script>
>>             if (typeof Object.assign === 'function') {
>>                 window.appInfo = Object.assign(typeof window.appInfo === 'object' ? window.appInfo : {}, {
>>                     "@zillow/page-frame-content": "fe88415b"
>>                 });
>>             }
>>         </script>
>>         <script>
>>             window.CLIENT_PROFILER_CONFIG = window.CLIENT_PROFILER_CONFIG || {
>>                 staticDimensions: {
>>                     ABDecisionToken: "a9oiwm_1706390649",
>>                 },
>>             };
>>         </script>
>>         <script>
>>             (function(i, s, o, g, r, a, m) {
>>                 i['GoogleAnalyticsObject'] = r;
>>                 i[r] = i[r] || function() {
>>                     (i[r].q = i[r].q || []).push(arguments)
>>                 }
>>                 ,
>>                 i[r].l = 1 * new Date();
>>                 a = s.createElement(o),
>>                 m = s.getElementsByTagName(o)[0];
>>                 a.async = 1;
>>                 a.src = g;
>>                 m.parentNode.insertBefore(a, m)
>>             }
>>             )(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
>>         </script>
>>         <script>
>>             window.ga = window.ga || function() {
>>                 (ga.q = ga.q || []).push(arguments)
>>             }
>>             ;
>>             ga.l = +new Date;
>>             ga("create", "UA-21174015-56", "auto", {
>>                 allowLinker: true
>>             });
>>
>>             /* Queue for Global UA Object */
>>             (function(w, n) {
>>                 w[n] = w[n] || function() {
>>                     (w[n].q = w[n].q || []).push(arguments)
>>                 }
>>             }
>>             )(window, 'ua');
>>         </script>
>>         <script>
>>             !function() {
>>                 // Getting OptanonConsent cookie from document.cookie
>>                 var n = !1
>>                   , op = document.cookie && document.cookie.split("; ").filter(function(n) {
>>                     return n.indexOf("OptanonConsent=") === 0;
>>                 });
>>                 try {
>>                     var o = op && op.length > 0 && op[0];
>>                     if (void 0 !== o && null != o) {
>>                         // Parse and read OptanonConsent cookie, look for groups.
>>                         var i = decodeURIComponent(o).split("&").filter(function(n) {
>>                             return n.indexOf("groups=") !== -1;
>>                         });
>>                         if (i.length > 0) {
>>                             // Groups will look like 1:0,3:0,4:0. We want to check if the 3:0 exists, which is the code for functional blocking
>>                             var m = i[0].substring(i[0].indexOf("=")).split(",");
>>                             for (var k = 0; k < m.length; k++) {
>>                                 m[k].split(":").length > 1 && "3" === m[k].split(":")[0] && "0" === m[k].split(":")[1] && (n = !0)
>>                             }
>>                         }
>>                     }
>>                 } catch (e) {}
>>                 ;window['ga-disable-' + 'UA-21174015-56'] = n;
>>                 window['disable-analytics'] = n;
>>             }();
>>
>>             (function(w, d, ns, cdn, opt, ml, fa, my, fst) {
>>                 w['ZillowAnalyticsObject'] = ns;
>>                 w[ns] = w[ns] || [];
>>                 if (w[ns].initialize || w[ns].invoked)
>>                     return;
>>                 w[ns].invoked = 1;
>>                 w[ns]._loadOptions = opt;
>>                 ml = ['identify', 'track', 'page', 'off', 'on', 'use','unuse', 'setdim', 'setprop', 'event', 'send', 'dwell', 'dwellEnd'];
>>                 fa = function(m) {
>>                     return function() {
>>                         w[ns].push([].concat(m, [].slice.call(arguments)));
>>                         return w[ns]
>>                     }
>>                 }
>>                 ;
>>                 ml.forEach(function(mn) {
>>                     w[ns][mn] = fa(mn)
>>                 });
>>                 var x = !(window && window['disable-analytics']);
>>                 if (x) {
>>                     my = d.createElement('script');
>>                     fst = d.getElementsByTagName('script')[0];
>>                     my.async = !0;
>>                     my.src = cdn;
>>                     if (fst)
>>                         fst.parentNode.insertBefore(my, fst);
>>                 }
>>                 return w[ns];
>>             }
>>             )(window, document, 'zanalytics', 'https://e.zg-api.com/a/z/js/v1/analytics.js?v=bcf290c', {
>>                 'zillow': {
>>                     apiKey: 'z_prod',
>>                     writeKey: 'z_prod_web',
>>                     apiHost: 'e.zg-api.com:443',
>>                     secure: true,
>>                     anonymousId: '30d8e80b-fd36-4bec-abbb-3d3d89749eff',
>>                 }
>>             });
>>         </script>
>>         <script>
>>             window.__USER_SESSION_INITIAL_STATE__ = {
>>                 user: {
>>                     loggedIn: true
>>                 }
>>             };
>>         </script>
>>         <script>
>>             var customDimension1 = '30d8e80bfd364becabbb3d3d89749eff/X1-ZUr30yg93ta8zt_3s95i';
>>             ua('set', 'dimension1', customDimension1);
>>             ga('set', 'dimension1', customDimension1);
>>             ua('identify', 'X1-ZUr30yg93ta8zt_3s95i');
>>             ua('set', {
>>                 "dimension179": "AB_DASHBOARD_AA_TEST.ON",
>>                 "dimension170": "AIPERS_COLLECTIONS_UPDATES_TAB.APP_E",
>>                 "dimension174": "AIPERS_ZILLOW_WEB_HOME_PAGE_COLLECTIONS.CONTROL_HOMEPG",
>>                 "dimension47": "ANDROID_HDP_INSIGHTS_VERSION.CONTROL",
>>                 "dimension42": "ARCS_IB_WEB.CONTROL",
>>                 "dimension36": "HDP_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension40": "IOS_HDP_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension41": "IOS_PNG_PARCEL.CONTROL_OFF",
>>                 "dimension56": "IOS_SATELLITE_RACHEL_VIEWATTACHMENTS.CONTROL_OFF",
>>                 "dimension62": "NBA_INF_TEST.CONTROL",
>>                 "dimension180": "ONSITE_MESSAGE_VALVE.OMP_ON",
>>                 "dimension44": "RC_INSTANT_TOUR_IMPROVE_V1.TEST",
>>                 "dimension64": "RC_INSTANT_TOUR_IMPROVE_V2.TEST",
>>                 "dimension186": "RE_Badging_SpecialOffers.CONTROL",
>>                 "dimension165": "RE_CONTACT_FORM.CONTROL",
>>                 "dimension58": "RE_HDP_HOME_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension49": "RE_LISTING_CRITERIA.HIGHER",
>>                 "dimension167": "SAT_QU_IMPROVEMENTS.CONTROL",
>>                 "dimension38": "SELLER_OOBB_M1.CONTROL",
>>                 "dimension39": "SELLER_OOBB_M1_5.ON",
>>                 "dimension182": "SRP_MEDIASOLUTIONS_ADS_WEB.CONTROL",
>>                 "dimension164": "SRT_LISTINGS_VECTOR_SEARCH.CONTROL",
>>                 "dimension187": "SRT_RENTAL_LISTINGS_VECTOR_SEARCH.VECTOR_SEARCH",
>>                 "dimension57": "TAS_MULTI_PROP_TOURING_BUYER_EXP.CONTROL",
>>                 "dimension183": "VL_UNIT_PICKER_V1.TEST",
>>                 "dimension188": "ZEXP_DECISION_TOKEN_HOLD.a9oiwm_1706390649",
>>                 "dimension178": "ZHL_MAC_HOVER_NAV.CONTROL_OFF"
>>             });
>>             ga('set', {
>>                 "dimension179": "AB_DASHBOARD_AA_TEST.ON",
>>                 "dimension170": "AIPERS_COLLECTIONS_UPDATES_TAB.APP_E",
>>                 "dimension174": "AIPERS_ZILLOW_WEB_HOME_PAGE_COLLECTIONS.CONTROL_HOMEPG",
>>                 "dimension47": "ANDROID_HDP_INSIGHTS_VERSION.CONTROL",
>>                 "dimension42": "ARCS_IB_WEB.CONTROL",
>>                 "dimension36": "HDP_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension40": "IOS_HDP_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension41": "IOS_PNG_PARCEL.CONTROL_OFF",
>>                 "dimension56": "IOS_SATELLITE_RACHEL_VIEWATTACHMENTS.CONTROL_OFF",
>>                 "dimension62": "NBA_INF_TEST.CONTROL",
>>                 "dimension180": "ONSITE_MESSAGE_VALVE.OMP_ON",
>>                 "dimension44": "RC_INSTANT_TOUR_IMPROVE_V1.TEST",
>>                 "dimension64": "RC_INSTANT_TOUR_IMPROVE_V2.TEST",
>>                 "dimension186": "RE_Badging_SpecialOffers.CONTROL",
>>                 "dimension165": "RE_CONTACT_FORM.CONTROL",
>>                 "dimension58": "RE_HDP_HOME_INSIGHTS_VERSION.VERSION_2",
>>                 "dimension49": "RE_LISTING_CRITERIA.HIGHER",
>>                 "dimension167": "SAT_QU_IMPROVEMENTS.CONTROL",
>>                 "dimension38": "SELLER_OOBB_M1.CONTROL",
>>                 "dimension39": "SELLER_OOBB_M1_5.ON",
>>                 "dimension182": "SRP_MEDIASOLUTIONS_ADS_WEB.CONTROL",
>>                 "dimension164": "SRT_LISTINGS_VECTOR_SEARCH.CONTROL",
>>                 "dimension187": "SRT_RENTAL_LISTINGS_VECTOR_SEARCH.VECTOR_SEARCH",
>>                 "dimension57": "TAS_MULTI_PROP_TOURING_BUYER_EXP.CONTROL",
>>                 "dimension183": "VL_UNIT_PICKER_V1.TEST",
>>                 "dimension188": "ZEXP_DECISION_TOKEN_HOLD.a9oiwm_1706390649",
>>                 "dimension178": "ZHL_MAC_HOVER_NAV.CONTROL_OFF"
>>             });
>>         </script>
>>         <script>
>>             var w = window.innerWidth || (document && document.documentElement && document.documentElement.clientWidth) || (document && document.body && document.body.clientWidth);
>>
>>             var h = window.innerHeight || (document && document.documentElement && document.documentElement.clientHeight) || (document && document.body && document.body.clientHeight);
>>
>>             ua('set', 'dimension20', w + "x" + h);
>>             ua('set', 'dimension68', window.location.href);
>>             ua('set', 'dimension69', document.referrer);
>>             ua('set', 'dimension192', '1706390649584');
>>             ga('set', 'dimension20', w + "x" + h);
>>             ga('set', 'dimension68', window.location.href);
>>             ga('set', 'dimension69', document.referrer);
>>             ga('set', 'dimension192', '1706390649584');
>>
>>             document.addEventListener('DOMContentLoaded', function ProfileDOMContentLoadedEvent(e) {
>>                 // wait two seconds to make sure this performance metric has been recorded
>>                 setTimeout(function() {
>>                     if (performance && performance.timing) {
>>                         var domContentLoadedTime = ((performance.timing.domContentLoadedEventStart - performance.timing.navigationStart) / 1000).toFixed(2);
>>                         ua('set', 'dimension72', domContentLoadedTime);
>>                         ga('set', 'dimension72', domContentLoadedTime);
>>                     }
>>                 }, 2000);
>>                 document.removeEventListener('DOMContentLoaded', ProfileDOMContentLoadedEvent);
>>             });
>>
>>             window.addEventListener('load', function ProfileLoadEvent(e) {
>>                 // wait two seconds to make sure this performance metric has been recorded
>>                 setTimeout(function() {
>>                     if (performance && performance.timing) {
>>                         var loadEventTime = ((performance.timing.loadEventEnd - performance.timing.navigationStart) / 1000).toFixed(2);
>>                         ua('set', 'dimension73', loadEventTime);
>>                         ga('set', 'dimension73', loadEventTime);
>>                     }
>>                 }, 2000);
>>                 window.removeEventListener('load', ProfileLoadEvent);
>>             });
>>         </script>
>>         <script>
>>             window.UI_INIT_AT = Date.now()
>>         </script>
>>         <script>
>>             (function(n, a, e) {
>>                 var r = "v2"
>>                   , i = "fontsVersion"
>>                   , t = "https://fonts.googleapis.com/css?family=Open+Sans:400,600,700&display=swap"
>>                   , c = "//www.zillowstatic.com/static-zsg/LATEST/static-zsg/zsg/z-fonts/ivar/IvarHeadline-SemiBold-"
>>                   , o = ""
>>                   , s = ""
>>                   , l = ""
>>                   , f = ""
>>                   , u = {};
>>                 var S = function() {
>>                     var e = "__zstorage__";
>>                     try {
>>                         localStorage.setItem(e, e);
>>                         localStorage.removeItem(e);
>>                         return true
>>                     } catch (e) {
>>                         return false
>>                     }
>>                 }();
>>                 var p = function() {
>>                     try {
>>                         return a.createElement("link").relList.supports("prefetch")
>>                     } catch (e) {
>>                         return false
>>                     }
>>                 }();
>>                 function d(e) {
>>                     var t = n.requestIdleCallback;
>>                     t && t(e) || setTimeout(e, 1)
>>                 }
>>                 function v(e) {
>>                     var t = a.createElement("style");
>>                     t.type = "text/css";
>>                     t.appendChild(a.createTextNode(e));
>>                     a.head.appendChild(t)
>>                 }
>>                 function y(e, t) {
>>                     var n = a.createElement("link");
>>                     n.rel = t;
>>                     n.href = e;
>>                     a.head.appendChild(n)
>>                 }
>>                 u.setOpenSansFallbackStyle = function(e) {
>>                     f = e
>>                 }
>>                 ;
>>                 u.insertOpenSansFallbackStyle = function() {
>>                     f && v(f)
>>                 }
>>                 ;
>>                 u.insertOpenSansStyle = function() {
>>                     y(t, "stylesheet")
>>                 }
>>                 ;
>>                 u.setIvarFallbackStyle = function(e) {
>>                     l = e
>>                 }
>>                 ;
>>                 u.insertIvarFallbackStyle = function() {
>>                     l && v(l)
>>                 }
>>                 ;
>>                 u.setIvarStyle = function(e) {
>>                     o = e
>>                 }
>>                 ;
>>                 u.insertIvarStyle = function() {
>>                     o && v(o)
>>                 }
>>                 ;
>>                 u.setIvarSubsetStyle = function(e) {
>>                     s = e
>>                 }
>>                 ;
>>                 u.insertIvarSubsetStyle = function() {
>>                     s && v(s)
>>                 }
>>                 ;
>>                 u.prefetchIvarResources = function() {
>>                     if (p) {
>>                         y(c + "core.woff2", "prefetch");
>>                         y(c + "extended.woff2", "prefetch")
>>                     }
>>                 }
>>                 ;
>>                 u.prefetchOpenSansResources = function() {
>>                     if (p) {
>>                         y(t, "prefetch")
>>                     }
>>                 }
>>                 ;
>>                 u.initFirstLoad = function(e) {
>>                     e = e || {};
>>                     localStorage[i] = r;
>>                     u.insertIvarSubsetStyle();
>>                     var t = e.prefetcher || function(e) {
>>                         n.addEventListener("load", function() {
>>                             d(e)
>>                         })
>>                     }
>>                     ;
>>                     t(function() {
>>                         u.prefetchIvarResources()
>>                     })
>>                 }
>>                 ;
>>                 u.initSecondLoad = function() {
>>                     u.insertIvarStyle()
>>                 }
>>                 ;
>>                 u.init = function(e) {
>>                     u.insertOpenSansFallbackStyle();
>>                     u.insertIvarFallbackStyle();
>>                     u.insertOpenSansStyle();
>>                     if (!S || localStorage[i] === r) {
>>                         u.initSecondLoad()
>>                     } else {
>>                         u.initFirstLoad(e)
>>                     }
>>                 }
>>                 ;
>>                 n[e] = n[e] || u
>>             }
>>             )(window, document, "ZillowFontLoader");
>>             ZillowFontLoader.setOpenSansFallbackStyle('@font-face{size-adjust:105%;ascent-override:103%;font-family:Adjusted Arial;font-weight:400;src:local("Arial")}@font-face{size-adjust:99.5%;ascent-override:98%;font-family:Adjusted Arial;font-weight:700;src:local("Arial Bold")}');
>>             ZillowFontLoader.setIvarFallbackStyle('@font-face{size-adjust:100.5%;ascent-override:77%;font-family:Adjusted Times;font-weight:600;src:local("Times Bold")}@font-face{size-adjust:104%;ascent-override:88%;font-family:Adjusted Times New Roman;font-weight:600;src:local("Times New Roman Bold")}');
>>             ZillowFontLoader.setIvarStyle('@font-face{font-display:swap;font-family:Ivar Headline;font-style:normal;font-weight:600;src:url(//www.zillowstatic.com/static-zsg/LATEST/static-zsg/zsg/z-fonts/ivar/IvarHeadline-SemiBold-extended.woff2) format("woff2"),url(//www.zillowstatic.com/static-zsg/LATEST/static-zsg/zsg/z-fonts/ivar/IvarHeadline-SemiBold-extended.woff) format("woff");unicode-range:u+0000-001f,u+0080-200f,u+2020-faff,u+fb10-ffff}@font-face{font-display:swap;font-family:Ivar Headline;font-style:normal;font-weight:600;src:url(//www.zillowstatic.com/static-zsg/LATEST/static-zsg/zsg/z-fonts/ivar/IvarHeadline-SemiBold-core.woff2) format("woff2"),url(//www.zillowstatic.com/static-zsg/LATEST/static-zsg/zsg/z-fonts/ivar/IvarHeadline-SemiBold-core.woff) format("woff");unicode-range:u+0020-007f,u+201?,u+fb0?}');
>>         </script>
>>         <script>
>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAABNUAA0AAAAAJ2wAABMCAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiIbkmgGYABUEQgKsRilQgE2AiQDgWQLdAAEIAWDPAcgG0EgIxE2i9QqJcVfJmhHmPY7QVhagcTMoFZSVjGtm5zZHCUK5SjbX0fY8BBe73/aR/zz+/1v9j73uyJayuvgmSqWIBFJhE6oRDIh0n5CKySxRF7w9O33uzO7z7+4gUe8BPXQaKROCkQiIXEomeH5bf6fiy68F2uCde9BVMCgUhtBxWhCEaP6BW4trxftIl2Vi3IvXPsZ4dteqsuXX1/V0P18m8GAZ1Md/ajIq34VAAXwn/8CAP83V9qZA1LNtayOQK2wJ2yNqZDd/OzkspM54EkOGAJldr0Kg88ToOPnKwkcoCMUQt2rUBVS9dhP/TDtwGxCEPHEE4kQQ9v3NX+QClYBmqF6xMCAGNkhBJatnNAr1zK1IPHsQXcrqLAgEYGhu9CnTzpbQaJ1gIYSXC3uE6rp4ueeSYvfFBCKXbFe>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAABNUAA0AAAAAJ2wAABMCAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiIbkmgGYABUEQgKsRilQgE2AiQDgWQLdAAEIAWDPAcgG0EgIxE2i9QqJcVfJmhHmPY7QVhagcTMoFZSVjGtm5zZHCUK5SjbX0fY8BBe73/aR/zz+/1v9j73uyJayuvgmSqWIBFJhE6oRDIh0n5CKySxRF7w9O33uzO7z7+4gUe8BPXQaKROCkQiIXEomeH5bf6fiy68F2uCde9BVMCgUhtBxWhCEaP6BW4trxftIl2Vi3IvXPsZ4dteqsuXX1/V0P18m8GAZ1Md/ajIq34VAAXwn/8CAP83V9qZA1LNtayOQK2wJ2yNqZDd/OzkspM54EkOGAJldr0Kg88ToOPnKwkcoCMUQt2rUBVS9dhP/TDtwGxCEPHEE4kQQ9v3NX+QClYBmqF6xMCAGNkhBJatnNAr1zK1IPHsQXcrqLAgEYGhu9CnTzpbQaJ1gIYSXC3uE6rp4ueeSYvfFBCKXbFeQZO53MWBVDHgISXzpU7N82s7B3RqZzG9mMbk1GApB+16C6oU+Xr76OnzYx2FeF5pUd2Xn7AECBj84ob6J0o91CImm38zrmZyX3sHBYWYU+wMkUSmHPjW1fnt03dTxoHXT16BzHrYGWTBw/Vrb675VGLkA2GgposIBw7UrwiMDIJZ2LaSJ+Tn/0egsb+WUshJqTuez2F56O6bAbK7NLXApraqhEHiO2iXtdrDordAzmjMJdS+0R7ypJOjCyX71Wq/0ud4YZW97eJCmCj/ijePHB02eTEPQRLxYsI8A1y8If/Es6CVDLmTRVal01wD+BkiU1pi27vpnr+6dRO5LpfY769BnAtANceGdwK4WVAwRdfNd+Bxu88FSFgpvQWGJsauZcCrU0bcK3v8LfdaZ1r9b9apVw/YGLOV/KdXWPXvT031bXQUffrfBAgi9dQpR0K7FgLnDJuiT7Y8kh4k29FedZHeoklElC1otJJO2/MWXLTaqssf4Y2keTuuT1OQ0khBkCLbK2Xr0BYQjvgUYABy4ki7CnWtQjHKptyQ+f/Jq+NK8vhcgVAkFBOXkJSSkpaRJcSOUEaCSkhoVAg00oUVeNOqFF+gOubkZRWgEE6Ciyxo9JIoPI8rk1dfhfYmFv2mX8pKI6LtN+XvUcQ5hmMInyJ55i>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAABNUAA0AAAAAJ2wAABMCAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiIbkmgGYABUEQgKsRilQgE2AiQDgWQLdAAEIAWDPAcgG0EgIxE2i9QqJcVfJmhHmPY7QVhagcTMoFZSVjGtm5zZHCUK5SjbX0fY8BBe73/aR/zz+/1v9j73uyJayuvgmSqWIBFJhE6oRDIh0n5CKySxRF7w9O33uzO7z7+4gUe8BPXQaKROCkQiIXEomeH5bf6fiy68F2uCde9BVMCgUhtBxWhCEaP6BW4trxftIl2Vi3IvXPsZ4dteqsuXX1/V0P18m8GAZ1Md/ajIq34VAAXwn/8CAP83V9qZA1LNtayOQK2wJ2yNqZDd/OzkspM54EkOGAJldr0Kg88ToOPnKwkcoCMUQt2rUBVS9dhP/TDtwGxCEPHEE4kQQ9v3NX+QClYBmqF6xMCAGNkhBJatnNAr1zK1IPHsQXcrqLAgEYGhu9CnTzpbQaJ1gIYSXC3uE6rp4ueeSYvfFBCKXbFeQZO53MWBVDHgISXzpU7N82s7B3RqZzG9mMbk1GApB+16C6oU+Xr76OnzYx2FeF5pUd2Xn7AECBj84ob6J0o91CImm38zrmZyX3sHBYWYU+wMkUSmHPjW1fnt03dTxoHXT16BzHrYGWTBw/Vrb675VGLkA2GgposIBw7UrwiMDIJZ2LaSJ+Tn/0egsb+WUshJqTuez2F56O6bAbK7NLXApraqhEHiO2iXtdrDordAzmjMJdS+0R7ypJOjCyX71Wq/0ud4YZW97eJCmCj/ijePHB02eTEPQRLxYsI8A1y8If/Es6CVDLmTRVal01wD+BkiU1pi27vpnr+6dRO5LpfY769BnAtANceGdwK4WVAwRdfNd+Bxu88FSFgpvQWGJsauZcCrU0bcK3v8LfdaZ1r9b9apVw/YGLOV/KdXWPXvT031bXQUffrfBAgi9dQpR0K7FgLnDJuiT7Y8kh4k29FedZHeoklElC1otJJO2/MWXLTaqssf4Y2keTuuT1OQ0khBkCLbK2Xr0BYQjvgUYABy4ki7CnWtQjHKptyQ+f/Jq+NK8vhcgVAkFBOXkJSSkpaRJcSOUEaCSkhoVAg00oUVeNOqFF+gOubkZRWgEE6Ciyxo9JIoPI8rk1dfhfYmFv2mX8pKI6LtN+XvUcQ5hmMInyJ55ioBTFOjBqqWcSXzsaCWwxfKVhNzpVi7ocF82Is61VhYCsfmtgXAA3IaEclmRgPl19ohthfMeuvRP7yTGRSGigQOSthkAWjmQyI0XIeS/QcyU0BQoUiUC/v+JnA7mZ/31DBjHA8jX0KeeGwRwgipqpiLmYRNvhHa2KTGIQiamxhF5bMyIl4LifMAJAor1fVJKJAO+57SXPEVhbVmKOrsW0ptEm8GnrbFIquq6eHXDM8Ah3pdVdN9ug2UoMEgXIqGW8xCDk3JLPCUY9UiYYQILwZSaClBqeKRLhK9janHuZtVacjouGxEqshRcAp9i4im8AcwLiIqqDw1G5ZbFeLo2LDJtd3QZVrWhRbu94g2BLdXpu5aL4avCt8637hz25AN9rS8N0rMt5ny3+IVqO+9AOcZaBBlV1IhgrVHV5O/fqvl1ItX7/nPk++7MaG3TeTr1fMWLIaX0YRKIsnnOQOewzUs/MbSOzgNh0VAJS02Jy+1t5JLaoKCMjvZw17P50fgYkMIg1QymxUp8adLIDvUy4twI7zC3Dg4K0gUFUmJRH3REMI9YEkEh+zJ9Qnk+6RyvTyCMQJjsP0YBE/Mpp>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,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>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,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>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,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>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,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>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAABNUAA0AAAAAJ2wAABMCAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiIbkmgGYABUEQgKsRilQgE2AiQDgWQLdAAEIAWDPAcgG0EgIxE2i9QqJcVfJmhHmPY7QVhagcTMoFZSVjGtm5zZHCUK5SjbX0fY8BBe73/aR/zz+/1v9j73uyJayuvgmSqWIBFJhE6oRDIh0n5CKySxRF7w9O33uzO7z7+4gUe8BPXQaKROCkQiIXEomeH5bf6fiy68F2uCde9BVMCgUhtBxWhCEaP6BW4trxftIl2Vi3IvXPsZ4dteqsuXX1/V0P18m8GAZ1Md/ajIq34VAAXwn/8CAP83V9qZA1LNtayOQK2wJ2yNqZDd/OzkspM54EkOGAJldr0Kg88ToOPnKwkcoCMUQt2rUBVS9dhP/TDtwGxCEPHEE4kQQ9v3NX+QClYBmqF6xMCAGNkhBJatnNAr1zK1IPHsQXcrqLAgEYGhu9CnTzpbQaJ1gIYSXC3uE6rp4ueeSYvfFBCKXbFeQZO53MWBVDHgISXzpU7N82s7B3RqZzG9mMbk1GApB+16C6oU+Xr76OnzYx2FeF5pUd2Xn7AECBj84ob6J0o91CImm38zrmZyX3sHBYWYU+wMkUSmHPjW1fnt03dTxoHXT16BzHrYGWTBw/Vrb675VGLkA2GgposIBw7UrwiMDIJZ2LaSJ+Tn/0egsb+WUshJqTuez2F56O6bAbK7NLXApraqhEHiO2iXtdrDordAzmjMJdS+0R7ypJOjCyX71Wq/0ud4YZW97eJCmCj/ijePHB02eTEPQRLxYsI8A1y8If/Es6CVDLmTRVal01wD+BkiU1pi27vpnr+6dRO5LpfY769BnAtANceGdwK4WVAwRdfNd+Bxu88FSFgpvQWGJsauZcCrU0bcK3v8LfdaZ1r9b9apVw/YGLOV/KdXWPXvT031bXQUffrfBAgi9dQpR0K7FgLnDJuiT7Y8kh4k29FedZHeoklElC1otJJO2/MWXLTaqssf4Y2keTuuT1OQ0khBkCLbK2Xr0BYQjvgUYABy4ki7CnWtQjHKptyQ+f/Jq+NK8vhcgVAkFBOXkJSSkpaRJcSOUEaCSkhoVAg00oUVeNOqFF+gOubkZRWgEE6Ciyxo9JIoPI8rk1dfhfYmFv2mX8pKI6LtN+XvUcQ5hmMInyJ55ioBTFOjBqqWcSXzsaCWwxfKVhNzpVi7ocF82Is61VhYCsfmtgXAA3IaEclmRgPl19ohthfMeuvRP7yTGRSGigQOSthkAWjmQyI0XIeS/QcyU0BQoUiUC/v+JnA7mZ/31DBjHA8jX0KeeGwRwgipqpiLmYRNvhHa2KTGIQiamxhF5bMyIl4LifMAJAor1fVJKJAO+57SXPEVhbVmKOrsW0ptEm8GnrbFIquq6eHXDM8Ah3pdVdN9ug2UoMEgXIqGW8xCDk3JLPCUY9UiYYQILwZSaClBqeKRLhK9janHuZtVacjouGxEqshRcAp9i4im8AcwLiIqqDw1G5ZbFeLo2LDJtd3QZVrWhRbu94g2BLdXpu5aL4avCt8637hz25AN9rS8N0rMt5ny3+IVqO+9AOcZaBBlV1IhgrVHV5O/fqvl1ItX7/nPk++7MaG3TeTr1fMWLIaX0YRKIsnnOQOewzUs/MbSOzgNh0VAJS02Jy+1t5JLaoKCMjvZw17P50fgYkMIg1QymxUp8adLIDvUy4twI7zC3Dg4K0gUFUmJRH3REMI9YEkEh+zJ9Qnk+6RyvTyCMQJjsP0YBE/MppDbABnxO3QUGQ7Uo9otwDzGpALUfAA3+GVYyc5rzEpj4QuHA5jtqHOnRcNHWL6Iu+XzI1QbSZjFhgyjX0wjw04UJZkxbMbpRIanpzGLDqBOdMRuB2aHA7NMq5h2O8qGEUW1HSVXWSCW72oew9q0HqEcPAG699ZdFOVTQdit+g9RFJgvYU0/09OGPgev0aWkzAAyzKa6AGX/YQDu29GR6SU70oRRJMUgPZCs6Lce4JoCCSQPIQOTjFwaMsMdoVNiOxCYO3Y4eduvYJaxgLExzHIWcXFzkyIXlz4lbJzTXEmQm5zvi+EGMpyCYOCcPVdbdO0aMyBJRz+Y1uOvOXRzMaGlJPNx6QNlJ6exO6yoGAOUPkA5dwy4oo3dfMfjazS/EzKykuRBJU9Nc+PCsW+tsOxWC8UeZ0Qh9n0YWPrFs/VOyEbaqGsO7PnBOHSnNoBeT9KfOPIW5xi19G6hc0wway1jVDmc0QYMqA0yfOthenThIa0oaoDZqouaKjVQ5736WtTgqUP3eqWjaMJSDeaBpLl3wgBl/1VAMk/duG7aRdB3vxnHhJaOXrd0O3cYmAOKirdng3uoEyKSjYXvXie89ifqjWY/UgJpkfrnzpNZb4pv0J+43iI8mfFRL3+dITmF1eZTzt3niOzjD6R4JtPmZxFiPHFZIIbct9QX6asvjy0hTeiI/aYANXjO+YHDt2/p1wMPzzR/2GYwnNdDR44RWw6Lwsu+220PCoENjmFONqI9dwyYJ7AXgOilRKvOMsSAkY5OY4/XIn8knHRckvQHOSYCtlzsfCRw9Ag6ctUO0rvOKT7Tjs6NSYH2CC0w8UiTIgPWd7WzNyEuJzj0olWjGTNGp5AdQ+U/sWsxKlWQEhcUMbhB0MqDgZu2bRpmvQCjoyTzmJQJyHMTl2bqlp+nx1yGVtK6qte6dJEdBuY7GPZkApBd8CpDlwtHZBu23COvx7Ek/hZf9CKFtPRkQejJtIl2aYrS3uWebXcGVgK8Fe1zRa6aa4Cf36Fl8PQKAA3PPxRlnV0bq5sgrkHAK3EIIb6e7b8VNJOg9zJjSdVFnh4FqCeB2CdvG0xlSLue0GeKjleDyNEjicv5MjcZgEJHMz+dzp2EltFNuaFGzTHTyc6L8hd3ArbcbJqwNh1ERzgrbIMwzaGvBuhG3vV0Gc54JsF70dWh19KkKQ5nCRVPTouxgqnFLGHgcJEGhBxDiGsdtQnMUqCum+vrAvtvCgpRo/MMqwq0AmaoM5zkkoP4jk5Q7JkXP80m4qPNXWO+AnwOuaU8adIg0S0F4Wi/Z4QHS3zmVd0U1mi330dHond9iFmYBy7STooRyaPQXZnz/1VXjVnufRiKaclIHTpy+yYdNbh/eR0ZvoFZrgHzVfQuAaVw5me7j2cFq/IfZkUPmWqzzUAbPL2h3u15ivpF5u+hGwIft8IWCOZ69JHSbEXp2pqmcrgw5yQ8iBe2eZhR8WZOnkqf+/m4P5Yhn0pe/VppQ2x6RkFGRlKeiyieAfw9thuNBxqbSg7uNlUNVfIvBPOuvR+jy+CsNerFlto8TVxJTNsUy7i6rBTcB6+XVbujwLCz98kaRnfqarKUEab6bas2NJ1typPAX0NAyZTHlAgu2J77fNDEmeBbUU9kfRSNYNFD+CW8Cfma3yCVIU7QQHYyRQniltBtad9Kh6BB4HsCfgVv0PiGn6HrymXk2DndbMHg4yxoXb4GTnSsCYmv3Ws07W9qKj942FQn7/NjnA/BKyv06jhThnjEWCHeWVakFB6chHbdPASTW34jPIhfbQuQC2efPiP+C4iILxNfsP1qF36zzTect70gngU8Ix4zs4C/46DsLtSj736xQZ97CV94+V3Cf/IVr9DHTxX/Jaecrqc1ppQbS7kx4FsCyiBJQnH/pecH7Q3iV9ssmTsnadTD/Y3w+WHe25dYDf+k/VaoCBka/FpB3nt+uWVsh7UUUhlEXDqDn+Wjont/TQBJ/ta4gK718Qs+/RvRBHvW1QpPRT8vsH9CtqbH1l+mfnkC58HNKzbk2jCTfSzsHHvBFT3ycm0yD2/W3DN+7CmAHqPFpv2NTaaDo6aK8lGj6UBjo+mQYTvlh/IyuSNF5dwdhuJY6c6vjPfETbHgxJUOjqowUZVY0spT90wRUu0CjJrve5DDaIrPytVm58RpknLB57oxPEmUIzWFLcpJ0LutK8vZXjnmeocGzlexImdTg8L/qg8yZUnwpwI+IeBEVkbNbsFGP8q3xDPKAhRm/t+k6T1jsVpXpFnWf5afOn+hPV2ZkZyWa0xVxYSBzzxWMvSLHgRTamsGDXEalYKhtKqtpSx9YWqMsrRdqm4tZrmcC6YUFhjVMlUMj/9LJpyvCSssTU9U1vZEZ4BxYnbuORHDyNAkUzR08sV88kX616b/i5kxxPO5WcgBP/1SYSjJTs8rNFZFzC/2lfgZGdd3vL58YO3aVQPd8IVtBvLhzE9+EExegXvO1bm90MS9yPrd5fN9KIczrnMUz4rdx+Md7XGn2J5aIUgKuQr3OPSvHGkJW8/sOxPvzP5mfsOegY7vGdU9b/3egRSa4dXsuT2QA60/2akeee/sWj9a5VExbjHgIGAcDF4R4OW28qPlHzrcvc50BMMXcM/Hn1Zumd394+drVpwmK2CwT5DXh50n+04898CXIPBbOJE8dsjy8bj3clcq2HgF7nnmPLFq/veZwjb6V/b4IL3fff/7MA56n7np7X7htc+6nXu9Qz+ZgcC0c7TrcGomjZ3im0J3d8bQdnYdiFXTMqPpHjdx8K1kA0U/TgvfWNySzIiIy8pQCD5VUd6KSG9M8E/80rIvAF/3RhNVx4ipNuUr/wmQUSdd649lBQTupocfZADLQmG0sDktJ3GwT5WX0EILEMF1LP9r7KXCmFSWgPfEXhZbKWdfNN3kgEtYXYKsLSUzcbBVrYzOCW3XXRjw9f3o6K/vBPrtw7Niy/R1qkjnWIbk2GbwS8G7jIB9sKSOmxEplhuiRc3p2QkDfeq80LAuuFXmf53t1rw/5spSinC7QBbd>>             ZillowFontLoader.setIvarSubsetStyle('@font-face{font-display:swap;font-family:Ivar Headline Subset;font-style:normal;font-weight:600;src:url("data:application/x-font-woff2;charset=utf-8;base64,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") format("woff2");unicode-range:u+0020,u+0041-005a,u+0061-007a}');
>>         </script>
>>         <script>
>>             ZillowFontLoader.init();
>>         </script>
>>         <script>
>>             window.dataLayer = window.dataLayer || [];
>>
>>             window.dataLayer.unshift({
>>                 zillowSiteVersion: 4,
>>                 isMobile: false,
>>                 isMobileApp: false,
>>                 isPhone: false,
>>                 isTablet: false,
>>                 gaCustomDimensions: {
>>                     dimension1: '30d8e80bfd364becabbb3d3d89749eff/X1-ZUr30yg93ta8zt_3s95i'
>>                 }
>>             });
>>
>>             var gtmLoaded = false;
>>             function loadGtmContainer() {
>>                 if (!gtmLoaded) {
>>                     (function(w, d, s, l, i) {
>>                         w[l] = w[l] || [];
>>                         w[l].push({
>>                             'gtm.start': new Date().getTime(),
>>                             event: 'gtm.js'
>>                         });
>>                         var f = d.getElementsByTagName(s)[0]
>>                           , j = d.createElement(s)
>>                           , dl = l != 'dataLayer' ? '&l=' + l : '';
>>                         j.async = true;
>>                         j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;
>>                         f.parentNode.insertBefore(j, f);
>>                     }
>>                     )(window, document, 'script', 'dataLayer', 'GTM-P6HT97');
>>                     gtmLoaded = true;
>>                 }
>>             }
>>             window.addEventListener('load', loadGtmContainer);
>>             window.setTimeout(loadGtmContainer, 10000);
>>         </script>
>>         <link rel="dns-prefetch" href="//fonts.googleapis.com"/>
>>         <meta charSet="utf-8"/>
>>         <meta name="format-detection" content="telephone=no"/>
>>         <meta http-equiv="x-dns-prefetch-control" content="on"/>
>>         <meta name="referrer" content="always"/>
>>         <meta name="viewport" content="width=device-width, height=device-height, user-scalable=yes, initial-scale=1.0, minimum-scale=1.0"/>
>>         <meta rel="icon" type="image/png" href="/apple-touch-icon.png"/>
>>         <meta name="msapplication-TileColor" content="#3366b8"/>
>>         <meta name="msapplication-TileImage" content="https://www.zillowstatic.com/static/images/logos/zillow-logo-win8-tile.png"/>
>>         <meta name="msapplication-config" content="none"/>
>>         <meta name="apple-mobile-web-app-capable" content="yes"/>
>>         <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"/>
>>         <link rel="apple-touch-icon" href="/apple-touch-icon.png"/>
>>         <meta property="fb:app_id" content="172285552816089"/>
>>         <meta name="google-translate-customization" content="691f1bfccade71b5-c065751219a379dd-g64cedb67f5ea020a-a"/>
>>         <meta name="google-signin-clientid" content="238648973530.apps.googleusercontent.com"/>
>>         <meta name="google-signin-scope" content="openid profile email"/>
>>         <meta name="google-signin-cookiepolicy" content="single_host_origin"/>
>>         <meta property="og:site_name" content="Zillow"/>
>>         <script>
>>             (function() {
>>                 if (typeof ga === undefined || !Array.isArray(ga.q)) {
>>                     return
>>                 }
>>                 var gaSetCalls = [].concat(ga.q).filter(function(args){
>>                     return args && args[0] === 'set'
>>                 });
>>                 var dims = {};
>>                 gaSetCalls.forEach(function(cmdCall) {
>>                     var arg1 = cmdCall[1]
>>                       , arg2 = cmdCall[2];
>>                     if (typeof arg1 === 'string') {
>>                         dims[arg1] = arg2;
>>                     } else if (typeof arg1 === 'object' && arg1 !== null) {
>>                         Object.getOwnPropertyNames(arg1).forEach(function(k) {
>>                             dims[k] = arg1[k]
>>                         });
>>                     }
>>                 });
>>                 if (typeof zanalytics !== 'undefined' && typeof zanalytics.setdim === 'function') {
>>                     zanalytics.setdim(dims)
>>                 }
>>             }
>>             )();
>>         </script>
>>         <meta name="viewport" content="width=device-width"/>
>>         <meta charSet="utf-8"/>
>>         <title>Your Home</title>
>>         <meta name="next-head-count" content="3"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/styles.1a67b01.chunk.css" as="style"/>
>>         <link rel="stylesheet" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/styles.1a67b01.chunk.css"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/main-7c1e963.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/webpack-a05a5a5.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/framework.8ec9ced.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/6b859938.a9a7e1f.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/ff20001a.7d101fa.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/6ff4afdc.c261da7.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/fbd7a3074441b8d3b53deabb7d91d32d3ea3d49d.5d2d386.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/185de6c9f3225c41f96f8b7a405c2afa4f7d61dc.ab71779.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/70f87bc596d7ccefa04905a9a632882796af8a72.fa6899e.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/311fe86db4dda8d819a8b5678d6427f17e35994f.04dfa71.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/eb1bf92af5ee9fe99464dace0732ee550cbf54d2.b1f9196.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/b78bde9156be0ddc270e38e64346f50866926e5b.5ef6171.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/be670e2faa75ffefc3f2d089af028f3ee578886f.d9b89f4.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/4a24023b0a6247e3a740dd91063a25da4580115f.d4cecf3.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/a16d08f122be614f57a0f6dd77c4ba7edec9e371.e5c41cd.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/ddbf431168ec55d270e6376fab302f0c2424bfbe.350c58a.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/963afa6b566d093137063bd147c7f9f579553862.f5647a7.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/styles.37d6962.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/pages/_app-b299163.js" as="script"/>
>>         <link rel="preload" href="https://www.zillowstatic.com/s3/owner-dashboard/_next/static/chunks/pages/your-home/%5Bzpid%5D-466a5d3.js" as="script"/>
>>         <style data-styled="" data-styled-version="5.1.1">
>>             .lnNBap {
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 stroke: currentColor;
>>                 fill: currentColor;
>>                 height: 1em;
>>                 width: 1em;
>>             }
>>
>>             /*!sc*/
>>             .ePxLbi {
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 stroke: currentColor;
>>                 fill: currentColor;
>>                 height: 1em;
>>                 width: 1em;
>>                 height: 24px;
>>                 width: 24px;
>>             }
>>
>>             /*!sc*/
>>             .jxVWFy {
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 stroke: currentColor;
>>                 fill: currentColor;
>>                 color: #006AFF;
>>                 height: 1em;
>>                 width: 1em;
>>                 height: 24px;
>>                 width: 24px;
>>             }
>>
>>             /*!sc*/
>>             .gLrKNI {
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 stroke: currentColor;
>>                 fill: currentColor;
>>                 color: #006AFF;
>>                 margin-left: 8px;
>>                 height: 1em;
>>                 width: 1em;
>>             }
>>
>>             /*!sc*/
>>             .fumdZG {
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 stroke: currentColor;
>>                 fill: currentColor;
>>                 height: 1em;
>>                 width: 1em;
>>                 height: 16px;
>>                 width: 16px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g3[id="Icon-c11n-8-70-1__sc-13llmml-0"] {
>>                 content: "lnNBap,ePxLbi,jxVWFy,gLrKNI,fumdZG,"
>>             }
>>
>>             /*!sc*/
>>             .bfPunz {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-wrap: wrap;
>>                 -ms-flex-wrap: wrap;
>>                 flex-wrap: wrap;
>>                 -webkit-box-pack: justify;
>>                 -webkit-justify-content: space-between;
>>                 -ms-flex-pack: justify;
>>                 justify-content: space-between;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>             }
>>
>>             /*!sc*/
>>             .jymKAq {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-box-pack: justify;
>>                 -webkit-justify-content: space-between;
>>                 -ms-flex-pack: justify;
>>                 justify-content: space-between;
>>                 -webkit-align-items: flex-end;
>>                 -webkit-box-align: flex-end;
>>                 -ms-flex-align: flex-end;
>>                 align-items: flex-end;
>>             }
>>
>>             /*!sc*/
>>             .dgFPTg {
>>                 margin-bottom: 24px;
>>                 padding-bottom: 0px;
>>             }
>>
>>             /*!sc*/
>>             @media (min-width: 481px) {
>>                 .dgFPTg {
>>                     margin-bottom:32px;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             @media (min-width: 769px) {
>>                 .dgFPTg {
>>                     padding-bottom:24px;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .iMQBKV {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: column;
>>                 -ms-flex-direction: column;
>>                 flex-direction: column;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>                 margin-top: 8px;
>>             }
>>
>>             /*!sc*/
>>             .ivmDOt {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: row;
>>                 -ms-flex-direction: row;
>>                 flex-direction: row;
>>                 -webkit-box-pack: space-around;
>>                 -webkit-justify-content: space-around;
>>                 -ms-flex-pack: space-around;
>>                 justify-content: space-around;
>>                 -webkit-align-items: flex-start;
>>                 -webkit-box-align: flex-start;
>>                 -ms-flex-align: flex-start;
>>                 align-items: flex-start;
>>                 margin-top: 8px;
>>             }
>>
>>             /*!sc*/
>>             .ksKJFs {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>             }
>>
>>             /*!sc*/
>>             .jsBgUU {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: column;
>>                 -ms-flex-direction: column;
>>                 flex-direction: column;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g4[id="Flex-c11n-8-70-1__sc-n94bjd-0"] {
>>                 content: "bfPunz,jymKAq,dgFPTg,iMQBKV,ivmDOt,ksKJFs,jsBgUU,"
>>             }
>>
>>             /*!sc*/
>>             .ezFNmS {
>>                 color: #FFF;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 36px;
>>                 line-height: 40px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .ezFNmS > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .ezFNmS strong,.ezFNmS b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .ezFNmS em,.ezFNmS i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .eHLZEe {
>>                 color: #FFF;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 24px;
>>                 line-height: 32px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .eHLZEe > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .eHLZEe strong,.eHLZEe b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .eHLZEe em,.eHLZEe i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .cBsXmj {
>>                 color: #FFF;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 20px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .cBsXmj > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .cBsXmj strong,.cBsXmj b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .cBsXmj em,.cBsXmj i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .hDZzey {
>>                 color: #006AFF;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 12px;
>>                 line-height: 16px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .hDZzey > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .hDZzey strong,.hDZzey b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .hDZzey em,.hDZzey i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .iMUOkN {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .iMUOkN > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .iMUOkN strong,.iMUOkN b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .iMUOkN em,.iMUOkN i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .TzSfu {
>>                 color: #006AFF;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .TzSfu > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .TzSfu strong,.TzSfu b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .TzSfu em,.TzSfu i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .hdDDRd {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 20px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .hdDDRd > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .hdDDRd strong,.hdDDRd b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .hdDDRd em,.hdDDRd i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .hfmLks {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 24px;
>>                 line-height: 32px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .hfmLks > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .hfmLks strong,.hfmLks b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .hfmLks em,.hfmLks i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g5[id="Text-c11n-8-70-1__sc-aiai24-0"] {
>>                 content: "ezFNmS,eHLZEe,cBsXmj,hDZzey,iMUOkN,TzSfu,hdDDRd,hfmLks,"
>>             }
>>
>>             /*!sc*/
>>             .ljMSYi {
>>                 fill: currentColor;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g59[id="StyledHelpCircle-c11n-8-70-1__sc-1gopb49-0"] {
>>                 content: "ljMSYi,"
>>             }
>>
>>             /*!sc*/
>>             .dCNhBH {
>>                 fill: #fff;
>>                 stroke: none;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g60[id="StyledHelpQuestion-c11n-8-70-1__sc-1gopb49-1"] {
>>                 content: "dCNhBH,"
>>             }
>>
>>             /*!sc*/
>>             .iUnDHu {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 display: -webkit-inline-box;
>>                 display: -webkit-inline-flex;
>>                 display: -ms-inline-flexbox;
>>                 display: inline-flex;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 outline: none;
>>                 box-shadow: none;
>>                 border: 0;
>>                 background: none;
>>                 padding: 0;
>>                 text-align: initial;
>>                 -webkit-appearance: none;
>>             }
>>
>>             /*!sc*/
>>             .iUnDHu > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .iUnDHu,.iUnDHu:active {
>>                 color: #FFF;
>>                 -webkit-text-decoration: underline;
>>                 text-decoration: underline;
>>             }
>>
>>             /*!sc*/
>>             @media (hover: hover) and (pointer:fine) {
>>                 .iUnDHu:hover:not(:disabled) {
>>                     -webkit-text-decoration:underline;
>>                     text-decoration: underline;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .iUnDHu:focus {
>>                 box-shadow: 0 0 0px 1px #FFF,0 0 2px 3px #A6E5FF,0 0 2px 4px #006AFF;
>>             }
>>
>>             /*!sc*/
>>             .iUnDHu:not(:disabled) {
>>                 cursor: pointer;
>>             }
>>
>>             /*!sc*/
>>             .hrQhoC {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 display: -webkit-inline-box;
>>                 display: -webkit-inline-flex;
>>                 display: -ms-inline-flexbox;
>>                 display: inline-flex;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 outline: none;
>>                 box-shadow: none;
>>                 border: 0;
>>                 background: none;
>>                 padding: 0;
>>                 text-align: initial;
>>                 -webkit-appearance: none;
>>             }
>>
>>             /*!sc*/
>>             .hrQhoC > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .hrQhoC,.hrQhoC:active {
>>                 color: #0D4599;
>>                 -webkit-text-decoration: none;
>>                 text-decoration: none;
>>             }
>>
>>             /*!sc*/
>>             @media (hover: hover) and (pointer:fine) {
>>                 .hrQhoC:hover:not(:disabled) {
>>                     -webkit-text-decoration:underline;
>>                     text-decoration: underline;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .hrQhoC:focus {
>>                 box-shadow: 0 0 0px 1px #FFF,0 0 2px 3px #A6E5FF,0 0 2px 4px #006AFF;
>>             }
>>
>>             /*!sc*/
>>             .hrQhoC:not(:disabled) {
>>                 cursor: pointer;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g68[id="StyledTextButton-c11n-8-70-1__sc-n1gfmh-0"] {
>>                 content: "iUnDHu,hrQhoC,"
>>             }
>>
>>             /*!sc*/
>>             .dGIglj {
>>                 border: 0;
>>                 -webkit-clip: rect(0 0 0 0);
>>                 clip: rect(0 0 0 0);
>>                 -webkit-clip-path: rect(0 0 0 0);
>>                 clip-path: rect(0 0 0 0);
>>                 height: 1px;
>>                 margin: -1px;
>>                 overflow: hidden;
>>                 padding: 0;
>>                 position: absolute;
>>                 width: 1px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g75[id="VisuallyHidden-c11n-8-70-1__sc-t8tewe-0"] {
>>                 content: "dGIglj,"
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc {
>>                 cursor: pointer;
>>                 -webkit-text-decoration: none;
>>                 text-decoration: none;
>>                 text-align: center;
>>                 display: -webkit-inline-box;
>>                 display: -webkit-inline-flex;
>>                 display: -ms-inline-flexbox;
>>                 display: inline-flex;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 box-sizing: border-box;
>>                 border: 1px solid;
>>                 border-radius: 4px;
>>                 -webkit-user-select: none;
>>                 -moz-user-select: none;
>>                 -ms-user-select: none;
>>                 user-select: none;
>>                 padding-left: 16px;
>>                 padding-right: 16px;
>>                 margin: 0;
>>                 -webkit-appearance: none;
>>                 -webkit-transition-property: background-color,border-color,color;
>>                 transition-property: background-color,border-color,color;
>>                 -webkit-transition-duration: 0.2s;
>>                 transition-duration: 0.2s;
>>                 -webkit-transition-timing-function: ease;
>>                 transition-timing-function: ease;
>>                 outline: none;
>>                 box-shadow: none;
>>                 width: auto;
>>                 position: relative;
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 padding-top: 9px;
>>                 padding-bottom: 9px;
>>                 line-height: 24px;
>>                 height: auto;
>>                 margin-top: 8px;
>>                 margin-bottom: 8px;
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc:focus {
>>                 box-shadow: 0 0 0px 1px #FFF,0 0 2px 3px #A6E5FF,0 0 2px 4px #006AFF;
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc,.dFdXEc:focus,.dFdXEc:visited,.dFdXEc:disabled {
>>                 background-color: transparent;
>>                 border-color: #FFF;
>>                 color: #FFF;
>>             }
>>
>>             /*!sc*/
>>             @media (hover: hover) and (pointer:fine) {
>>                 .dFdXEc:hover:not(:disabled) {
>>                     background-color:#F1F1F4;
>>                     border-color: #FFF;
>>                     color: #2A2A33;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc[aria-pressed="true"][aria-pressed="true"] {
>>                 border-width: 2px;
>>                 padding-left: 15px;
>>                 padding-right: 15px;
>>                 padding-top: 8px;
>>                 padding-bottom: 8px;
>>                 line-height: 24px;
>>                 height: auto;
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc:active:not(:disabled) {
>>                 background-color: #D1D1D5;
>>                 border-color: #FFF;
>>                 color: #2A2A33;
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc:after {
>>                 content: "";
>>                 position: absolute;
>>                 left: 0;
>>                 height: 44px;
>>                 min-width: 44px;
>>                 width: 100%;
>>                 top: 50%;
>>                 margin-top: -22px;
>>             }
>>
>>             /*!sc*/
>>             .dFdXEc > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo {
>>                 cursor: pointer;
>>                 -webkit-text-decoration: none;
>>                 text-decoration: none;
>>                 text-align: center;
>>                 display: -webkit-inline-box;
>>                 display: -webkit-inline-flex;
>>                 display: -ms-inline-flexbox;
>>                 display: inline-flex;
>>                 -webkit-align-items: center;
>>                 -webkit-box-align: center;
>>                 -ms-flex-align: center;
>>                 align-items: center;
>>                 -webkit-box-pack: center;
>>                 -webkit-justify-content: center;
>>                 -ms-flex-pack: center;
>>                 justify-content: center;
>>                 box-sizing: border-box;
>>                 border: 1px solid;
>>                 border-radius: 4px;
>>                 -webkit-user-select: none;
>>                 -moz-user-select: none;
>>                 -ms-user-select: none;
>>                 user-select: none;
>>                 padding-left: 16px;
>>                 padding-right: 16px;
>>                 margin: 0;
>>                 -webkit-appearance: none;
>>                 -webkit-transition-property: background-color,border-color,color;
>>                 transition-property: background-color,border-color,color;
>>                 -webkit-transition-duration: 0.2s;
>>                 transition-duration: 0.2s;
>>                 -webkit-transition-timing-function: ease;
>>                 transition-timing-function: ease;
>>                 outline: none;
>>                 box-shadow: none;
>>                 width: auto;
>>                 position: relative;
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 padding-top: 15px;
>>                 padding-bottom: 15px;
>>                 line-height: 24px;
>>                 height: auto;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo:focus {
>>                 box-shadow: 0 0 0px 1px #FFF,0 0 2px 3px #A6E5FF,0 0 2px 4px #006AFF;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo,.elkRqo:focus,.elkRqo:visited,.elkRqo:disabled {
>>                 background-color: #FFF;
>>                 border-color: #A7A6AB;
>>                 color: #2A2A33;
>>             }
>>
>>             /*!sc*/
>>             @media (hover: hover) and (pointer:fine) {
>>                 .elkRqo:hover:not(:disabled) {
>>                     background-color:#F1F1F4;
>>                     border-color: #A7A6AB;
>>                     color: #2A2A33;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .elkRqo[aria-pressed="true"][aria-pressed="true"] {
>>                 background-color: #F2FAFF;
>>                 border-color: #006AFF;
>>                 color: #2A2A33;
>>                 border-width: 2px;
>>                 padding-left: 15px;
>>                 padding-right: 15px;
>>                 padding-top: 14px;
>>                 padding-bottom: 14px;
>>                 line-height: 24px;
>>                 height: auto;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo:active:not(:disabled) {
>>                 background-color: #D1D1D5;
>>                 border-color: #54545A;
>>                 color: #2A2A33;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo:after {
>>                 content: "";
>>                 position: absolute;
>>                 left: 0;
>>                 height: 44px;
>>                 min-width: 44px;
>>                 width: 100%;
>>                 top: 50%;
>>                 margin-top: -22px;
>>             }
>>
>>             /*!sc*/
>>             .elkRqo > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g80[id="StyledButton-c11n-8-70-1__sc-wpcbcc-0"] {
>>                 content: "dFdXEc,elkRqo,"
>>             }
>>
>>             /*!sc*/
>>             .iZtMzY {
>>                 margin-right: 8px;
>>             }
>>
>>             /*!sc*/
>>             .iZtMzY > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 display: block;
>>                 height: 24px;
>>                 width: 24px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g81[id="StyledButtonIcon-c11n-8-70-1__sc-wpcbcc-1"] {
>>                 content: "iZtMzY,"
>>             }
>>
>>             /*!sc*/
>>             .dYnhha {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-align-items: stretch;
>>                 -webkit-box-align: stretch;
>>                 -ms-flex-align: stretch;
>>                 align-items: stretch;
>>                 -webkit-flex-direction: row;
>>                 -ms-flex-direction: row;
>>                 flex-direction: row;
>>                 position: relative;
>>                 z-index: 1;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0 {
>>                 text-align: center;
>>                 -webkit-align-self: stretch;
>>                 -ms-flex-item-align: stretch;
>>                 align-self: stretch;
>>                 padding-left: 16px;
>>                 padding-right: 16px;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0 {
>>                 margin-top: 0;
>>                 margin-left: 8px;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0:first-child,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0:first-child,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0:first-child,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0:first-child {
>>                 margin-top: 0;
>>                 margin-left: 0;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0 {
>>                 margin-top: 0;
>>                 margin-left: -1px;
>>                 border-radius: 0;
>>                 position: relative;
>>                 z-index: 1;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0:first-child,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0:first-child,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0:first-child,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0:first-child {
>>                 border-top-left-radius: 4px;
>>                 border-bottom-left-radius: 4px;
>>                 border-top-right-radius: 0;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0:last-child,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0:last-child,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0:last-child,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0:last-child {
>>                 border-bottom-right-radius: 4px;
>>                 border-top-right-radius: 4px;
>>                 border-bottom-left-radius: 0;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0[aria-pressed="true"],.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0[aria-pressed="true"],.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0[aria-pressed="true"],.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0[aria-pressed="true"] {
>>                 z-index: 2;
>>             }
>>
>>             /*!sc*/
>>             .dYnhha .StyledButton-c11n-8-70-1__sc-wpcbcc-0:focus,.dYnhha .StyledLoadingButton-c11n-8-70-1__sc-1rron1i-0:focus,.dYnhha .StyledTextButton-c11n-8-70-1__sc-n1gfmh-0:focus,.dYnhha .StyledIconButton-c11n-8-70-1__sc-1pb8vz8-0:focus {
>>                 z-index: 3;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g88[id="StyledButtonGroup-c11n-8-70-1__sc-12tlbte-0"] {
>>                 content: "dYnhha,"
>>             }
>>
>>             /*!sc*/
>>             .eRrBwH {
>>                 padding: 0px;
>>                 background-color: #FFF;
>>                 border: 1px solid #D1D1D5;
>>             }
>>
>>             /*!sc*/
>>             @media (min-width: 481px) {
>>                 .eRrBwH {
>>                     border-radius:4px;
>>                 }
>>
>>                 .eRrBwH:after {
>>                     border-radius: 4px;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .eRrBwH[aria-pressed="true"] {
>>                 border-color: transparent;
>>             }
>>
>>             /*!sc*/
>>             .eRrBwH:after {
>>                 bottom: -1px;
>>                 left: -1px;
>>                 right: -1px;
>>                 top: -1px;
>>             }
>>
>>             /*!sc*/
>>             .eUavhL {
>>                 padding: 16px;
>>                 background-color: #FFF;
>>                 border: 1px solid #D1D1D5;
>>                 box-shadow: 0 2px 4px 0 rgba(0,0,0,0.3);
>>             }
>>
>>             /*!sc*/
>>             @media (min-width: 481px) {
>>                 .eUavhL {
>>                     border-radius:4px;
>>                 }
>>
>>                 .eUavhL:after {
>>                     border-radius: 4px;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .eUavhL[aria-pressed="true"] {
>>                 border-color: transparent;
>>             }
>>
>>             /*!sc*/
>>             .eUavhL:after {
>>                 bottom: -1px;
>>                 left: -1px;
>>                 right: -1px;
>>                 top: -1px;
>>             }
>>
>>             /*!sc*/
>>             .gWOeyE {
>>                 padding: 16px;
>>                 background-color: #FFF;
>>                 border: 1px solid #D1D1D5;
>>             }
>>
>>             /*!sc*/
>>             @media (min-width: 481px) {
>>                 .gWOeyE {
>>                     border-radius:4px;
>>                 }
>>
>>                 .gWOeyE:after {
>>                     border-radius: 4px;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .gWOeyE[aria-pressed="true"] {
>>                 border-color: transparent;
>>             }
>>
>>             /*!sc*/
>>             .gWOeyE:after {
>>                 bottom: -1px;
>>                 left: -1px;
>>                 right: -1px;
>>                 top: -1px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g89[id="StyledCard-c11n-8-70-1__sc-rmiu6p-0"] {
>>                 content: "eRrBwH,eUavhL,gWOeyE,"
>>             }
>>
>>             /*!sc*/
>>             .HykrT {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 20px;
>>                 line-height: 24px;
>>                 padding-bottom: 16px;
>>                 border-bottom: 1px solid #D1D1D5;
>>                 margin-top: 0;
>>                 margin-bottom: 24px;
>>             }
>>
>>             /*!sc*/
>>             .HykrT > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g91[id="CardHeader-c11n-8-70-1__sc-ihwhqj-0"] {
>>                 content: "HykrT,"
>>             }
>>
>>             /*!sc*/
>>             .iMGhof {
>>                 border-bottom: 1px solid #D1D1D5;
>>                 padding-bottom: 24px;
>>                 margin-bottom: 24px;
>>             }
>>
>>             /*!sc*/
>>             .iMGhof:last-of-type {
>>                 border-bottom: 0;
>>                 padding-bottom: 0;
>>                 margin-bottom: 0;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g92[id="CardSection-c11n-8-70-1__sc-10rcp1p-0"] {
>>                 content: "iMGhof,"
>>             }
>>
>>             /*!sc*/
>>             .fpTzAM {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>                 margin-top: 8px;
>>                 margin-left: 16px;
>>             }
>>
>>             /*!sc*/
>>             .fpTzAM > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .fpTzAM strong,.fpTzAM b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .fpTzAM em,.fpTzAM i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .gUsGPM {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>                 margin-bottom: 8px;
>>                 margin-left: 16px;
>>             }
>>
>>             /*!sc*/
>>             .gUsGPM > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .gUsGPM strong,.gUsGPM b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .gUsGPM em,.gUsGPM i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .bJEGlV {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>                 margin-top: 8px;
>>                 margin-bottom: 24px;
>>             }
>>
>>             /*!sc*/
>>             .bJEGlV > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .bJEGlV strong,.bJEGlV b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .bJEGlV em,.bJEGlV i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .iVquYu {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>                 margin-bottom: 8px;
>>             }
>>
>>             /*!sc*/
>>             .iVquYu > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .iVquYu strong,.iVquYu b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .iVquYu em,.iVquYu i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .bqwEJl {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 400;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>                 margin-top: 16px;
>>             }
>>
>>             /*!sc*/
>>             .bqwEJl > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .bqwEJl strong,.bqwEJl b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .bqwEJl em,.bqwEJl i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g97[id="StyledParagraph-c11n-8-70-1__sc-18ze78a-0"] {
>>                 content: "fpTzAM,gUsGPM,bJEGlV,iVquYu,bqwEJl,"
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ {
>>                 background: transparent;
>>                 display: inline-block;
>>                 vertical-align: top;
>>                 border: 0;
>>                 padding: 0;
>>                 border-radius: 50%;
>>                 height: 16px;
>>                 width: 16px;
>>                 position: relative;
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ .StyledHelpCircle-c11n-8-70-1__sc-1gopb49-0 {
>>                 fill: #FFF;
>>                 stroke: #A7A6AB;
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ .StyledHelpQuestion-c11n-8-70-1__sc-1gopb49-1 {
>>                 fill: #2A2A33;
>>             }
>>
>>             /*!sc*/
>>             @media (hover: hover) and (pointer:fine) {
>>                 .cHnstQ:hover:not(:disabled) .StyledHelpCircle-c11n-8-70-1__sc-1gopb49-0 {
>>                     stroke:#A7A6AB;
>>                     fill: #F1F1F4;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ:active .StyledHelpCircle-c11n-8-70-1__sc-1gopb49-0{
>>                 stroke: #54545A;
>>                 fill: #D1D1D5;
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ:active .StyledHelpQuestion-c11n-8-70-1__sc-1gopb49-1 {
>>                 fill: #2A2A33;
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ:focus {
>>                 outline: none;
>>                 box-shadow: 0 0 0px 1px #FFF,0 0 2px 3px #A6E5FF,0 0 2px 4px #006AFF;
>>             }
>>
>>             /*!sc*/
>>             .cHnstQ:after {
>>                 content: "";
>>                 cursor: pointer;
>>                 position: absolute;
>>                 top: -5px;
>>                 right: -5px;
>>                 bottom: -5px;
>>                 left: -5px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g119[id="TriggerButton-c11n-8-70-1__sc-19o64qd-0"] {
>>                 content: "cHnstQ,"
>>             }
>>
>>             /*!sc*/
>>             .zlcxs {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .zlcxs > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .zlcxs strong,.zlcxs b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .zlcxs em,.zlcxs i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .kYyUa {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 36px;
>>                 line-height: 40px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .kYyUa > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .kYyUa strong,.kYyUa b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .kYyUa em,.kYyUa i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             .esssen {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 20px;
>>                 line-height: 24px;
>>                 margin: 0;
>>             }
>>
>>             /*!sc*/
>>             .esssen > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 2px;
>>             }
>>
>>             /*!sc*/
>>             .esssen strong,.esssen b {
>>                 font-weight: 700;
>>             }
>>
>>             /*!sc*/
>>             .esssen em,.esssen i {
>>                 font-style: italic;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g126[id="StyledHeading-c11n-8-70-1__sc-ktujwe-0"] {
>>                 content: "zlcxs,kYyUa,esssen,"
>>             }
>>
>>             /*!sc*/
>>             .kdATwA {
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: row;
>>                 -ms-flex-direction: row;
>>                 flex-direction: row;
>>                 -webkit-align-items: flex-start;
>>                 -webkit-box-align: flex-start;
>>                 -ms-flex-align: flex-start;
>>                 align-items: flex-start;
>>             }
>>
>>             /*!sc*/
>>             .kdATwA .MediaObject__Media-sc-12gs3hz-3 {
>>                 margin-right: 16px;
>>             }
>>
>>             /*!sc*/
>>             .kdATwA .MediaObject__Body-sc-12gs3hz-2 {
>>                 -webkit-box-flex: 1;
>>                 -webkit-flex-grow: 1;
>>                 -ms-flex-positive: 1;
>>                 flex-grow: 1;
>>             }
>>
>>             /*!sc*/
>>             _:-ms-fullscreen .kdATwA .MediaObject__Media-sc-12gs3hz-3,.kdATwA .MediaObject__Media-sc-12gs3hz-3,_:-ms-fullscreen .kdATwA .MediaObject__Body-sc-12gs3hz-2,.kdATwA .MediaObject__Body-sc-12gs3hz-2 {
>>                 max-width: 100%;
>>                 min-width: 1px;
>>             }
>>
>>             /*!sc*/
>>             data-styled.g155[id="MediaObject-c11n-8-70-1__sc-1c6i1ap-0"] {
>>                 content: "kdATwA,"
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 {
>>                 box-sizing: border-box;
>>                 background-color: #FFF;
>>                 box-shadow: 0 8px 12px 0 rgba(0,0,0,0.3);
>>                 outline: none;
>>                 border-radius: 8px;
>>                 position: relative;
>>                 z-index: 100011;
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: column;
>>                 -ms-flex-direction: column;
>>                 flex-direction: column;
>>                 border-radius: 4px;
>>                 width: 100%;
>>                 max-width: 360px;
>>                 max-height: 320px;
>>                 -webkit-transform: translate3d(0,0,0);
>>                 -ms-transform: translate3d(0,0,0);
>>                 transform: translate3d(0,0,0);
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogClose-c11n-8-70-1__sc-1t0puoj-0 {
>>                 position: absolute;
>>                 z-index: 100013;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogHeader-c11n-8-70-1__sc-1nk3a2m-0 {
>>                 padding: 16px;
>>                 padding-right: calc(16px + 32px);
>>                 border-bottom: 1px solid #D1D1D5;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogHeader-c11n-8-70-1__sc-1nk3a2m-0 .Text-c11n-8-70-1__sc-aiai24-0 {
>>                 color: #2A2A33;
>>                 -webkit-font-smoothing: antialiased;
>>                 -moz-osx-font-smoothing: grayscale;
>>                 text-transform: none;
>>                 font-family: "Open Sans","Adjusted Arial",Tahoma,Geneva,sans-serif;
>>                 font-weight: 700;
>>                 font-size: 16px;
>>                 line-height: 24px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogHeader-c11n-8-70-1__sc-1nk3a2m-0 .Text-c11n-8-70-1__sc-aiai24-0 > .Icon-c11n-8-70-1__sc-13llmml-0 {
>>                 margin-top: 4px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogActions-c11n-8-70-1__sc-12igiol-0 {
>>                 padding-top: 16px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogBody-c11n-8-70-1__sc-dazfx6-0 {
>>                 overflow-y: auto;
>>                 -webkit-overflow-scrolling: touch;
>>                 padding: 16px 16px 0;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogBody-c11n-8-70-1__sc-dazfx6-0:after {
>>                 content: "";
>>                 display: block;
>>                 height: 16px;
>>             }
>>
>>             /*!sc*/
>>             _:-ms-fullscreen .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogBody-c11n-8-70-1__sc-dazfx6-0,.lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogBody-c11n-8-70-1__sc-dazfx6-0 {
>>                 -webkit-flex-basis: 150px;
>>                 -ms-flex-preferred-size: 150px;
>>                 flex-basis: 150px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0:after {
>>                 content: "";
>>                 position: absolute;
>>                 left: 16px;
>>                 right: 16px;
>>                 bottom: 0;
>>                 height: 16px;
>>                 background: linear-gradient( 180deg,rgba(255,255,255,0) 0%,#FFF 100% );
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogClose-c11n-8-70-1__sc-1t0puoj-0 {
>>                 right: 16px;
>>                 top: 16px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogHeader-c11n-8-70-1__sc-1nk3a2m-0 {
>>                 background-color: #F2FAFF;
>>                 border-color: #F2FAFF;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .PopoverIcon-c11n-8-70-1__sc-1lz074r-0 {
>>                 color: #001751;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0[data-popper-placement^="bottom"] .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0:after {
>>                 background-color: #F2FAFF;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                 position: absolute;
>>                 display: block;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0[data-popper-placement^="top"] .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                 bottom: -40px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0[data-popper-placement^="right"] .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                 left: -40px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0[data-popper-placement^="bottom"] .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                 top: -40px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0[data-popper-placement^="left"] .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                 right: -40px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .PopoverIcon-c11n-8-70-1__sc-1lz074r-0 {
>>                 position: absolute;
>>                 top: 16px;
>>                 left: 16px;
>>             }
>>
>>             /*!sc*/
>>             .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 .DialogHeader-c11n-8-70-1__sc-1nk3a2m-0 {
>>                 padding-left: 48px;
>>             }
>>
>>             /*!sc*/
>>             @media (max-width: 480px) {
>>                 .lniZLm {
>>                     position:fixed;
>>                     top: 0;
>>                     left: 0;
>>                     z-index: 100002;
>>                     height: 100%;
>>                     width: 100%;
>>                     overflow-y: auto;
>>                     -webkit-overflow-scrolling: touch;
>>                     box-sizing: border-box;
>>                     padding: 48px 16px;
>>                     display: -webkit-box;
>>                     display: -webkit-flex;
>>                     display: -ms-flexbox;
>>                     display: flex;
>>                     -webkit-box-pack: center;
>>                     -webkit-justify-content: center;
>>                     -ms-flex-pack: center;
>>                     justify-content: center;
>>                     -webkit-align-items: center;
>>                     -webkit-box-align: center;
>>                     -ms-flex-align: center;
>>                     align-items: center;
>>                 }
>>
>>                 .lniZLm > .Mask-c11n-8-70-1__sc-1lyx31t-0 {
>>                     position: fixed;
>>                     top: 0;
>>                     left: 0;
>>                     height: 100%;
>>                     width: 100%;
>>                     z-index: 1;
>>                 }
>>
>>                 .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0.StyledDialog-c11n-8-70-1__sc-3phm7o-0 {
>>                     z-index: 2;
>>                     box-shadow: 0 15px 30px 0 rgba(0,0,0,0.3);
>>                 }
>>
>>                 .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 {
>>                     -webkit-transform: none !important;
>>                     -ms-transform: none !important;
>>                     transform: none !important;
>>                     position: relative !important;
>>                 }
>>
>>                 .lniZLm > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 > .PopoverArrow-c11n-8-70-1__sc-10mxq8o-0 {
>>                     display: none;
>>                 }
>>             }
>>
>>             /*!sc*/
>>             .jllIAx > .StyledDialog-c11n-8-70-1__sc-3phm7o-0 {
>>                 box-sizing: border-box;
>>                 background-color: #FFF;
>>                 box-shadow: 0 8px 12px 0 rgba(0,0,0,0.3);
>>                 outline: none;
>>                 border-radius: 8px;
>>                 position: relative;
>>                 z-index: 100011;
>>                 display: -webkit-box;
>>                 display: -webkit-flex;
>>                 display: -ms-flexbox;
>>                 display: flex;
>>                 -webkit-flex-direction: column;
>>                 -ms-flex-direction: column;
>>                 flex-direction: column;
>>                 border-radius: 4px;
>>                 width: 100%;
>>                 max-width: 360px;
>>                 max-height: 320px;
>>                 -webkit-transform: translate3d(0,0,0);
>>                 -ms-transform: translate3d(0,0,0);
>>
